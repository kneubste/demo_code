
demo_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ba0  0800a0b8  0800a0b8  0001a0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc58  0800dc58  000204a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc58  0800dc58  0001dc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc60  0800dc60  000204a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc60  0800dc60  0001dc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc64  0800dc64  0001dc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a8  20000000  0800dc68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa8  200004a8  0800e110  000204a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f50  0800e110  00020f50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001527b  00000000  00000000  000204d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c9  00000000  00000000  00035753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00038d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002703f  00000000  00000000  0003b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001879c  00000000  00000000  00062477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ded6c  00000000  00000000  0007ac13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015997f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab0  00000000  00000000  001599d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200004a8 	.word	0x200004a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a0a0 	.word	0x0800a0a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200004ac 	.word	0x200004ac
 80001ec:	0800a0a0 	.word	0x0800a0a0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <average>:
 * @param	numb_samples Number of samples
 * @param	arr[] Array filed with samples
 * @note	-
 * @return	Calculated average of the ADC samples
 *****************************************************************************/
int32_t average(int32_t numb_samples, int32_t arr[]){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	int i;
	int32_t avg = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < numb_samples; i++){
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	e00a      	b.n	8000ee6 <average+0x2a>
		avg += arr[i];
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < numb_samples; i++){
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbf0      	blt.n	8000ed0 <average+0x14>
	}
	avg /= numb_samples;
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef6:	60bb      	str	r3, [r7, #8]

	return avg;
 8000ef8:	68bb      	ldr	r3, [r7, #8]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <RMS>:
 * @param	numb_samples: number of samples
 * @param	arr[]: array filled with samples
 * @note	-
 * @return 	calculated RMS value
 *****************************************************************************/
int32_t RMS(int32_t numb_samples, int32_t arr[]){
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b088      	sub	sp, #32
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
	int i;
	int32_t avg = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
	int32_t rms = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
	int32_t tmp = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
	int32_t diff = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]

	avg = average(numb_samples, arr);
 8000f20:	6839      	ldr	r1, [r7, #0]
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffca 	bl	8000ebc <average>
 8000f28:	6178      	str	r0, [r7, #20]

	for(i = 0; i < numb_samples; i++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e012      	b.n	8000f56 <RMS+0x50>
		diff = arr[i] - avg;
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	60fb      	str	r3, [r7, #12]
		tmp = diff * diff;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	fb03 f303 	mul.w	r3, r3, r3
 8000f46:	613b      	str	r3, [r7, #16]
		rms = rms + tmp;
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < numb_samples; i++){
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	3301      	adds	r3, #1
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbe8      	blt.n	8000f30 <RMS+0x2a>
	}
	rms = rms / numb_samples;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f66:	61bb      	str	r3, [r7, #24]
	rms = sqrt(rms);
 8000f68:	69b8      	ldr	r0, [r7, #24]
 8000f6a:	f7ff fae3 	bl	8000534 <__aeabi_i2d>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	ec43 2b10 	vmov	d0, r2, r3
 8000f76:	f008 ffa1 	bl	8009ebc <sqrt>
 8000f7a:	ec53 2b10 	vmov	r2, r3, d0
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fdf1 	bl	8000b68 <__aeabi_d2iz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	61bb      	str	r3, [r7, #24]

	return rms;
 8000f8a:	69bb      	ldr	r3, [r7, #24]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <distance_to_cable>:
 * 			else = accurate measurement (50 samples)
 * @param	meas_type	1 = wire
 * 						else = cable
 * @return 	distance to the cable up to 200mm
 *****************************************************************************/
int32_t distance_to_cable(int32_t meas_mode){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

	int32_t dist = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
	int32_t e_val = 0; //< e_val is the electrical field value
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]



		if(meas_mode == 1){
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10e      	bne.n	8000fc8 <distance_to_cable+0x34>
			pad1 = RMS(10, PAD1_samples);
 8000faa:	4936      	ldr	r1, [pc, #216]	; (8001084 <distance_to_cable+0xf0>)
 8000fac:	200a      	movs	r0, #10
 8000fae:	f7ff ffaa 	bl	8000f06 <RMS>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a34      	ldr	r2, [pc, #208]	; (8001088 <distance_to_cable+0xf4>)
 8000fb6:	6013      	str	r3, [r2, #0]
			pad2 = RMS(10, PAD2_samples);
 8000fb8:	4934      	ldr	r1, [pc, #208]	; (800108c <distance_to_cable+0xf8>)
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f7ff ffa3 	bl	8000f06 <RMS>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a33      	ldr	r2, [pc, #204]	; (8001090 <distance_to_cable+0xfc>)
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e00d      	b.n	8000fe4 <distance_to_cable+0x50>
		}
		else{
			pad1 = RMS(50, PAD1_samples);
 8000fc8:	492e      	ldr	r1, [pc, #184]	; (8001084 <distance_to_cable+0xf0>)
 8000fca:	2032      	movs	r0, #50	; 0x32
 8000fcc:	f7ff ff9b 	bl	8000f06 <RMS>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a2d      	ldr	r2, [pc, #180]	; (8001088 <distance_to_cable+0xf4>)
 8000fd4:	6013      	str	r3, [r2, #0]
			pad2 = RMS(50, PAD2_samples);
 8000fd6:	492d      	ldr	r1, [pc, #180]	; (800108c <distance_to_cable+0xf8>)
 8000fd8:	2032      	movs	r0, #50	; 0x32
 8000fda:	f7ff ff94 	bl	8000f06 <RMS>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a2b      	ldr	r2, [pc, #172]	; (8001090 <distance_to_cable+0xfc>)
 8000fe2:	6013      	str	r3, [r2, #0]
		}
		e_val = (pad1 + pad2) / 2;
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <distance_to_cable+0xf4>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <distance_to_cable+0xfc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	0fda      	lsrs	r2, r3, #31
 8000ff0:	4413      	add	r3, r2
 8000ff2:	105b      	asrs	r3, r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]

	if(MEAS_data_wire){
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <distance_to_cable+0x100>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d01b      	beq.n	8001036 <distance_to_cable+0xa2>

		if(e_val >= 900){
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001004:	db03      	blt.n	800100e <distance_to_cable+0x7a>
			dist = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
			return dist;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	e035      	b.n	800107a <distance_to_cable+0xe6>
		}
		else if(e_val <= 96){
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b60      	cmp	r3, #96	; 0x60
 8001012:	dc07      	bgt.n	8001024 <distance_to_cable+0x90>
			dist = -1;
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	60fb      	str	r3, [r7, #12]
			return dist;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	e02d      	b.n	800107a <distance_to_cable+0xe6>
		}
		else{
			while(lut_pad_wire[dist] > e_val){
				dist++;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
			while(lut_pad_wire[dist] > e_val){
 8001024:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <distance_to_cable+0x104>)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	429a      	cmp	r2, r3
 8001030:	dbf5      	blt.n	800101e <distance_to_cable+0x8a>
			}
			return dist;}
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	e021      	b.n	800107a <distance_to_cable+0xe6>
		}
		else if(MEAS_data_cable){
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <distance_to_cable+0x108>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d01b      	beq.n	8001076 <distance_to_cable+0xe2>
		if(e_val >= 500){
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001044:	db03      	blt.n	800104e <distance_to_cable+0xba>
			dist = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
			return dist;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	e015      	b.n	800107a <distance_to_cable+0xe6>
		}
		else if(e_val <= 72){
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b48      	cmp	r3, #72	; 0x48
 8001052:	dc07      	bgt.n	8001064 <distance_to_cable+0xd0>
			dist = -1;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	60fb      	str	r3, [r7, #12]
			return dist;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	e00d      	b.n	800107a <distance_to_cable+0xe6>
		}
		else{
			while(lut_pad_wire[dist]>e_val){
				dist++;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
			while(lut_pad_wire[dist]>e_val){
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <distance_to_cable+0x104>)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	429a      	cmp	r2, r3
 8001070:	dbf5      	blt.n	800105e <distance_to_cable+0xca>
			}
			return dist;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	e001      	b.n	800107a <distance_to_cable+0xe6>
		}

		}

	return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200008b0 	.word	0x200008b0
 8001088:	200004c4 	.word	0x200004c4
 800108c:	200009a0 	.word	0x200009a0
 8001090:	200004c8 	.word	0x200004c8
 8001094:	200004e0 	.word	0x200004e0
 8001098:	20000000 	.word	0x20000000
 800109c:	200004e1 	.word	0x200004e1

080010a0 <angle_to_cable>:
 * @note  	range [-45,45]°, precision -/+15
 * 			calibrated @ 20mm distance to wire/cable
 * @n		The field is very location and board depending.
 * @return	angle to wire/cable
 *****************************************************************************/
int32_t angle_to_cable(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0

	float diff;
	float ratio;
	float angle;
	int32_t pad1 = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
	int32_t pad2 = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]

	pad1 = RMS(50, PAD1_samples);
 80010ae:	4931      	ldr	r1, [pc, #196]	; (8001174 <angle_to_cable+0xd4>)
 80010b0:	2032      	movs	r0, #50	; 0x32
 80010b2:	f7ff ff28 	bl	8000f06 <RMS>
 80010b6:	60f8      	str	r0, [r7, #12]
	pad2 = RMS(50, PAD2_samples);
 80010b8:	492f      	ldr	r1, [pc, #188]	; (8001178 <angle_to_cable+0xd8>)
 80010ba:	2032      	movs	r0, #50	; 0x32
 80010bc:	f7ff ff23 	bl	8000f06 <RMS>
 80010c0:	60b8      	str	r0, [r7, #8]

	diff = pad1 - pad2;
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d0:	edc7 7a05 	vstr	s15, [r7, #20]

	if(diff > 232){
 80010d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800117c <angle_to_cable+0xdc>
 80010dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	dd01      	ble.n	80010ea <angle_to_cable+0x4a>
		diff = 232;
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <angle_to_cable+0xe0>)
 80010e8:	617b      	str	r3, [r7, #20]
	}

	if(diff < -222){
 80010ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ee:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001184 <angle_to_cable+0xe4>
 80010f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fa:	d501      	bpl.n	8001100 <angle_to_cable+0x60>
		diff = -222;
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <angle_to_cable+0xe8>)
 80010fe:	617b      	str	r3, [r7, #20]
	}

	if(diff > 20)
 8001100:	edd7 7a05 	vldr	s15, [r7, #20]
 8001104:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	dd13      	ble.n	800113a <angle_to_cable+0x9a>
	{
		ratio = diff / 232;
 8001112:	ed97 7a05 	vldr	s14, [r7, #20]
 8001116:	eddf 6a19 	vldr	s13, [pc, #100]	; 800117c <angle_to_cable+0xdc>
 800111a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111e:	edc7 7a01 	vstr	s15, [r7, #4]
		angle = 45 * ratio;
 8001122:	edd7 7a01 	vldr	s15, [r7, #4]
 8001126:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800118c <angle_to_cable+0xec>
 800112a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112e:	edc7 7a04 	vstr	s15, [r7, #16]
		CALC_degree_left = true;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <angle_to_cable+0xf0>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	e012      	b.n	8001160 <angle_to_cable+0xc0>
	}
	else
	{
		ratio = diff / 222;
 800113a:	ed97 7a05 	vldr	s14, [r7, #20]
 800113e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001194 <angle_to_cable+0xf4>
 8001142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001146:	edc7 7a01 	vstr	s15, [r7, #4]
		angle = 45 * ratio;
 800114a:	edd7 7a01 	vldr	s15, [r7, #4]
 800114e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800118c <angle_to_cable+0xec>
 8001152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001156:	edc7 7a04 	vstr	s15, [r7, #16]
		CALC_degree_right = true;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <angle_to_cable+0xf8>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
	}



	return angle;
 8001160:	edd7 7a04 	vldr	s15, [r7, #16]
 8001164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001168:	ee17 3a90 	vmov	r3, s15

}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200008b0 	.word	0x200008b0
 8001178:	200009a0 	.word	0x200009a0
 800117c:	43680000 	.word	0x43680000
 8001180:	43680000 	.word	0x43680000
 8001184:	c35e0000 	.word	0xc35e0000
 8001188:	c35e0000 	.word	0xc35e0000
 800118c:	42340000 	.word	0x42340000
 8001190:	200004cc 	.word	0x200004cc
 8001194:	435e0000 	.word	0x435e0000
 8001198:	200004cd 	.word	0x200004cd

0800119c <current>:
 * @param	meas_mode	1 = single, else = accurate
 * @note  	return expected current 5A or 1.2A
 * 			The field is very location and board depending.
 * @return	-1 if no clear value
 *****************************************************************************/
int32_t current(int32_t meas_mode){
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

	int32_t coil1 = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
	int32_t coil2 = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
	int32_t b_val = 0; //<
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
	int current = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]

	//Calculate RMS for single / accu value
	if(meas_mode == 1){
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d10a      	bne.n	80011d0 <current+0x34>
		coil1 = RMS(10, COIL1_samples);
 80011ba:	492b      	ldr	r1, [pc, #172]	; (8001268 <current+0xcc>)
 80011bc:	200a      	movs	r0, #10
 80011be:	f7ff fea2 	bl	8000f06 <RMS>
 80011c2:	6178      	str	r0, [r7, #20]
		coil2 = RMS(10, COIL2_samples);
 80011c4:	4929      	ldr	r1, [pc, #164]	; (800126c <current+0xd0>)
 80011c6:	200a      	movs	r0, #10
 80011c8:	f7ff fe9d 	bl	8000f06 <RMS>
 80011cc:	6138      	str	r0, [r7, #16]
 80011ce:	e009      	b.n	80011e4 <current+0x48>
	}
	else{
		coil1 = RMS(50, COIL1_samples);
 80011d0:	4925      	ldr	r1, [pc, #148]	; (8001268 <current+0xcc>)
 80011d2:	2032      	movs	r0, #50	; 0x32
 80011d4:	f7ff fe97 	bl	8000f06 <RMS>
 80011d8:	6178      	str	r0, [r7, #20]
		coil2 = RMS(50, COIL2_samples);
 80011da:	4924      	ldr	r1, [pc, #144]	; (800126c <current+0xd0>)
 80011dc:	2032      	movs	r0, #50	; 0x32
 80011de:	f7ff fe92 	bl	8000f06 <RMS>
 80011e2:	6138      	str	r0, [r7, #16]
	}

	// Mean value for the b-field. The field is very location and board depending.
	b_val = (coil1 + coil2) / 2;
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4413      	add	r3, r2
 80011ea:	0fda      	lsrs	r2, r3, #31
 80011ec:	4413      	add	r3, r2
 80011ee:	105b      	asrs	r3, r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]

	if(MEAS_data_wire){
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <current+0xd4>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d017      	beq.n	800122a <current+0x8e>

		if((b_val <= 850) && (b_val > 400)){
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f240 3252 	movw	r2, #850	; 0x352
 8001200:	4293      	cmp	r3, r2
 8001202:	dc08      	bgt.n	8001216 <current+0x7a>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800120a:	dd04      	ble.n	8001216 <current+0x7a>
			current = 1200;
 800120c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001210:	60bb      	str	r3, [r7, #8]
			return current;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	e024      	b.n	8001260 <current+0xc4>
		}
		else if(b_val > 850){
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f240 3252 	movw	r2, #850	; 0x352
 800121c:	4293      	cmp	r3, r2
 800121e:	dd1d      	ble.n	800125c <current+0xc0>
			current = 5000;
 8001220:	f241 3388 	movw	r3, #5000	; 0x1388
 8001224:	60bb      	str	r3, [r7, #8]
			return current;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	e01a      	b.n	8001260 <current+0xc4>
		}
	}
	else if(MEAS_data_cable){
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <current+0xd8>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d014      	beq.n	800125c <current+0xc0>

		if((b_val <= 420) && (b_val >= 250)){
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001238:	dc07      	bgt.n	800124a <current+0xae>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2bf9      	cmp	r3, #249	; 0xf9
 800123e:	dd04      	ble.n	800124a <current+0xae>
			current = 1200;
 8001240:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001244:	60bb      	str	r3, [r7, #8]
			return current;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	e00a      	b.n	8001260 <current+0xc4>
		}
		else if((b_val > 400)){
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001250:	dd04      	ble.n	800125c <current+0xc0>
			current = 5000;
 8001252:	f241 3388 	movw	r3, #5000	; 0x1388
 8001256:	60bb      	str	r3, [r7, #8]
			return current;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	e001      	b.n	8001260 <current+0xc4>
		}
	}
	return -1;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000a90 	.word	0x20000a90
 800126c:	20000b80 	.word	0x20000b80
 8001270:	200004e0 	.word	0x200004e0
 8001274:	200004e1 	.word	0x200004e1

08001278 <DISP_show_data_wire>:
 * @brief Function for displaying the wire data
 * @note  	This function calls the required functions to display the data for a wire measurement
 * @n		Clears the ADC_samples array after displaying all the data
 *****************************************************************************/
void DISP_show_data_wire(void)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b093      	sub	sp, #76	; 0x4c
 800127c:	af00      	add	r7, sp, #0
	const uint32_t Y_OFFSET_PAD = 220;					//Offset for pad-graph
 800127e:	23dc      	movs	r3, #220	; 0xdc
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t Y_OFFSET_COIL = 280;					//0ffset for coil-graph
 8001282:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint32_t X_SIZE = 240;
 8001288:	23f0      	movs	r3, #240	; 0xf0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
	const uint32_t f = (6 << ADC_DAC_RES) /	Y_OFFSET_COIL + 1;   	// Scaling factor
 800128c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	3301      	adds	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t data;
	uint32_t data_last;


	// Call for calculations
	dist_single = distance_to_cable(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff fe7a 	bl	8000f94 <distance_to_cable>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4aa9      	ldr	r2, [pc, #676]	; (8001548 <DISP_show_data_wire+0x2d0>)
 80012a4:	6013      	str	r3, [r2, #0]
	dist_accu = distance_to_cable(0);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff fe74 	bl	8000f94 <distance_to_cable>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4aa7      	ldr	r2, [pc, #668]	; (800154c <DISP_show_data_wire+0x2d4>)
 80012b0:	6013      	str	r3, [r2, #0]
	current_single=current(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff ff72 	bl	800119c <current>
 80012b8:	ee07 0a90 	vmov	s15, r0
 80012bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c0:	4ba3      	ldr	r3, [pc, #652]	; (8001550 <DISP_show_data_wire+0x2d8>)
 80012c2:	edc3 7a00 	vstr	s15, [r3]
	current_accu=current(0);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff ff68 	bl	800119c <current>
 80012cc:	ee07 0a90 	vmov	s15, r0
 80012d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d4:	4b9f      	ldr	r3, [pc, #636]	; (8001554 <DISP_show_data_wire+0x2dc>)
 80012d6:	edc3 7a00 	vstr	s15, [r3]

	if((dist_accu < 0)||(dist_single < 0)){
 80012da:	4b9c      	ldr	r3, [pc, #624]	; (800154c <DISP_show_data_wire+0x2d4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db03      	blt.n	80012ea <DISP_show_data_wire+0x72>
 80012e2:	4b99      	ldr	r3, [pc, #612]	; (8001548 <DISP_show_data_wire+0x2d0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da61      	bge.n	80013ae <DISP_show_data_wire+0x136>
		/* Clear the display */
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80012ea:	f04f 30ff 	mov.w	r0, #4294967295
 80012ee:	f002 fe8f 	bl	8004010 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET_COIL + 1);
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	2100      	movs	r1, #0
 8001300:	2000      	movs	r0, #0
 8001302:	f003 f9ed 	bl	80046e0 <BSP_LCD_FillRect>
		/* Write single and accurate measurement of wire */
	    BSP_LCD_SetFont(&Font24);
 8001306:	4894      	ldr	r0, [pc, #592]	; (8001558 <DISP_show_data_wire+0x2e0>)
 8001308:	f002 feb4 	bl	8004074 <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f002 fe96 	bl	8004040 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001314:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001318:	f002 fe7a 	bl	8004010 <BSP_LCD_SetTextColor>
		char text[16];
		BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Wire", LEFT_MODE);
 800131c:	2303      	movs	r3, #3
 800131e:	4a8f      	ldr	r2, [pc, #572]	; (800155c <DISP_show_data_wire+0x2e4>)
 8001320:	210a      	movs	r1, #10
 8001322:	2005      	movs	r0, #5
 8001324:	f002 ff2c 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font20);
 8001328:	488d      	ldr	r0, [pc, #564]	; (8001560 <DISP_show_data_wire+0x2e8>)
 800132a:	f002 fea3 	bl	8004074 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(5,50, (uint8_t *)"Single", LEFT_MODE);
 800132e:	2303      	movs	r3, #3
 8001330:	4a8c      	ldr	r2, [pc, #560]	; (8001564 <DISP_show_data_wire+0x2ec>)
 8001332:	2132      	movs	r1, #50	; 0x32
 8001334:	2005      	movs	r0, #5
 8001336:	f002 ff23 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 800133a:	488b      	ldr	r0, [pc, #556]	; (8001568 <DISP_show_data_wire+0x2f0>)
 800133c:	f002 fe9a 	bl	8004074 <BSP_LCD_SetFont>
		snprintf(text, 15, "Distance: %4d", (int)(dist_single));
 8001340:	4b81      	ldr	r3, [pc, #516]	; (8001548 <DISP_show_data_wire+0x2d0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f107 0010 	add.w	r0, r7, #16
 8001348:	4a88      	ldr	r2, [pc, #544]	; (800156c <DISP_show_data_wire+0x2f4>)
 800134a:	210f      	movs	r1, #15
 800134c:	f008 f934 	bl	80095b8 <sniprintf>
		BSP_LCD_DisplayStringAt(5, 70, (uint8_t *)text, LEFT_MODE);
 8001350:	f107 0210 	add.w	r2, r7, #16
 8001354:	2303      	movs	r3, #3
 8001356:	2146      	movs	r1, #70	; 0x46
 8001358:	2005      	movs	r0, #5
 800135a:	f002 ff11 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font20);
 800135e:	4880      	ldr	r0, [pc, #512]	; (8001560 <DISP_show_data_wire+0x2e8>)
 8001360:	f002 fe88 	bl	8004074 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(5,110, (uint8_t *)"Accurate", LEFT_MODE);
 8001364:	2303      	movs	r3, #3
 8001366:	4a82      	ldr	r2, [pc, #520]	; (8001570 <DISP_show_data_wire+0x2f8>)
 8001368:	216e      	movs	r1, #110	; 0x6e
 800136a:	2005      	movs	r0, #5
 800136c:	f002 ff08 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 8001370:	487d      	ldr	r0, [pc, #500]	; (8001568 <DISP_show_data_wire+0x2f0>)
 8001372:	f002 fe7f 	bl	8004074 <BSP_LCD_SetFont>
		snprintf(text, 15, "Distance: %4d", (int)(dist_accu));
 8001376:	4b75      	ldr	r3, [pc, #468]	; (800154c <DISP_show_data_wire+0x2d4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f107 0010 	add.w	r0, r7, #16
 800137e:	4a7b      	ldr	r2, [pc, #492]	; (800156c <DISP_show_data_wire+0x2f4>)
 8001380:	210f      	movs	r1, #15
 8001382:	f008 f919 	bl	80095b8 <sniprintf>
		BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)text, LEFT_MODE);
 8001386:	f107 0210 	add.w	r2, r7, #16
 800138a:	2303      	movs	r3, #3
 800138c:	2182      	movs	r1, #130	; 0x82
 800138e:	2005      	movs	r0, #5
 8001390:	f002 fef6 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font24);
 8001394:	4870      	ldr	r0, [pc, #448]	; (8001558 <DISP_show_data_wire+0x2e0>)
 8001396:	f002 fe6d 	bl	8004074 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800139a:	4876      	ldr	r0, [pc, #472]	; (8001574 <DISP_show_data_wire+0x2fc>)
 800139c:	f002 fe38 	bl	8004010 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(5,180, (uint8_t *)"OUT OF RANGE", CENTER_MODE);
 80013a0:	2301      	movs	r3, #1
 80013a2:	4a75      	ldr	r2, [pc, #468]	; (8001578 <DISP_show_data_wire+0x300>)
 80013a4:	21b4      	movs	r1, #180	; 0xb4
 80013a6:	2005      	movs	r0, #5
 80013a8:	f002 feea 	bl	8004180 <BSP_LCD_DisplayStringAt>
	if((dist_accu < 0)||(dist_single < 0)){
 80013ac:	e19b      	b.n	80016e6 <DISP_show_data_wire+0x46e>

	}
	else{
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80013ae:	f04f 30ff 	mov.w	r0, #4294967295
 80013b2:	f002 fe2d 	bl	8004010 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET_COIL + 1);
 80013b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	2100      	movs	r1, #0
 80013c4:	2000      	movs	r0, #0
 80013c6:	f003 f98b 	bl	80046e0 <BSP_LCD_FillRect>
	/* Write single and accurate measurement of wire */
    BSP_LCD_SetFont(&Font24);
 80013ca:	4863      	ldr	r0, [pc, #396]	; (8001558 <DISP_show_data_wire+0x2e0>)
 80013cc:	f002 fe52 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f002 fe34 	bl	8004040 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013d8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013dc:	f002 fe18 	bl	8004010 <BSP_LCD_SetTextColor>
	char text[16];
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Wire", LEFT_MODE);
 80013e0:	2303      	movs	r3, #3
 80013e2:	4a5e      	ldr	r2, [pc, #376]	; (800155c <DISP_show_data_wire+0x2e4>)
 80013e4:	210a      	movs	r1, #10
 80013e6:	2005      	movs	r0, #5
 80013e8:	f002 feca 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font20);
 80013ec:	485c      	ldr	r0, [pc, #368]	; (8001560 <DISP_show_data_wire+0x2e8>)
 80013ee:	f002 fe41 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,50, (uint8_t *)"Single", LEFT_MODE);
 80013f2:	2303      	movs	r3, #3
 80013f4:	4a5b      	ldr	r2, [pc, #364]	; (8001564 <DISP_show_data_wire+0x2ec>)
 80013f6:	2132      	movs	r1, #50	; 0x32
 80013f8:	2005      	movs	r0, #5
 80013fa:	f002 fec1 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 80013fe:	485a      	ldr	r0, [pc, #360]	; (8001568 <DISP_show_data_wire+0x2f0>)
 8001400:	f002 fe38 	bl	8004074 <BSP_LCD_SetFont>
	snprintf(text, 15, "Distance: %4d", (int)(dist_single));
 8001404:	4b50      	ldr	r3, [pc, #320]	; (8001548 <DISP_show_data_wire+0x2d0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4638      	mov	r0, r7
 800140a:	4a58      	ldr	r2, [pc, #352]	; (800156c <DISP_show_data_wire+0x2f4>)
 800140c:	210f      	movs	r1, #15
 800140e:	f008 f8d3 	bl	80095b8 <sniprintf>
	BSP_LCD_DisplayStringAt(5, 70, (uint8_t *)text, LEFT_MODE);
 8001412:	463a      	mov	r2, r7
 8001414:	2303      	movs	r3, #3
 8001416:	2146      	movs	r1, #70	; 0x46
 8001418:	2005      	movs	r0, #5
 800141a:	f002 feb1 	bl	8004180 <BSP_LCD_DisplayStringAt>
	snprintf(text, 15, "Current:  %4d", (int)(current_single));
 800141e:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <DISP_show_data_wire+0x2d8>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001428:	4638      	mov	r0, r7
 800142a:	ee17 3a90 	vmov	r3, s15
 800142e:	4a53      	ldr	r2, [pc, #332]	; (800157c <DISP_show_data_wire+0x304>)
 8001430:	210f      	movs	r1, #15
 8001432:	f008 f8c1 	bl	80095b8 <sniprintf>
	BSP_LCD_DisplayStringAt(5, 85, (uint8_t *)text, LEFT_MODE);
 8001436:	463a      	mov	r2, r7
 8001438:	2303      	movs	r3, #3
 800143a:	2155      	movs	r1, #85	; 0x55
 800143c:	2005      	movs	r0, #5
 800143e:	f002 fe9f 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font20);
 8001442:	4847      	ldr	r0, [pc, #284]	; (8001560 <DISP_show_data_wire+0x2e8>)
 8001444:	f002 fe16 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,110, (uint8_t *)"Accurate", LEFT_MODE);
 8001448:	2303      	movs	r3, #3
 800144a:	4a49      	ldr	r2, [pc, #292]	; (8001570 <DISP_show_data_wire+0x2f8>)
 800144c:	216e      	movs	r1, #110	; 0x6e
 800144e:	2005      	movs	r0, #5
 8001450:	f002 fe96 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8001454:	4844      	ldr	r0, [pc, #272]	; (8001568 <DISP_show_data_wire+0x2f0>)
 8001456:	f002 fe0d 	bl	8004074 <BSP_LCD_SetFont>
	snprintf(text, 15, "Distance: %4d", (int)(dist_accu));
 800145a:	4b3c      	ldr	r3, [pc, #240]	; (800154c <DISP_show_data_wire+0x2d4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4638      	mov	r0, r7
 8001460:	4a42      	ldr	r2, [pc, #264]	; (800156c <DISP_show_data_wire+0x2f4>)
 8001462:	210f      	movs	r1, #15
 8001464:	f008 f8a8 	bl	80095b8 <sniprintf>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)text, LEFT_MODE);
 8001468:	463a      	mov	r2, r7
 800146a:	2303      	movs	r3, #3
 800146c:	2182      	movs	r1, #130	; 0x82
 800146e:	2005      	movs	r0, #5
 8001470:	f002 fe86 	bl	8004180 <BSP_LCD_DisplayStringAt>
	snprintf(text, 15, "Current:  %4d", (int)(current_accu));
 8001474:	4b37      	ldr	r3, [pc, #220]	; (8001554 <DISP_show_data_wire+0x2dc>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147e:	4638      	mov	r0, r7
 8001480:	ee17 3a90 	vmov	r3, s15
 8001484:	4a3d      	ldr	r2, [pc, #244]	; (800157c <DISP_show_data_wire+0x304>)
 8001486:	210f      	movs	r1, #15
 8001488:	f008 f896 	bl	80095b8 <sniprintf>
	BSP_LCD_DisplayStringAt(5, 145, (uint8_t *)text, LEFT_MODE);
 800148c:	463a      	mov	r2, r7
 800148e:	2303      	movs	r3, #3
 8001490:	2191      	movs	r1, #145	; 0x91
 8001492:	2005      	movs	r0, #5
 8001494:	f002 fe74 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 8001498:	4839      	ldr	r0, [pc, #228]	; (8001580 <DISP_show_data_wire+0x308>)
 800149a:	f002 fdeb 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,165, (uint8_t *)"Pad:", LEFT_MODE);
 800149e:	2303      	movs	r3, #3
 80014a0:	4a38      	ldr	r2, [pc, #224]	; (8001584 <DISP_show_data_wire+0x30c>)
 80014a2:	21a5      	movs	r1, #165	; 0xa5
 80014a4:	2005      	movs	r0, #5
 80014a6:	f002 fe6b 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5,225, (uint8_t *)"Coil:", LEFT_MODE);
 80014aa:	2303      	movs	r3, #3
 80014ac:	4a36      	ldr	r2, [pc, #216]	; (8001588 <DISP_show_data_wire+0x310>)
 80014ae:	21e1      	movs	r1, #225	; 0xe1
 80014b0:	2005      	movs	r0, #5
 80014b2:	f002 fe65 	bl	8004180 <BSP_LCD_DisplayStringAt>

	/* draw value of pad1 in a graph */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80014b6:	4835      	ldr	r0, [pc, #212]	; (800158c <DISP_show_data_wire+0x314>)
 80014b8:	f002 fdaa 	bl	8004010 <BSP_LCD_SetTextColor>
	data = PAD1_samples[0] / f;
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <DISP_show_data_wire+0x318>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	647b      	str	r3, [r7, #68]	; 0x44
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 80014ca:	2301      	movs	r3, #1
 80014cc:	643b      	str	r3, [r7, #64]	; 0x40
 80014ce:	e02b      	b.n	8001528 <DISP_show_data_wire+0x2b0>
		data_last = data;
 80014d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d2:	623b      	str	r3, [r7, #32]
		data = (PAD1_samples[(i)]) / f;
 80014d4:	4a2e      	ldr	r2, [pc, #184]	; (8001590 <DISP_show_data_wire+0x318>)
 80014d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014dc:	461a      	mov	r2, r3
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e4:	647b      	str	r3, [r7, #68]	; 0x44
			if (data > Y_OFFSET_PAD) { data = Y_OFFSET_PAD; }// Limit value, prevent crash
 80014e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d901      	bls.n	80014f2 <DISP_show_data_wire+0x27a>
 80014ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f0:	647b      	str	r3, [r7, #68]	; 0x44
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET_PAD-data_last, 4*i, Y_OFFSET_PAD-data);
 80014f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014f4:	3b01      	subs	r3, #1
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	b298      	uxth	r0, r3
 80014fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fe:	b29a      	uxth	r2, r3
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	b29b      	uxth	r3, r3
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	b299      	uxth	r1, r3
 8001508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150a:	b29b      	uxth	r3, r3
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	b29c      	uxth	r4, r3
 8001510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001512:	b29a      	uxth	r2, r3
 8001514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001516:	b29b      	uxth	r3, r3
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b29b      	uxth	r3, r3
 800151c:	4622      	mov	r2, r4
 800151e:	f002 ff2b 	bl	8004378 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001524:	3301      	adds	r3, #1
 8001526:	643b      	str	r3, [r7, #64]	; 0x40
 8001528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800152a:	2b3b      	cmp	r3, #59	; 0x3b
 800152c:	d9d0      	bls.n	80014d0 <DISP_show_data_wire+0x258>
	}
	/* draw value of pad2 in a graph*/
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800152e:	4811      	ldr	r0, [pc, #68]	; (8001574 <DISP_show_data_wire+0x2fc>)
 8001530:	f002 fd6e 	bl	8004010 <BSP_LCD_SetTextColor>
		data = PAD2_samples[0] / f;
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <DISP_show_data_wire+0x31c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001540:	647b      	str	r3, [r7, #68]	; 0x44
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001542:	2301      	movs	r3, #1
 8001544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001546:	e053      	b.n	80015f0 <DISP_show_data_wire+0x378>
 8001548:	200004d0 	.word	0x200004d0
 800154c:	200004d4 	.word	0x200004d4
 8001550:	200004d8 	.word	0x200004d8
 8001554:	200004dc 	.word	0x200004dc
 8001558:	20000418 	.word	0x20000418
 800155c:	0800a0b8 	.word	0x0800a0b8
 8001560:	20000420 	.word	0x20000420
 8001564:	0800a0c0 	.word	0x0800a0c0
 8001568:	20000428 	.word	0x20000428
 800156c:	0800a0c8 	.word	0x0800a0c8
 8001570:	0800a0d8 	.word	0x0800a0d8
 8001574:	ffff0000 	.word	0xffff0000
 8001578:	0800a0e4 	.word	0x0800a0e4
 800157c:	0800a0f4 	.word	0x0800a0f4
 8001580:	20000430 	.word	0x20000430
 8001584:	0800a104 	.word	0x0800a104
 8001588:	0800a10c 	.word	0x0800a10c
 800158c:	ff0000ff 	.word	0xff0000ff
 8001590:	200008b0 	.word	0x200008b0
 8001594:	200009a0 	.word	0x200009a0
			data_last = data;
 8001598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800159a:	623b      	str	r3, [r7, #32]
			data = (PAD2_samples[i]) / f;
 800159c:	4a55      	ldr	r2, [pc, #340]	; (80016f4 <DISP_show_data_wire+0x47c>)
 800159e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	461a      	mov	r2, r3
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
			if (data > Y_OFFSET_PAD) { data = Y_OFFSET_PAD; }// Limit value, prevent crash
 80015ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d901      	bls.n	80015ba <DISP_show_data_wire+0x342>
 80015b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b8:	647b      	str	r3, [r7, #68]	; 0x44
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET_PAD-data_last, 4*i, Y_OFFSET_PAD-data);
 80015ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015bc:	3b01      	subs	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	b298      	uxth	r0, r3
 80015c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	b299      	uxth	r1, r3
 80015d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	b29c      	uxth	r4, r3
 80015d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015da:	b29a      	uxth	r2, r3
 80015dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015de:	b29b      	uxth	r3, r3
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4622      	mov	r2, r4
 80015e6:	f002 fec7 	bl	8004378 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 80015ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ec:	3301      	adds	r3, #1
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f2:	2b3b      	cmp	r3, #59	; 0x3b
 80015f4:	d9d0      	bls.n	8001598 <DISP_show_data_wire+0x320>
		}

	/* draw the value of coil1 in a graph */
	BSP_LCD_SetTextColor(LCD_COLOR_DARKCYAN);
 80015f6:	4840      	ldr	r0, [pc, #256]	; (80016f8 <DISP_show_data_wire+0x480>)
 80015f8:	f002 fd0a 	bl	8004010 <BSP_LCD_SetTextColor>
	data = COIL1_samples[0] / f;
 80015fc:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <DISP_show_data_wire+0x484>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	fbb2 f3f3 	udiv	r3, r2, r3
 8001608:	647b      	str	r3, [r7, #68]	; 0x44
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 800160a:	2301      	movs	r3, #1
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
 800160e:	e02b      	b.n	8001668 <DISP_show_data_wire+0x3f0>
		data_last = data;
 8001610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001612:	623b      	str	r3, [r7, #32]
		data = (COIL1_samples[i]) / f;
 8001614:	4a39      	ldr	r2, [pc, #228]	; (80016fc <DISP_show_data_wire+0x484>)
 8001616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161c:	461a      	mov	r2, r3
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
		if (data > Y_OFFSET_COIL) { data = Y_OFFSET_COIL; }// Limit value, prevent crash
 8001626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162a:	429a      	cmp	r2, r3
 800162c:	d901      	bls.n	8001632 <DISP_show_data_wire+0x3ba>
 800162e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001630:	647b      	str	r3, [r7, #68]	; 0x44
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET_COIL-data_last, 4*i, Y_OFFSET_COIL-data);
 8001632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001634:	3b01      	subs	r3, #1
 8001636:	b29b      	uxth	r3, r3
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	b298      	uxth	r0, r3
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	b29a      	uxth	r2, r3
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	b29b      	uxth	r3, r3
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	b299      	uxth	r1, r3
 8001648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800164a:	b29b      	uxth	r3, r3
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	b29c      	uxth	r4, r3
 8001650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001652:	b29a      	uxth	r2, r3
 8001654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001656:	b29b      	uxth	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b29b      	uxth	r3, r3
 800165c:	4622      	mov	r2, r4
 800165e:	f002 fe8b 	bl	8004378 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001664:	3301      	adds	r3, #1
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38
 8001668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800166a:	2b3b      	cmp	r3, #59	; 0x3b
 800166c:	d9d0      	bls.n	8001610 <DISP_show_data_wire+0x398>
	}
		/* 	draw the value of coil 2 in a graph */

		BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 800166e:	4824      	ldr	r0, [pc, #144]	; (8001700 <DISP_show_data_wire+0x488>)
 8001670:	f002 fcce 	bl	8004010 <BSP_LCD_SetTextColor>
		data = COIL2_samples[0] / f;
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <DISP_show_data_wire+0x48c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001682:	2301      	movs	r3, #1
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
 8001686:	e02b      	b.n	80016e0 <DISP_show_data_wire+0x468>
			data_last = data;
 8001688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800168a:	623b      	str	r3, [r7, #32]
			data = (COIL2_samples[i]) / f;
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <DISP_show_data_wire+0x48c>)
 800168e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	461a      	mov	r2, r3
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	647b      	str	r3, [r7, #68]	; 0x44
			if (data > Y_OFFSET_COIL) { data = Y_OFFSET_COIL; }// Limit value, prevent crash
 800169e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d901      	bls.n	80016aa <DISP_show_data_wire+0x432>
 80016a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a8:	647b      	str	r3, [r7, #68]	; 0x44
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET_COIL-data_last, 4*i, Y_OFFSET_COIL-data);
 80016aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	b298      	uxth	r0, r3
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	b299      	uxth	r1, r3
 80016c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	b29c      	uxth	r4, r3
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4622      	mov	r2, r4
 80016d6:	f002 fe4f 	bl	8004378 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 80016da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016dc:	3301      	adds	r3, #1
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
 80016e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e2:	2b3b      	cmp	r3, #59	; 0x3b
 80016e4:	d9d0      	bls.n	8001688 <DISP_show_data_wire+0x410>

		}
	}
	MEAS_CLEAR_buffer_flags();
 80016e6:	f000 ff03 	bl	80024f0 <MEAS_CLEAR_buffer_flags>
}
 80016ea:	bf00      	nop
 80016ec:	374c      	adds	r7, #76	; 0x4c
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd90      	pop	{r4, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200009a0 	.word	0x200009a0
 80016f8:	ff008080 	.word	0xff008080
 80016fc:	20000a90 	.word	0x20000a90
 8001700:	ffffa500 	.word	0xffffa500
 8001704:	20000b80 	.word	0x20000b80

08001708 <DISP_show_data_cable>:
 * @note  	This function calls the required functions to display the data for a cable measurement
 * @n		Clears the ADC_samples array after displaying all the data
 *****************************************************************************/

void DISP_show_data_cable(void)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b093      	sub	sp, #76	; 0x4c
 800170c:	af00      	add	r7, sp, #0
	const uint32_t Y_OFFSET_PAD = 220;					//Offset for pad-graph
 800170e:	23dc      	movs	r3, #220	; 0xdc
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t Y_OFFSET_COIL = 280;					//0ffset for coil-graph
 8001712:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint32_t X_SIZE = 240;
 8001718:	23f0      	movs	r3, #240	; 0xf0
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
	const uint32_t f = (6 << ADC_DAC_RES) /	Y_OFFSET_COIL + 1;   	// Scaling factor
 800171c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	3301      	adds	r3, #1
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t data;
	uint32_t data_last;

	current_single = current(1);
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff fd36 	bl	800119c <current>
 8001730:	ee07 0a90 	vmov	s15, r0
 8001734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001738:	4ba7      	ldr	r3, [pc, #668]	; (80019d8 <DISP_show_data_cable+0x2d0>)
 800173a:	edc3 7a00 	vstr	s15, [r3]
	current_accu = current(0);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff fd2c 	bl	800119c <current>
 8001744:	ee07 0a90 	vmov	s15, r0
 8001748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174c:	4ba3      	ldr	r3, [pc, #652]	; (80019dc <DISP_show_data_cable+0x2d4>)
 800174e:	edc3 7a00 	vstr	s15, [r3]

	//Call for calculations
	dist_single = distance_to_cable(1);
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff fc1e 	bl	8000f94 <distance_to_cable>
 8001758:	4603      	mov	r3, r0
 800175a:	4aa1      	ldr	r2, [pc, #644]	; (80019e0 <DISP_show_data_cable+0x2d8>)
 800175c:	6013      	str	r3, [r2, #0]
	dist_accu = distance_to_cable(0);
 800175e:	2000      	movs	r0, #0
 8001760:	f7ff fc18 	bl	8000f94 <distance_to_cable>
 8001764:	4603      	mov	r3, r0
 8001766:	4a9f      	ldr	r2, [pc, #636]	; (80019e4 <DISP_show_data_cable+0x2dc>)
 8001768:	6013      	str	r3, [r2, #0]
	if((dist_accu < 0)||(dist_single < 0)){
 800176a:	4b9e      	ldr	r3, [pc, #632]	; (80019e4 <DISP_show_data_cable+0x2dc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db03      	blt.n	800177a <DISP_show_data_cable+0x72>
 8001772:	4b9b      	ldr	r3, [pc, #620]	; (80019e0 <DISP_show_data_cable+0x2d8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	da61      	bge.n	800183e <DISP_show_data_cable+0x136>
		/* Clear the display */
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800177a:	f04f 30ff 	mov.w	r0, #4294967295
 800177e:	f002 fc47 	bl	8004010 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET_COIL + 1);
 8001782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001784:	b29a      	uxth	r2, r3
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	b29b      	uxth	r3, r3
 800178a:	3301      	adds	r3, #1
 800178c:	b29b      	uxth	r3, r3
 800178e:	2100      	movs	r1, #0
 8001790:	2000      	movs	r0, #0
 8001792:	f002 ffa5 	bl	80046e0 <BSP_LCD_FillRect>
		/* Write single and accurate measurement of wire */
	    BSP_LCD_SetFont(&Font24);
 8001796:	4894      	ldr	r0, [pc, #592]	; (80019e8 <DISP_show_data_cable+0x2e0>)
 8001798:	f002 fc6c 	bl	8004074 <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f002 fc4e 	bl	8004040 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80017a4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80017a8:	f002 fc32 	bl	8004010 <BSP_LCD_SetTextColor>
		char text[16];
		BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Cable", LEFT_MODE);
 80017ac:	2303      	movs	r3, #3
 80017ae:	4a8f      	ldr	r2, [pc, #572]	; (80019ec <DISP_show_data_cable+0x2e4>)
 80017b0:	210a      	movs	r1, #10
 80017b2:	2005      	movs	r0, #5
 80017b4:	f002 fce4 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font20);
 80017b8:	488d      	ldr	r0, [pc, #564]	; (80019f0 <DISP_show_data_cable+0x2e8>)
 80017ba:	f002 fc5b 	bl	8004074 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(5,50, (uint8_t *)"Single", LEFT_MODE);
 80017be:	2303      	movs	r3, #3
 80017c0:	4a8c      	ldr	r2, [pc, #560]	; (80019f4 <DISP_show_data_cable+0x2ec>)
 80017c2:	2132      	movs	r1, #50	; 0x32
 80017c4:	2005      	movs	r0, #5
 80017c6:	f002 fcdb 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 80017ca:	488b      	ldr	r0, [pc, #556]	; (80019f8 <DISP_show_data_cable+0x2f0>)
 80017cc:	f002 fc52 	bl	8004074 <BSP_LCD_SetFont>
		snprintf(text, 15, "Distance: %4d", (int)(dist_single));
 80017d0:	4b83      	ldr	r3, [pc, #524]	; (80019e0 <DISP_show_data_cable+0x2d8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f107 0010 	add.w	r0, r7, #16
 80017d8:	4a88      	ldr	r2, [pc, #544]	; (80019fc <DISP_show_data_cable+0x2f4>)
 80017da:	210f      	movs	r1, #15
 80017dc:	f007 feec 	bl	80095b8 <sniprintf>
		BSP_LCD_DisplayStringAt(5, 70, (uint8_t *)text, LEFT_MODE);
 80017e0:	f107 0210 	add.w	r2, r7, #16
 80017e4:	2303      	movs	r3, #3
 80017e6:	2146      	movs	r1, #70	; 0x46
 80017e8:	2005      	movs	r0, #5
 80017ea:	f002 fcc9 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font20);
 80017ee:	4880      	ldr	r0, [pc, #512]	; (80019f0 <DISP_show_data_cable+0x2e8>)
 80017f0:	f002 fc40 	bl	8004074 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(5,110, (uint8_t *)"Accurate", LEFT_MODE);
 80017f4:	2303      	movs	r3, #3
 80017f6:	4a82      	ldr	r2, [pc, #520]	; (8001a00 <DISP_show_data_cable+0x2f8>)
 80017f8:	216e      	movs	r1, #110	; 0x6e
 80017fa:	2005      	movs	r0, #5
 80017fc:	f002 fcc0 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font16);
 8001800:	487d      	ldr	r0, [pc, #500]	; (80019f8 <DISP_show_data_cable+0x2f0>)
 8001802:	f002 fc37 	bl	8004074 <BSP_LCD_SetFont>
		snprintf(text, 15, "Distance: %4d", (int)(dist_accu));
 8001806:	4b77      	ldr	r3, [pc, #476]	; (80019e4 <DISP_show_data_cable+0x2dc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f107 0010 	add.w	r0, r7, #16
 800180e:	4a7b      	ldr	r2, [pc, #492]	; (80019fc <DISP_show_data_cable+0x2f4>)
 8001810:	210f      	movs	r1, #15
 8001812:	f007 fed1 	bl	80095b8 <sniprintf>
		BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)text, LEFT_MODE);
 8001816:	f107 0210 	add.w	r2, r7, #16
 800181a:	2303      	movs	r3, #3
 800181c:	2182      	movs	r1, #130	; 0x82
 800181e:	2005      	movs	r0, #5
 8001820:	f002 fcae 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetFont(&Font24);
 8001824:	4870      	ldr	r0, [pc, #448]	; (80019e8 <DISP_show_data_cable+0x2e0>)
 8001826:	f002 fc25 	bl	8004074 <BSP_LCD_SetFont>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800182a:	4876      	ldr	r0, [pc, #472]	; (8001a04 <DISP_show_data_cable+0x2fc>)
 800182c:	f002 fbf0 	bl	8004010 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(5,180, (uint8_t *)"OUT OF RANGE", CENTER_MODE);
 8001830:	2301      	movs	r3, #1
 8001832:	4a75      	ldr	r2, [pc, #468]	; (8001a08 <DISP_show_data_cable+0x300>)
 8001834:	21b4      	movs	r1, #180	; 0xb4
 8001836:	2005      	movs	r0, #5
 8001838:	f002 fca2 	bl	8004180 <BSP_LCD_DisplayStringAt>
	if((dist_accu < 0)||(dist_single < 0)){
 800183c:	e19b      	b.n	8001b76 <DISP_show_data_cable+0x46e>

	}
	else{

	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800183e:	f04f 30ff 	mov.w	r0, #4294967295
 8001842:	f002 fbe5 	bl	8004010 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET_COIL + 1);
 8001846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001848:	b29a      	uxth	r2, r3
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	2100      	movs	r1, #0
 8001854:	2000      	movs	r0, #0
 8001856:	f002 ff43 	bl	80046e0 <BSP_LCD_FillRect>
	/* Write single and accurate measurement of wire */
    BSP_LCD_SetFont(&Font24);
 800185a:	4863      	ldr	r0, [pc, #396]	; (80019e8 <DISP_show_data_cable+0x2e0>)
 800185c:	f002 fc0a 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f002 fbec 	bl	8004040 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001868:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800186c:	f002 fbd0 	bl	8004010 <BSP_LCD_SetTextColor>
	char text[16];
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Cable", LEFT_MODE);
 8001870:	2303      	movs	r3, #3
 8001872:	4a5e      	ldr	r2, [pc, #376]	; (80019ec <DISP_show_data_cable+0x2e4>)
 8001874:	210a      	movs	r1, #10
 8001876:	2005      	movs	r0, #5
 8001878:	f002 fc82 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font20);
 800187c:	485c      	ldr	r0, [pc, #368]	; (80019f0 <DISP_show_data_cable+0x2e8>)
 800187e:	f002 fbf9 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,50, (uint8_t *)"Single", LEFT_MODE);
 8001882:	2303      	movs	r3, #3
 8001884:	4a5b      	ldr	r2, [pc, #364]	; (80019f4 <DISP_show_data_cable+0x2ec>)
 8001886:	2132      	movs	r1, #50	; 0x32
 8001888:	2005      	movs	r0, #5
 800188a:	f002 fc79 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 800188e:	485a      	ldr	r0, [pc, #360]	; (80019f8 <DISP_show_data_cable+0x2f0>)
 8001890:	f002 fbf0 	bl	8004074 <BSP_LCD_SetFont>
	snprintf(text, 15, "Distance: %4d", (int)(dist_single));
 8001894:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <DISP_show_data_cable+0x2d8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4638      	mov	r0, r7
 800189a:	4a58      	ldr	r2, [pc, #352]	; (80019fc <DISP_show_data_cable+0x2f4>)
 800189c:	210f      	movs	r1, #15
 800189e:	f007 fe8b 	bl	80095b8 <sniprintf>
	BSP_LCD_DisplayStringAt(5, 70, (uint8_t *)text, LEFT_MODE);
 80018a2:	463a      	mov	r2, r7
 80018a4:	2303      	movs	r3, #3
 80018a6:	2146      	movs	r1, #70	; 0x46
 80018a8:	2005      	movs	r0, #5
 80018aa:	f002 fc69 	bl	8004180 <BSP_LCD_DisplayStringAt>
	snprintf(text, 15, "Current:  %4d", (int)(current_single));
 80018ae:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <DISP_show_data_cable+0x2d0>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b8:	4638      	mov	r0, r7
 80018ba:	ee17 3a90 	vmov	r3, s15
 80018be:	4a53      	ldr	r2, [pc, #332]	; (8001a0c <DISP_show_data_cable+0x304>)
 80018c0:	210f      	movs	r1, #15
 80018c2:	f007 fe79 	bl	80095b8 <sniprintf>
	BSP_LCD_DisplayStringAt(5, 85, (uint8_t *)text, LEFT_MODE);
 80018c6:	463a      	mov	r2, r7
 80018c8:	2303      	movs	r3, #3
 80018ca:	2155      	movs	r1, #85	; 0x55
 80018cc:	2005      	movs	r0, #5
 80018ce:	f002 fc57 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font20);
 80018d2:	4847      	ldr	r0, [pc, #284]	; (80019f0 <DISP_show_data_cable+0x2e8>)
 80018d4:	f002 fbce 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,110, (uint8_t *)"Accurate", LEFT_MODE);
 80018d8:	2303      	movs	r3, #3
 80018da:	4a49      	ldr	r2, [pc, #292]	; (8001a00 <DISP_show_data_cable+0x2f8>)
 80018dc:	216e      	movs	r1, #110	; 0x6e
 80018de:	2005      	movs	r0, #5
 80018e0:	f002 fc4e 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 80018e4:	4844      	ldr	r0, [pc, #272]	; (80019f8 <DISP_show_data_cable+0x2f0>)
 80018e6:	f002 fbc5 	bl	8004074 <BSP_LCD_SetFont>
	snprintf(text, 15, "Distance: %4d", (int)(dist_accu));
 80018ea:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <DISP_show_data_cable+0x2dc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4638      	mov	r0, r7
 80018f0:	4a42      	ldr	r2, [pc, #264]	; (80019fc <DISP_show_data_cable+0x2f4>)
 80018f2:	210f      	movs	r1, #15
 80018f4:	f007 fe60 	bl	80095b8 <sniprintf>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)text, LEFT_MODE);
 80018f8:	463a      	mov	r2, r7
 80018fa:	2303      	movs	r3, #3
 80018fc:	2182      	movs	r1, #130	; 0x82
 80018fe:	2005      	movs	r0, #5
 8001900:	f002 fc3e 	bl	8004180 <BSP_LCD_DisplayStringAt>
	snprintf(text, 15, "Current:  %4d", (int)(current_accu));
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <DISP_show_data_cable+0x2d4>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190e:	4638      	mov	r0, r7
 8001910:	ee17 3a90 	vmov	r3, s15
 8001914:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <DISP_show_data_cable+0x304>)
 8001916:	210f      	movs	r1, #15
 8001918:	f007 fe4e 	bl	80095b8 <sniprintf>
	BSP_LCD_DisplayStringAt(5, 145, (uint8_t *)text, LEFT_MODE);
 800191c:	463a      	mov	r2, r7
 800191e:	2303      	movs	r3, #3
 8001920:	2191      	movs	r1, #145	; 0x91
 8001922:	2005      	movs	r0, #5
 8001924:	f002 fc2c 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 8001928:	4839      	ldr	r0, [pc, #228]	; (8001a10 <DISP_show_data_cable+0x308>)
 800192a:	f002 fba3 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,165, (uint8_t *)"Pad:", LEFT_MODE);
 800192e:	2303      	movs	r3, #3
 8001930:	4a38      	ldr	r2, [pc, #224]	; (8001a14 <DISP_show_data_cable+0x30c>)
 8001932:	21a5      	movs	r1, #165	; 0xa5
 8001934:	2005      	movs	r0, #5
 8001936:	f002 fc23 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5,225, (uint8_t *)"Coil:", LEFT_MODE);
 800193a:	2303      	movs	r3, #3
 800193c:	4a36      	ldr	r2, [pc, #216]	; (8001a18 <DISP_show_data_cable+0x310>)
 800193e:	21e1      	movs	r1, #225	; 0xe1
 8001940:	2005      	movs	r0, #5
 8001942:	f002 fc1d 	bl	8004180 <BSP_LCD_DisplayStringAt>

	/* draw value of pad1 in a graph */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001946:	4835      	ldr	r0, [pc, #212]	; (8001a1c <DISP_show_data_cable+0x314>)
 8001948:	f002 fb62 	bl	8004010 <BSP_LCD_SetTextColor>
	data = PAD1_samples[0] / f;
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <DISP_show_data_cable+0x318>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	647b      	str	r3, [r7, #68]	; 0x44
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 800195a:	2301      	movs	r3, #1
 800195c:	643b      	str	r3, [r7, #64]	; 0x40
 800195e:	e02b      	b.n	80019b8 <DISP_show_data_cable+0x2b0>
		data_last = data;
 8001960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001962:	623b      	str	r3, [r7, #32]
		data = (PAD1_samples[(i)]) / f;
 8001964:	4a2e      	ldr	r2, [pc, #184]	; (8001a20 <DISP_show_data_cable+0x318>)
 8001966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	461a      	mov	r2, r3
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	fbb2 f3f3 	udiv	r3, r2, r3
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
			if (data > Y_OFFSET_PAD) { data = Y_OFFSET_PAD; }// Limit value, prevent crash
 8001976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197a:	429a      	cmp	r2, r3
 800197c:	d901      	bls.n	8001982 <DISP_show_data_cable+0x27a>
 800197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET_PAD-data_last, 4*i, Y_OFFSET_PAD-data);
 8001982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001984:	3b01      	subs	r3, #1
 8001986:	b29b      	uxth	r3, r3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	b298      	uxth	r0, r3
 800198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198e:	b29a      	uxth	r2, r3
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	b29b      	uxth	r3, r3
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	b299      	uxth	r1, r3
 8001998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199a:	b29b      	uxth	r3, r3
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	b29c      	uxth	r4, r3
 80019a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4622      	mov	r2, r4
 80019ae:	f002 fce3 	bl	8004378 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 80019b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b4:	3301      	adds	r3, #1
 80019b6:	643b      	str	r3, [r7, #64]	; 0x40
 80019b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ba:	2b3b      	cmp	r3, #59	; 0x3b
 80019bc:	d9d0      	bls.n	8001960 <DISP_show_data_cable+0x258>
	}
	/* draw value of pad2 in a graph*/
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80019be:	4811      	ldr	r0, [pc, #68]	; (8001a04 <DISP_show_data_cable+0x2fc>)
 80019c0:	f002 fb26 	bl	8004010 <BSP_LCD_SetTextColor>
		data = PAD2_samples[0] / f;
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <DISP_show_data_cable+0x31c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	647b      	str	r3, [r7, #68]	; 0x44
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 80019d2:	2301      	movs	r3, #1
 80019d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d6:	e053      	b.n	8001a80 <DISP_show_data_cable+0x378>
 80019d8:	200004d8 	.word	0x200004d8
 80019dc:	200004dc 	.word	0x200004dc
 80019e0:	200004d0 	.word	0x200004d0
 80019e4:	200004d4 	.word	0x200004d4
 80019e8:	20000418 	.word	0x20000418
 80019ec:	0800a114 	.word	0x0800a114
 80019f0:	20000420 	.word	0x20000420
 80019f4:	0800a0c0 	.word	0x0800a0c0
 80019f8:	20000428 	.word	0x20000428
 80019fc:	0800a0c8 	.word	0x0800a0c8
 8001a00:	0800a0d8 	.word	0x0800a0d8
 8001a04:	ffff0000 	.word	0xffff0000
 8001a08:	0800a0e4 	.word	0x0800a0e4
 8001a0c:	0800a0f4 	.word	0x0800a0f4
 8001a10:	20000430 	.word	0x20000430
 8001a14:	0800a104 	.word	0x0800a104
 8001a18:	0800a10c 	.word	0x0800a10c
 8001a1c:	ff0000ff 	.word	0xff0000ff
 8001a20:	200008b0 	.word	0x200008b0
 8001a24:	200009a0 	.word	0x200009a0
			data_last = data;
 8001a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2a:	623b      	str	r3, [r7, #32]
			data = (PAD2_samples[i]) / f;
 8001a2c:	4a55      	ldr	r2, [pc, #340]	; (8001b84 <DISP_show_data_cable+0x47c>)
 8001a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a34:	461a      	mov	r2, r3
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	647b      	str	r3, [r7, #68]	; 0x44
			if (data > Y_OFFSET_PAD) { data = Y_OFFSET_PAD; }// Limit value, prevent crash
 8001a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d901      	bls.n	8001a4a <DISP_show_data_cable+0x342>
 8001a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET_PAD-data_last, 4*i, Y_OFFSET_PAD-data);
 8001a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	b298      	uxth	r0, r3
 8001a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	b299      	uxth	r1, r3
 8001a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	b29c      	uxth	r4, r3
 8001a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4622      	mov	r2, r4
 8001a76:	f002 fc7f 	bl	8004378 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a82:	2b3b      	cmp	r3, #59	; 0x3b
 8001a84:	d9d0      	bls.n	8001a28 <DISP_show_data_cable+0x320>
		}

	/* draw the value of coil1 in a graph */
	BSP_LCD_SetTextColor(LCD_COLOR_DARKCYAN);
 8001a86:	4840      	ldr	r0, [pc, #256]	; (8001b88 <DISP_show_data_cable+0x480>)
 8001a88:	f002 fac2 	bl	8004010 <BSP_LCD_SetTextColor>
	data = COIL1_samples[0] / f;
 8001a8c:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <DISP_show_data_cable+0x484>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a98:	647b      	str	r3, [r7, #68]	; 0x44
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a9e:	e02b      	b.n	8001af8 <DISP_show_data_cable+0x3f0>
		data_last = data;
 8001aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa2:	623b      	str	r3, [r7, #32]
		data = (COIL1_samples[i]) / f;
 8001aa4:	4a39      	ldr	r2, [pc, #228]	; (8001b8c <DISP_show_data_cable+0x484>)
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	461a      	mov	r2, r3
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
		if (data > Y_OFFSET_COIL) { data = Y_OFFSET_COIL; }// Limit value, prevent crash
 8001ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d901      	bls.n	8001ac2 <DISP_show_data_cable+0x3ba>
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	647b      	str	r3, [r7, #68]	; 0x44
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET_COIL-data_last, 4*i, Y_OFFSET_COIL-data);
 8001ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	b298      	uxth	r0, r3
 8001acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	b299      	uxth	r1, r3
 8001ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	b29c      	uxth	r4, r3
 8001ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4622      	mov	r2, r4
 8001aee:	f002 fc43 	bl	8004378 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af4:	3301      	adds	r3, #1
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001afa:	2b3b      	cmp	r3, #59	; 0x3b
 8001afc:	d9d0      	bls.n	8001aa0 <DISP_show_data_cable+0x398>
	}
		/* 	draw the value of coil 2 in a graph */

		BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001afe:	4824      	ldr	r0, [pc, #144]	; (8001b90 <DISP_show_data_cable+0x488>)
 8001b00:	f002 fa86 	bl	8004010 <BSP_LCD_SetTextColor>
		data = COIL2_samples[0] / f;
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <DISP_show_data_cable+0x48c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	647b      	str	r3, [r7, #68]	; 0x44
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001b12:	2301      	movs	r3, #1
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
 8001b16:	e02b      	b.n	8001b70 <DISP_show_data_cable+0x468>
			data_last = data;
 8001b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1a:	623b      	str	r3, [r7, #32]
			data = (COIL2_samples[i]) / f;
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <DISP_show_data_cable+0x48c>)
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	461a      	mov	r2, r3
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	647b      	str	r3, [r7, #68]	; 0x44
			if (data > Y_OFFSET_COIL) { data = Y_OFFSET_COIL; }// Limit value, prevent crash
 8001b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d901      	bls.n	8001b3a <DISP_show_data_cable+0x432>
 8001b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET_COIL-data_last, 4*i, Y_OFFSET_COIL-data);
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	b298      	uxth	r0, r3
 8001b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	b299      	uxth	r1, r3
 8001b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	b29c      	uxth	r4, r3
 8001b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4622      	mov	r2, r4
 8001b66:	f002 fc07 	bl	8004378 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b72:	2b3b      	cmp	r3, #59	; 0x3b
 8001b74:	d9d0      	bls.n	8001b18 <DISP_show_data_cable+0x410>

		}
	}
	MEAS_CLEAR_buffer_flags();
 8001b76:	f000 fcbb 	bl	80024f0 <MEAS_CLEAR_buffer_flags>
}
 8001b7a:	bf00      	nop
 8001b7c:	374c      	adds	r7, #76	; 0x4c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200009a0 	.word	0x200009a0
 8001b88:	ff008080 	.word	0xff008080
 8001b8c:	20000a90 	.word	0x20000a90
 8001b90:	ffffa500 	.word	0xffffa500
 8001b94:	20000b80 	.word	0x20000b80

08001b98 <DISP_show_data_angle>:
 * @n		Shows an error on display if the data is unclear
 * @n		Clears the ADC_samples array after displaying all the data
 *****************************************************************************/

void DISP_show_data_angle(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
	const uint32_t X_SIZE = 240;
 8001b9e:	23f0      	movs	r3, #240	; 0xf0
 8001ba0:	61fb      	str	r3, [r7, #28]
	const uint32_t Y_OFFSET_PAD = 280;
 8001ba2:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001ba6:	61bb      	str	r3, [r7, #24]
	char text[16];

	int32_t angle = 666;
 8001ba8:	f240 239a 	movw	r3, #666	; 0x29a
 8001bac:	617b      	str	r3, [r7, #20]
	angle = angle_to_cable();
 8001bae:	f7ff fa77 	bl	80010a0 <angle_to_cable>
 8001bb2:	6178      	str	r0, [r7, #20]

	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f002 fa2a 	bl	8004010 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET_PAD + 1);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f002 fd88 	bl	80046e0 <BSP_LCD_FillRect>
	/* Write the measurement of the angle */
	BSP_LCD_SetFont(&Font24);
 8001bd0:	483d      	ldr	r0, [pc, #244]	; (8001cc8 <DISP_show_data_angle+0x130>)
 8001bd2:	f002 fa4f 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bda:	f002 fa31 	bl	8004040 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001bde:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001be2:	f002 fa15 	bl	8004010 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Angle", LEFT_MODE);
 8001be6:	2303      	movs	r3, #3
 8001be8:	4a38      	ldr	r2, [pc, #224]	; (8001ccc <DISP_show_data_angle+0x134>)
 8001bea:	210a      	movs	r1, #10
 8001bec:	2005      	movs	r0, #5
 8001bee:	f002 fac7 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font20);
 8001bf2:	4837      	ldr	r0, [pc, #220]	; (8001cd0 <DISP_show_data_angle+0x138>)
 8001bf4:	f002 fa3e 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,50, (uint8_t *)"Value in Degree", LEFT_MODE);
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	4a36      	ldr	r2, [pc, #216]	; (8001cd4 <DISP_show_data_angle+0x13c>)
 8001bfc:	2132      	movs	r1, #50	; 0x32
 8001bfe:	2005      	movs	r0, #5
 8001c00:	f002 fabe 	bl	8004180 <BSP_LCD_DisplayStringAt>

	//Two points for a rough indication of direction
	BSP_LCD_DrawCircle(45,220,20);
 8001c04:	2214      	movs	r2, #20
 8001c06:	21dc      	movs	r1, #220	; 0xdc
 8001c08:	202d      	movs	r0, #45	; 0x2d
 8001c0a:	f002 fc7f 	bl	800450c <BSP_LCD_DrawCircle>
	BSP_LCD_DrawCircle(195,220,20);
 8001c0e:	2214      	movs	r2, #20
 8001c10:	21dc      	movs	r1, #220	; 0xdc
 8001c12:	20c3      	movs	r0, #195	; 0xc3
 8001c14:	f002 fc7a 	bl	800450c <BSP_LCD_DrawCircle>

	//Color middle part for direction / error
	if(CALC_degree_left){
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <DISP_show_data_angle+0x140>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d018      	beq.n	8001c52 <DISP_show_data_angle+0xba>
		CALC_degree_left = false;
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <DISP_show_data_angle+0x140>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
		snprintf(text, 15, "Angle:  %4d", (int)(angle));
 8001c26:	1d38      	adds	r0, r7, #4
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <DISP_show_data_angle+0x144>)
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	f007 fcc3 	bl	80095b8 <sniprintf>
		BSP_LCD_DisplayStringAt(5, 90, (uint8_t *)text, LEFT_MODE);
 8001c32:	1d3a      	adds	r2, r7, #4
 8001c34:	2303      	movs	r3, #3
 8001c36:	215a      	movs	r1, #90	; 0x5a
 8001c38:	2005      	movs	r0, #5
 8001c3a:	f002 faa1 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001c3e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001c42:	f002 f9e5 	bl	8004010 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(45,220,10);
 8001c46:	220a      	movs	r2, #10
 8001c48:	21dc      	movs	r1, #220	; 0xdc
 8001c4a:	202d      	movs	r0, #45	; 0x2d
 8001c4c:	f002 fda2 	bl	8004794 <BSP_LCD_FillCircle>
 8001c50:	e034      	b.n	8001cbc <DISP_show_data_angle+0x124>
	}
	else if(CALC_degree_right){
 8001c52:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <DISP_show_data_angle+0x148>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d018      	beq.n	8001c8c <DISP_show_data_angle+0xf4>
		CALC_degree_right = false;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <DISP_show_data_angle+0x148>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
		snprintf(text, 15, "Angle: %4d", (int)(angle));
 8001c60:	1d38      	adds	r0, r7, #4
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <DISP_show_data_angle+0x14c>)
 8001c66:	210f      	movs	r1, #15
 8001c68:	f007 fca6 	bl	80095b8 <sniprintf>
		BSP_LCD_DisplayStringAt(5, 90, (uint8_t *)text, LEFT_MODE);
 8001c6c:	1d3a      	adds	r2, r7, #4
 8001c6e:	2303      	movs	r3, #3
 8001c70:	215a      	movs	r1, #90	; 0x5a
 8001c72:	2005      	movs	r0, #5
 8001c74:	f002 fa84 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001c78:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001c7c:	f002 f9c8 	bl	8004010 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(195,220,10);
 8001c80:	220a      	movs	r2, #10
 8001c82:	21dc      	movs	r1, #220	; 0xdc
 8001c84:	20c3      	movs	r0, #195	; 0xc3
 8001c86:	f002 fd85 	bl	8004794 <BSP_LCD_FillCircle>
 8001c8a:	e017      	b.n	8001cbc <DISP_show_data_angle+0x124>
	}
	else{
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001c8c:	4816      	ldr	r0, [pc, #88]	; (8001ce8 <DISP_show_data_angle+0x150>)
 8001c8e:	f002 f9bf 	bl	8004010 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(5,90, (uint8_t *)"NO VALUE", CENTER_MODE);
 8001c92:	2301      	movs	r3, #1
 8001c94:	4a15      	ldr	r2, [pc, #84]	; (8001cec <DISP_show_data_angle+0x154>)
 8001c96:	215a      	movs	r1, #90	; 0x5a
 8001c98:	2005      	movs	r0, #5
 8001c9a:	f002 fa71 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_FillCircle(120,150,10);
 8001c9e:	220a      	movs	r2, #10
 8001ca0:	2196      	movs	r1, #150	; 0x96
 8001ca2:	2078      	movs	r0, #120	; 0x78
 8001ca4:	f002 fd76 	bl	8004794 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(45,220,10);
 8001ca8:	220a      	movs	r2, #10
 8001caa:	21dc      	movs	r1, #220	; 0xdc
 8001cac:	202d      	movs	r0, #45	; 0x2d
 8001cae:	f002 fd71 	bl	8004794 <BSP_LCD_FillCircle>
		BSP_LCD_FillCircle(195,220,10);
 8001cb2:	220a      	movs	r2, #10
 8001cb4:	21dc      	movs	r1, #220	; 0xdc
 8001cb6:	20c3      	movs	r0, #195	; 0xc3
 8001cb8:	f002 fd6c 	bl	8004794 <BSP_LCD_FillCircle>
	}

	MEAS_CLEAR_buffer_flags();
 8001cbc:	f000 fc18 	bl	80024f0 <MEAS_CLEAR_buffer_flags>
}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000418 	.word	0x20000418
 8001ccc:	0800a11c 	.word	0x0800a11c
 8001cd0:	20000420 	.word	0x20000420
 8001cd4:	0800a124 	.word	0x0800a124
 8001cd8:	200004cc 	.word	0x200004cc
 8001cdc:	0800a134 	.word	0x0800a134
 8001ce0:	200004cd 	.word	0x200004cd
 8001ce4:	0800a140 	.word	0x0800a140
 8001ce8:	ffff0000 	.word	0xffff0000
 8001cec:	0800a14c 	.word	0x0800a14c

08001cf0 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8001cf0:	b598      	push	{r3, r4, r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8001cf4:	f003 faba 	bl	800526c <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 8001cf8:	f000 f8b0 	bl	8001e5c <SystemClock_Config>

	BSP_LCD_Init();						// Initialize the LCD display
 8001cfc:	f002 f892 	bl	8003e24 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8001d00:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001d04:	2001      	movs	r0, #1
 8001d06:	f002 f90f 	bl	8003f28 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f002 f970 	bl	8003ff0 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8001d10:	f002 fde0 	bl	80048d4 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f002 f9c6 	bl	80040a8 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 8001d1c:	f002 f8ec 	bl	8003ef8 <BSP_LCD_GetXSize>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b29c      	uxth	r4, r3
 8001d24:	f002 f8f4 	bl	8003f10 <BSP_LCD_GetYSize>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f003 f998 	bl	8005064 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	 //BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 8001d34:	f000 ff46 	bl	8002bc4 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 8001d38:	f000 ff64 	bl	8002c04 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f001 fc73 	bl	8003628 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 8001d42:	2001      	movs	r0, #1
 8001d44:	f001 fc70 	bl	8003628 <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 8001d48:	f000 fd12 	bl	8002770 <MENU_draw>
	MENU_hint();						// Show hint at startup
 8001d4c:	f000 fdbe 	bl	80028cc <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 8001d50:	f000 f902 	bl	8001f58 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 8001d54:	f000 f9c0 	bl	80020d8 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 8001d58:	f000 fa52 	bl	8002200 <MEAS_timer_init>


	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f001 fcd1 	bl	8003704 <BSP_LED_Toggle>
		BSP_LED_Toggle(LED4);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f001 fcce 	bl	8003704 <BSP_LED_Toggle>



		// Show data for wire
		if ((MEAS_data_ready)&&(MEAS_data_wire)) {
 8001d68:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <main+0x15c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <main+0x9c>
 8001d70:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <main+0x160>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d009      	beq.n	8001d8c <main+0x9c>
			MEAS_data_ready = false;
 8001d78:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <main+0x15c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
			MEAS_sort_data();
 8001d7e:	f000 fcaf 	bl	80026e0 <MEAS_sort_data>
			DISP_show_data_wire();
 8001d82:	f7ff fa79 	bl	8001278 <DISP_show_data_wire>
			MEAS_data_wire = false;
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <main+0x160>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
		}
		// Show data for cable
		if ((MEAS_data_ready)&&(MEAS_data_cable)) {
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <main+0x15c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00d      	beq.n	8001db0 <main+0xc0>
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <main+0x164>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <main+0xc0>
			MEAS_data_ready = false;
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <main+0x15c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
			MEAS_sort_data();
 8001da2:	f000 fc9d 	bl	80026e0 <MEAS_sort_data>
			DISP_show_data_cable();
 8001da6:	f7ff fcaf 	bl	8001708 <DISP_show_data_cable>
			MEAS_data_cable = false;
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <main+0x164>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
		}
		// Show data for angle
		if ((MEAS_data_ready)&&(MEAS_data_angle)) {
 8001db0:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <main+0x15c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00d      	beq.n	8001dd4 <main+0xe4>
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <main+0x168>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d009      	beq.n	8001dd4 <main+0xe4>
			MEAS_data_ready = false;
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <main+0x15c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
			MEAS_sort_data();
 8001dc6:	f000 fc8b 	bl	80026e0 <MEAS_sort_data>
			DISP_show_data_angle();
 8001dca:	f7ff fee5 	bl	8001b98 <DISP_show_data_angle>
			MEAS_data_angle = false;
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <main+0x168>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
		}


		/* Pressing the blue pushbutton will turn off the device */
		if (PB_pressed()) {				// Check if user pushbutton was pressed
 8001dd4:	f000 ff48 	bl	8002c68 <PB_pressed>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <main+0xf2>
				MANUAL_shut_off();
 8001dde:	f000 fe69 	bl	8002ab4 <MANUAL_shut_off>




		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 8001de2:	f000 fdeb 	bl	80029bc <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 8001de6:	f000 fdd7 	bl	8002998 <MENU_get_transition>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d828      	bhi.n	8001e42 <main+0x152>
 8001df0:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <main+0x108>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e0d 	.word	0x08001e0d
 8001dfc:	08001e1d 	.word	0x08001e1d
 8001e00:	08001e2d 	.word	0x08001e2d
 8001e04:	08001e3d 	.word	0x08001e3d
 8001e08:	08001e43 	.word	0x08001e43
		case MENU_NONE:					// No transition => do nothing
			break;
		case MENU_ZERO:

			// MEASUREMENT WIRE
			ADC3_scan_init();
 8001e0c:	f000 fb8e 	bl	800252c <ADC3_scan_init>
			ADC3_scan_start();
 8001e10:	f000 fc44 	bl	800269c <ADC3_scan_start>
			MEAS_data_wire = true;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <main+0x160>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
			break;
 8001e1a:	e013      	b.n	8001e44 <main+0x154>

		case MENU_ONE:

			// MEASUREMENT CABLE
			ADC3_scan_init();
 8001e1c:	f000 fb86 	bl	800252c <ADC3_scan_init>
			ADC3_scan_start();
 8001e20:	f000 fc3c 	bl	800269c <ADC3_scan_start>
			MEAS_data_cable = true;
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <main+0x164>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
			break;
 8001e2a:	e00b      	b.n	8001e44 <main+0x154>

		case MENU_TWO:

			// MEASUREMENT ANGLE
			ADC3_scan_init();
 8001e2c:	f000 fb7e 	bl	800252c <ADC3_scan_init>
			ADC3_scan_start();
 8001e30:	f000 fc34 	bl	800269c <ADC3_scan_start>
			MEAS_data_angle = true;
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <main+0x168>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
			break;
 8001e3a:	e003      	b.n	8001e44 <main+0x154>

		case MENU_THREE:
			MANUAL_shut_off();
 8001e3c:	f000 fe3a 	bl	8002ab4 <MANUAL_shut_off>
			break;
 8001e40:	e000      	b.n	8001e44 <main+0x154>
		default:						// Should never occur
			break;
 8001e42:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 8001e44:	20c8      	movs	r0, #200	; 0xc8
 8001e46:	f003 fa8b 	bl	8005360 <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8001e4a:	e787      	b.n	8001d5c <main+0x6c>
 8001e4c:	200004e3 	.word	0x200004e3
 8001e50:	200004e0 	.word	0x200004e0
 8001e54:	200004e1 	.word	0x200004e1
 8001e58:	200004e2 	.word	0x200004e2

08001e5c <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b0a0      	sub	sp, #128	; 0x80
 8001e60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e66:	2230      	movs	r2, #48	; 0x30
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f007 fb9c 	bl	80095a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2230      	movs	r2, #48	; 0x30
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f007 fb8d 	bl	80095a8 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <SystemClock_Config+0xf0>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a2d      	ldr	r2, [pc, #180]	; (8001f4c <SystemClock_Config+0xf0>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <SystemClock_Config+0xf0>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <SystemClock_Config+0xf4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <SystemClock_Config+0xf4>)
 8001eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <SystemClock_Config+0xf4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ece:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ed4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001eda:	2308      	movs	r3, #8
 8001edc:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001ede:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ee2:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ee8:	2307      	movs	r3, #7
 8001eea:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001eec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f005 fc87 	bl	8007804 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ef6:	230f      	movs	r3, #15
 8001ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001efa:	2302      	movs	r3, #2
 8001efc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001efe:	2300      	movs	r3, #0
 8001f00:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f06:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001f0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f12:	2105      	movs	r1, #5
 8001f14:	4618      	mov	r0, r3
 8001f16:	f005 fee3 	bl	8007ce0 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001f1e:	23c0      	movs	r3, #192	; 0xc0
 8001f20:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001f22:	2304      	movs	r3, #4
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	4618      	mov	r0, r3
 8001f32:	f006 f8e1 	bl	80080f8 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <SystemClock_Config+0xf8>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <SystemClock_Config+0xf8>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6053      	str	r3, [r2, #4]
}
 8001f42:	bf00      	nop
 8001f44:	3780      	adds	r7, #128	; 0x80
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000
 8001f54:	40012300 	.word	0x40012300

08001f58 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <gyro_disable+0xb4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a29      	ldr	r2, [pc, #164]	; (800200c <gyro_disable+0xb4>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <gyro_disable+0xb4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1; // Reset mode for PC1
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <gyro_disable+0xb8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a24      	ldr	r2, [pc, #144]	; (8002010 <gyro_disable+0xb8>)
 8001f80:	f023 030c 	bic.w	r3, r3, #12
 8001f84:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER1_0;	// Set PC1 as output
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <gyro_disable+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a21      	ldr	r2, [pc, #132]	; (8002010 <gyro_disable+0xb8>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 8001f92:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <gyro_disable+0xb8>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <gyro_disable+0xb8>)
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 8001f9e:	200a      	movs	r0, #10
 8001fa0:	f003 f9de 	bl	8005360 <HAL_Delay>
	GPIOC->MODER |= GPIO_MODER_MODER1_Msk; // Analog mode PC1 = ADC123_IN11
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <gyro_disable+0xb8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	; (8002010 <gyro_disable+0xb8>)
 8001faa:	f043 030c 	orr.w	r3, r3, #12
 8001fae:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <gyro_disable+0xb4>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <gyro_disable+0xb4>)
 8001fba:	f043 0320 	orr.w	r3, r3, #32
 8001fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <gyro_disable+0xb4>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8;	// Reset speed of PF8
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <gyro_disable+0xbc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4a10      	ldr	r2, [pc, #64]	; (8002014 <gyro_disable+0xbc>)
 8001fd2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001fd6:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8;			// Reset alternate func. of PF8
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <gyro_disable+0xbc>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <gyro_disable+0xbc>)
 8001fde:	f023 030f 	bic.w	r3, r3, #15
 8001fe2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8;			// Reset pulup/down of PF8
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <gyro_disable+0xbc>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <gyro_disable+0xbc>)
 8001fea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001fee:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8001ff0:	200a      	movs	r0, #10
 8001ff2:	f003 f9b5 	bl	8005360 <HAL_Delay>
	GPIOF->MODER |= GPIO_MODER_MODER8_Msk; // Analog mode for PF6 = ADC3_IN4
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <gyro_disable+0xbc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a06      	ldr	r2, [pc, #24]	; (8002014 <gyro_disable+0xbc>)
 8001ffc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002000:	6013      	str	r3, [r2, #0]
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40020800 	.word	0x40020800
 8002014:	40021400 	.word	0x40021400

08002018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	2b00      	cmp	r3, #0
 8002028:	db0b      	blt.n	8002042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f003 021f 	and.w	r2, r3, #31
 8002030:	4907      	ldr	r1, [pc, #28]	; (8002050 <__NVIC_EnableIRQ+0x38>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2001      	movs	r0, #1
 800203a:	fa00 f202 	lsl.w	r2, r0, r2
 800203e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000e100 	.word	0xe000e100

08002054 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db12      	blt.n	800208c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	490a      	ldr	r1, [pc, #40]	; (8002098 <__NVIC_DisableIRQ+0x44>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	3320      	adds	r3, #32
 800207c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002080:	f3bf 8f4f 	dsb	sy
}
 8002084:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002086:	f3bf 8f6f 	isb	sy
}
 800208a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000e100 	.word	0xe000e100

0800209c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0c      	blt.n	80020c8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4907      	ldr	r1, [pc, #28]	; (80020d4 <__NVIC_ClearPendingIRQ+0x38>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	3360      	adds	r3, #96	; 0x60
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <MEAS_GPIO_analog_init>:
 * - ADC123_IN11 	= GPIO PC1 = COIL_RIGHT
 * - ADC12_IN5 		= GPIO PA5
 * - DAC_OUT2 		= GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <MEAS_GPIO_analog_init+0xa4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a25      	ldr	r2, [pc, #148]	; (800217c <MEAS_GPIO_analog_init+0xa4>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b23      	ldr	r3, [pc, #140]	; (800217c <MEAS_GPIO_analog_init+0xa4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <MEAS_GPIO_analog_init+0xa4>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <MEAS_GPIO_analog_init+0xa4>)
 8002104:	f043 0320 	orr.w	r3, r3, #32
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <MEAS_GPIO_analog_init+0xa4>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
	/* Now configure the analog inputs */
	GPIOF->MODER |= GPIO_MODER_MODER6_Msk;	// Analog mode for PF6 = ADC3_IN4
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <MEAS_GPIO_analog_init+0xa8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a19      	ldr	r2, [pc, #100]	; (8002180 <MEAS_GPIO_analog_init+0xa8>)
 800211c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002120:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER3_Msk;	// Analog mode PC3 = ADC123_IN13
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MEAS_GPIO_analog_init+0xac>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a17      	ldr	r2, [pc, #92]	; (8002184 <MEAS_GPIO_analog_init+0xac>)
 8002128:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800212c:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= GPIO_MODER_MODER8_Msk;	// Analog mode for PF8 = ADC3_IN6
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <MEAS_GPIO_analog_init+0xa8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a13      	ldr	r2, [pc, #76]	; (8002180 <MEAS_GPIO_analog_init+0xa8>)
 8002134:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002138:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER1_Msk;	// Analog mode PC1 = ADC123_IN11
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <MEAS_GPIO_analog_init+0xac>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <MEAS_GPIO_analog_init+0xac>)
 8002140:	f043 030c 	orr.w	r3, r3, #12
 8002144:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <MEAS_GPIO_analog_init+0xa4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <MEAS_GPIO_analog_init+0xa4>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <MEAS_GPIO_analog_init+0xa4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= GPIO_MODER_MODER5_Msk;	// Analog mode for PA5 ADC12_IN5
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MEAS_GPIO_analog_init+0xb0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a08      	ldr	r2, [pc, #32]	; (8002188 <MEAS_GPIO_analog_init+0xb0>)
 8002168:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800216c:	6013      	str	r3, [r2, #0]
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	40021400 	.word	0x40021400
 8002184:	40020800 	.word	0x40020800
 8002188:	40020000 	.word	0x40020000

0800218c <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <DAC_increment+0x30>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3314      	adds	r3, #20
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <DAC_increment+0x30>)
 8002198:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <DAC_increment+0x30>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a2:	d302      	bcc.n	80021aa <DAC_increment+0x1e>
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <DAC_increment+0x30>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <DAC_increment+0x34>)
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <DAC_increment+0x30>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6153      	str	r3, [r2, #20]
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	200008ac 	.word	0x200008ac
 80021c0:	40007400 	.word	0x40007400

080021c4 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <ADC_reset+0x38>)
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <ADC_reset+0x38>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d2:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <ADC_reset+0x38>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	4a08      	ldr	r2, [pc, #32]	; (80021fc <ADC_reset+0x38>)
 80021da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021de:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 80021e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800

08002200 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <MEAS_timer_init+0x68>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a16      	ldr	r2, [pc, #88]	; (8002268 <MEAS_timer_init+0x68>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <MEAS_timer_init+0x68>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 8002222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002226:	f243 62af 	movw	r2, #13999	; 0x36af
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 800222c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002230:	2209      	movs	r2, #9
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8002234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800223e:	f043 0320 	orr.w	r3, r3, #32
 8002242:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8002244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8002254:	201c      	movs	r0, #28
 8002256:	f7ff ff21 	bl	800209c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 800225a:	201c      	movs	r0, #28
 800225c:	f7ff fedc 	bl	8002018 <__NVIC_EnableIRQ>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800

0800226c <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8002270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <TIM2_IRQHandler+0x24>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <TIM2_IRQHandler+0x20>
		DAC_increment();
 8002288:	f7ff ff80 	bl	800218c <DAC_increment>
	}
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200004e4 	.word	0x200004e4

08002294 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <ADC_IRQHandler+0x58>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 80022a4:	4911      	ldr	r1, [pc, #68]	; (80022ec <ADC_IRQHandler+0x58>)
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <ADC_IRQHandler+0x5c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	4810      	ldr	r0, [pc, #64]	; (80022f0 <ADC_IRQHandler+0x5c>)
 80022ae:	6002      	str	r2, [r0, #0]
 80022b0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80022b2:	4910      	ldr	r1, [pc, #64]	; (80022f4 <ADC_IRQHandler+0x60>)
 80022b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <ADC_IRQHandler+0x5c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b3b      	cmp	r3, #59	; 0x3b
 80022be:	d912      	bls.n	80022e6 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 80022c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <ADC_IRQHandler+0x58>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a05      	ldr	r2, [pc, #20]	; (80022ec <ADC_IRQHandler+0x58>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	6093      	str	r3, [r2, #8]
			ADC_reset();
 80022dc:	f7ff ff72 	bl	80021c4 <ADC_reset>
			MEAS_data_ready = true;
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <ADC_IRQHandler+0x64>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40012200 	.word	0x40012200
 80022f0:	200004e8 	.word	0x200004e8
 80022f4:	200004ec 	.word	0x200004ec
 80022f8:	200004e3 	.word	0x200004e3

080022fc <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <DMA2_Stream1_IRQHandler+0x78>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002308:	2b00      	cmp	r3, #0
 800230a:	d031      	beq.n	8002370 <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 800230c:	2039      	movs	r0, #57	; 0x39
 800230e:	f7ff fea1 	bl	8002054 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8002312:	2039      	movs	r0, #57	; 0x39
 8002314:	f7ff fec2 	bl	800209c <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <DMA2_Stream1_IRQHandler+0x7c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a16      	ldr	r2, [pc, #88]	; (8002378 <DMA2_Stream1_IRQHandler+0x7c>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8002324:	bf00      	nop
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <DMA2_Stream1_IRQHandler+0x7c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f9      	bne.n	8002326 <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <DMA2_Stream1_IRQHandler+0x78>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <DMA2_Stream1_IRQHandler+0x78>)
 8002338:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800233c:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 800233e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <DMA2_Stream1_IRQHandler+0x80>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <DMA2_Stream1_IRQHandler+0x80>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <DMA2_Stream1_IRQHandler+0x80>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	4a07      	ldr	r2, [pc, #28]	; (800237c <DMA2_Stream1_IRQHandler+0x80>)
 8002360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002364:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8002366:	f7ff ff2d 	bl	80021c4 <ADC_reset>
		MEAS_data_ready = true;
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <DMA2_Stream1_IRQHandler+0x84>)
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
	}
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40026400 	.word	0x40026400
 8002378:	40026428 	.word	0x40026428
 800237c:	40012200 	.word	0x40012200
 8002380:	200004e3 	.word	0x200004e3

08002384 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 8002388:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <DMA2_Stream3_IRQHandler+0x78>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d031      	beq.n	80023f8 <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 8002394:	203b      	movs	r0, #59	; 0x3b
 8002396:	f7ff fe5d 	bl	8002054 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 800239a:	203b      	movs	r0, #59	; 0x3b
 800239c:	f7ff fe7e 	bl	800209c <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80023a0:	4b17      	ldr	r3, [pc, #92]	; (8002400 <DMA2_Stream3_IRQHandler+0x7c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <DMA2_Stream3_IRQHandler+0x7c>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80023ac:	bf00      	nop
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <DMA2_Stream3_IRQHandler+0x7c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f9      	bne.n	80023ae <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <DMA2_Stream3_IRQHandler+0x78>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <DMA2_Stream3_IRQHandler+0x78>)
 80023c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023c4:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 80023c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <DMA2_Stream3_IRQHandler+0x80>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <DMA2_Stream3_IRQHandler+0x80>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <DMA2_Stream3_IRQHandler+0x80>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	4a07      	ldr	r2, [pc, #28]	; (8002404 <DMA2_Stream3_IRQHandler+0x80>)
 80023e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023ec:	6093      	str	r3, [r2, #8]
		ADC_reset();
 80023ee:	f7ff fee9 	bl	80021c4 <ADC_reset>
		MEAS_data_ready = true;
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <DMA2_Stream3_IRQHandler+0x84>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
	}
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40026400 	.word	0x40026400
 8002400:	40026458 	.word	0x40026458
 8002404:	40012100 	.word	0x40012100
 8002408:	200004e3 	.word	0x200004e3

0800240c <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8002412:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <DMA2_Stream4_IRQHandler+0xc8>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d055      	beq.n	80024ca <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 800241e:	203c      	movs	r0, #60	; 0x3c
 8002420:	f7ff fe18 	bl	8002054 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8002424:	203c      	movs	r0, #60	; 0x3c
 8002426:	f7ff fe39 	bl	800209c <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 800242a:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <DMA2_Stream4_IRQHandler+0xcc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2a      	ldr	r2, [pc, #168]	; (80024d8 <DMA2_Stream4_IRQHandler+0xcc>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8002436:	bf00      	nop
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <DMA2_Stream4_IRQHandler+0xcc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f9      	bne.n	8002438 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8002444:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <DMA2_Stream4_IRQHandler+0xc8>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <DMA2_Stream4_IRQHandler+0xc8>)
 800244a:	f043 0320 	orr.w	r3, r3, #32
 800244e:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8002450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <DMA2_Stream4_IRQHandler+0xd0>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <DMA2_Stream4_IRQHandler+0xd0>)
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <DMA2_Stream4_IRQHandler+0xd4>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <DMA2_Stream4_IRQHandler+0xd4>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8002478:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <DMA2_Stream4_IRQHandler+0xd8>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <DMA2_Stream4_IRQHandler+0xd8>)
 800247e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002482:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 8002484:	233b      	movs	r3, #59	; 0x3b
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	e017      	b.n	80024ba <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 800248a:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <DMA2_Stream4_IRQHandler+0xdc>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	3301      	adds	r3, #1
 8002498:	0c12      	lsrs	r2, r2, #16
 800249a:	4913      	ldr	r1, [pc, #76]	; (80024e8 <DMA2_Stream4_IRQHandler+0xdc>)
 800249c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 80024a0:	4a11      	ldr	r2, [pc, #68]	; (80024e8 <DMA2_Stream4_IRQHandler+0xdc>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	b292      	uxth	r2, r2
 80024ae:	490e      	ldr	r1, [pc, #56]	; (80024e8 <DMA2_Stream4_IRQHandler+0xdc>)
 80024b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	dae4      	bge.n	800248a <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 80024c0:	f7ff fe80 	bl	80021c4 <ADC_reset>
		MEAS_data_ready = true;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <DMA2_Stream4_IRQHandler+0xe0>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
	}
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40026400 	.word	0x40026400
 80024d8:	40026470 	.word	0x40026470
 80024dc:	40012000 	.word	0x40012000
 80024e0:	40012100 	.word	0x40012100
 80024e4:	40012300 	.word	0x40012300
 80024e8:	200004ec 	.word	0x200004ec
 80024ec:	200004e3 	.word	0x200004e3

080024f0 <MEAS_CLEAR_buffer_flags>:
 * @brief Clears buffer and flag
 * @n This function get's called after the data is displayed
 * @n Only the ADC_samples array gets set to 0;
 *****************************************************************************/
void MEAS_CLEAR_buffer_flags(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
	/* Clear buffer and flag */
	for (uint32_t i = 0; i < (ADC_NUMS*INPUTS_NUMS); i++){
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	e007      	b.n	800250c <MEAS_CLEAR_buffer_flags+0x1c>
		ADC_samples[i] = 0;
 80024fc:	4a09      	ldr	r2, [pc, #36]	; (8002524 <MEAS_CLEAR_buffer_flags+0x34>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2100      	movs	r1, #0
 8002502:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < (ADC_NUMS*INPUTS_NUMS); i++){
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3301      	adds	r3, #1
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2bef      	cmp	r3, #239	; 0xef
 8002510:	d9f4      	bls.n	80024fc <MEAS_CLEAR_buffer_flags+0xc>
	}
	ADC_sample_count = 0;
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <MEAS_CLEAR_buffer_flags+0x38>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	200004ec 	.word	0x200004ec
 8002528:	200004e8 	.word	0x200004e8

0800252c <ADC3_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n All 4 inputs are scanned and put into the ADC_samples array
 *****************************************************************************/
void ADC3_scan_init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0

	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	4b53      	ldr	r3, [pc, #332]	; (8002684 <ADC3_scan_init+0x158>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a52      	ldr	r2, [pc, #328]	; (8002684 <ADC3_scan_init+0x158>)
 800253c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b50      	ldr	r3, [pc, #320]	; (8002684 <ADC3_scan_init+0x158>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 800254e:	4b4e      	ldr	r3, [pc, #312]	; (8002688 <ADC3_scan_init+0x15c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a4d      	ldr	r2, [pc, #308]	; (8002688 <ADC3_scan_init+0x15c>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 800255a:	bf00      	nop
 800255c:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <ADC3_scan_init+0x15c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f9      	bne.n	800255c <ADC3_scan_init+0x30>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 8002568:	4b48      	ldr	r3, [pc, #288]	; (800268c <ADC3_scan_init+0x160>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4a47      	ldr	r2, [pc, #284]	; (800268c <ADC3_scan_init+0x160>)
 800256e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002572:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= DMA_SxCR_CHSEL_1;	// Select channel 2
 8002574:	4b44      	ldr	r3, [pc, #272]	; (8002688 <ADC3_scan_init+0x15c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a43      	ldr	r2, [pc, #268]	; (8002688 <ADC3_scan_init+0x15c>)
 800257a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800257e:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 8002580:	4b41      	ldr	r3, [pc, #260]	; (8002688 <ADC3_scan_init+0x15c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a40      	ldr	r2, [pc, #256]	; (8002688 <ADC3_scan_init+0x15c>)
 8002586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258a:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 800258c:	4b3e      	ldr	r3, [pc, #248]	; (8002688 <ADC3_scan_init+0x15c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a3d      	ldr	r2, [pc, #244]	; (8002688 <ADC3_scan_init+0x15c>)
 8002592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002596:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8002598:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <ADC3_scan_init+0x15c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a3a      	ldr	r2, [pc, #232]	; (8002688 <ADC3_scan_init+0x15c>)
 800259e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025a2:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 80025a4:	4b38      	ldr	r3, [pc, #224]	; (8002688 <ADC3_scan_init+0x15c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a37      	ldr	r2, [pc, #220]	; (8002688 <ADC3_scan_init+0x15c>)
 80025aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ae:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <ADC3_scan_init+0x15c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a34      	ldr	r2, [pc, #208]	; (8002688 <ADC3_scan_init+0x15c>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = INPUTS_NUMS*ADC_NUMS;		// Number of data items to transfer
 80025bc:	4b32      	ldr	r3, [pc, #200]	; (8002688 <ADC3_scan_init+0x15c>)
 80025be:	22f0      	movs	r2, #240	; 0xf0
 80025c0:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <ADC3_scan_init+0x15c>)
 80025c4:	4a32      	ldr	r2, [pc, #200]	; (8002690 <ADC3_scan_init+0x164>)
 80025c6:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80025c8:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <ADC3_scan_init+0x15c>)
 80025ca:	4a32      	ldr	r2, [pc, #200]	; (8002694 <ADC3_scan_init+0x168>)
 80025cc:	60da      	str	r2, [r3, #12]
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 80025ce:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <ADC3_scan_init+0x15c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2d      	ldr	r2, [pc, #180]	; (8002688 <ADC3_scan_init+0x15c>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 80025da:	2039      	movs	r0, #57	; 0x39
 80025dc:	f7ff fd5e 	bl	800209c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 80025e0:	2039      	movs	r0, #57	; 0x39
 80025e2:	f7ff fd19 	bl	8002018 <__NVIC_EnableIRQ>
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 80025e6:	2300      	movs	r3, #0
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <ADC3_scan_init+0x158>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	4a25      	ldr	r2, [pc, #148]	; (8002684 <ADC3_scan_init+0x158>)
 80025f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <ADC3_scan_init+0x158>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
	ADC3->SQR1 |= ADC_SQR1_L_0 | ADC_SQR1_L_1;	// Convert 4 inputs
 8002602:	4b25      	ldr	r3, [pc, #148]	; (8002698 <ADC3_scan_init+0x16c>)
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	4a24      	ldr	r2, [pc, #144]	; (8002698 <ADC3_scan_init+0x16c>)
 8002608:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800260c:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC3->SQR3 |= ( 4UL << ADC_SQR3_SQ1_Pos);	// Input  4 = 1. conversion Pad Left
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <ADC3_scan_init+0x16c>)
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	4a21      	ldr	r2, [pc, #132]	; (8002698 <ADC3_scan_init+0x16c>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ2_Pos);	// Input 13 = 2. conversion Pad Right
 800261a:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <ADC3_scan_init+0x16c>)
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <ADC3_scan_init+0x16c>)
 8002620:	f443 73d0 	orr.w	r3, r3, #416	; 0x1a0
 8002624:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= ( 6UL << ADC_SQR3_SQ3_Pos);	// Input  6 = 3. conversion Coil Left
 8002626:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <ADC3_scan_init+0x16c>)
 8002628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262a:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <ADC3_scan_init+0x16c>)
 800262c:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8002630:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (11UL << ADC_SQR3_SQ4_Pos);	// Input 11 = 4. conversion Coil Right
 8002632:	4b19      	ldr	r3, [pc, #100]	; (8002698 <ADC3_scan_init+0x16c>)
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002636:	4a18      	ldr	r2, [pc, #96]	; (8002698 <ADC3_scan_init+0x16c>)
 8002638:	f443 23b0 	orr.w	r3, r3, #360448	; 0x58000
 800263c:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <ADC3_scan_init+0x16c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4a15      	ldr	r2, [pc, #84]	; (8002698 <ADC3_scan_init+0x16c>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002648:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= ADC_CR2_EXTEN_0;		// Enable external trigger on rising e.
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <ADC3_scan_init+0x16c>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <ADC3_scan_init+0x16c>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2; // Timer 2 TRGO event
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <ADC3_scan_init+0x16c>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <ADC3_scan_init+0x16c>)
 800265c:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8002660:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <ADC3_scan_init+0x16c>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4a0c      	ldr	r2, [pc, #48]	; (8002698 <ADC3_scan_init+0x16c>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266c:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <ADC3_scan_init+0x16c>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <ADC3_scan_init+0x16c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6093      	str	r3, [r2, #8]

}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	40026428 	.word	0x40026428
 800268c:	40026400 	.word	0x40026400
 8002690:	4001224c 	.word	0x4001224c
 8002694:	200004ec 	.word	0x200004ec
 8002698:	40012200 	.word	0x40012200

0800269c <ADC3_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 * @n pads
 *****************************************************************************/
void ADC3_scan_start(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <ADC3_scan_start+0x3c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0c      	ldr	r2, [pc, #48]	; (80026d8 <ADC3_scan_start+0x3c>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 80026ac:	2039      	movs	r0, #57	; 0x39
 80026ae:	f7ff fcf5 	bl	800209c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 80026b2:	2039      	movs	r0, #57	; 0x39
 80026b4:	f7ff fcb0 	bl	8002018 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <ADC3_scan_start+0x40>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a07      	ldr	r2, [pc, #28]	; (80026dc <ADC3_scan_start+0x40>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 80026c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40026428 	.word	0x40026428
 80026dc:	40012200 	.word	0x40012200

080026e0 <MEAS_sort_data>:

/** ***************************************************************************
 * @brief Sorts the data from ADC_samples to a array for each input
 * @note	  The array has the same size as ADC_NUMS = 60
 *****************************************************************************/
void MEAS_sort_data(void){
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
	for(int i=0;i<ADC_NUMS;i++){
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	e02d      	b.n	8002748 <MEAS_sort_data+0x68>

		PAD1_samples[i]=ADC_samples[(4*i)];
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4a1a      	ldr	r2, [pc, #104]	; (800275c <MEAS_sort_data+0x7c>)
 80026f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f6:	4619      	mov	r1, r3
 80026f8:	4a19      	ldr	r2, [pc, #100]	; (8002760 <MEAS_sort_data+0x80>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		PAD2_samples[i]=ADC_samples[1+((4*i))];
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	3301      	adds	r3, #1
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <MEAS_sort_data+0x7c>)
 8002708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270c:	4619      	mov	r1, r3
 800270e:	4a15      	ldr	r2, [pc, #84]	; (8002764 <MEAS_sort_data+0x84>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		COIL1_samples[i]=ADC_samples[2+(4*i)];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	4a0f      	ldr	r2, [pc, #60]	; (800275c <MEAS_sort_data+0x7c>)
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	4619      	mov	r1, r3
 8002724:	4a10      	ldr	r2, [pc, #64]	; (8002768 <MEAS_sort_data+0x88>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		COIL2_samples[i]=ADC_samples[3+(4*i)];
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	3303      	adds	r3, #3
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <MEAS_sort_data+0x7c>)
 8002734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002738:	4619      	mov	r1, r3
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <MEAS_sort_data+0x8c>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<ADC_NUMS;i++){
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3301      	adds	r3, #1
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b3b      	cmp	r3, #59	; 0x3b
 800274c:	ddce      	ble.n	80026ec <MEAS_sort_data+0xc>
	}
}
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	200004ec 	.word	0x200004ec
 8002760:	200008b0 	.word	0x200008b0
 8002764:	200009a0 	.word	0x200009a0
 8002768:	20000a90 	.word	0x20000a90
 800276c:	20000b80 	.word	0x20000b80

08002770 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8002776:	4852      	ldr	r0, [pc, #328]	; (80028c0 <MENU_draw+0x150>)
 8002778:	f001 fc7c 	bl	8004074 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 800277c:	f001 fbc8 	bl	8003f10 <BSP_LCD_GetYSize>
 8002780:	4603      	mov	r3, r0
 8002782:	3b28      	subs	r3, #40	; 0x28
 8002784:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8002786:	2302      	movs	r3, #2
 8002788:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 800278a:	f001 fbb5 	bl	8003ef8 <BSP_LCD_GetXSize>
 800278e:	4603      	mov	r3, r0
 8002790:	4a4c      	ldr	r2, [pc, #304]	; (80028c4 <MENU_draw+0x154>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 800279a:	2328      	movs	r3, #40	; 0x28
 800279c:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e084      	b.n	80028ae <MENU_draw+0x13e>
		x = i*w;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
 80027ac:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 80027ae:	4946      	ldr	r1, [pc, #280]	; (80028c8 <MENU_draw+0x158>)
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	3324      	adds	r3, #36	; 0x24
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fc25 	bl	8004010 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	b298      	uxth	r0, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4413      	add	r3, r2
 80027dc:	b299      	uxth	r1, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	b29c      	uxth	r4, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	4622      	mov	r2, r4
 8002800:	f001 ff6e 	bl	80046e0 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 8002804:	4930      	ldr	r1, [pc, #192]	; (80028c8 <MENU_draw+0x158>)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	3324      	adds	r3, #36	; 0x24
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f001 fc12 	bl	8004040 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 800281c:	492a      	ldr	r1, [pc, #168]	; (80028c8 <MENU_draw+0x158>)
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	3320      	adds	r3, #32
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fbee 	bl	8004010 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt((x+3*m), y+3*m,
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	0052      	lsls	r2, r2, #1
 800283c:	4413      	add	r3, r2
 800283e:	b29a      	uxth	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	4413      	add	r3, r2
 8002846:	b298      	uxth	r0, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	4413      	add	r3, r2
 8002852:	b29a      	uxth	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	b29b      	uxth	r3, r3
 8002858:	4413      	add	r3, r2
 800285a:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <MENU_draw+0x158>)
 8002868:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt((x+3*m), y+3*m,
 800286a:	2303      	movs	r3, #3
 800286c:	f001 fc88 	bl	8004180 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt((x+3*m), y+h/2,
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	b29b      	uxth	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	0052      	lsls	r2, r2, #1
 8002878:	4413      	add	r3, r2
 800287a:	b29a      	uxth	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	4413      	add	r3, r2
 8002882:	b298      	uxth	r0, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	b29b      	uxth	r3, r3
 800288e:	4413      	add	r3, r2
 8002890:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	3310      	adds	r3, #16
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <MENU_draw+0x158>)
 80028a0:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt((x+3*m), y+h/2,
 80028a2:	2303      	movs	r3, #3
 80028a4:	f001 fc6c 	bl	8004180 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3301      	adds	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	f67f af77 	bls.w	80027a4 <MENU_draw+0x34>
	}
}
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	20000428 	.word	0x20000428
 80028c4:	aaaaaaab 	.word	0xaaaaaaab
 80028c8:	20000328 	.word	0x20000328

080028cc <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f001 fbb4 	bl	8004040 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80028d8:	4824      	ldr	r0, [pc, #144]	; (800296c <MENU_hint+0xa0>)
 80028da:	f001 fb99 	bl	8004010 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(10,124,8);
 80028de:	2208      	movs	r2, #8
 80028e0:	217c      	movs	r1, #124	; 0x7c
 80028e2:	200a      	movs	r0, #10
 80028e4:	f001 ff56 	bl	8004794 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80028e8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80028ec:	f001 fb90 	bl	8004010 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80028f0:	481f      	ldr	r0, [pc, #124]	; (8002970 <MENU_hint+0xa4>)
 80028f2:	f001 fbbf 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0,10, (uint8_t *)"RADAR-Monitor", CENTER_MODE);
 80028f6:	2301      	movs	r3, #1
 80028f8:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <MENU_hint+0xa8>)
 80028fa:	210a      	movs	r1, #10
 80028fc:	2000      	movs	r0, #0
 80028fe:	f001 fc3f 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 8002902:	481d      	ldr	r0, [pc, #116]	; (8002978 <MENU_hint+0xac>)
 8002904:	f001 fbb6 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"Touch a menu item", CENTER_MODE);
 8002908:	2301      	movs	r3, #1
 800290a:	4a1c      	ldr	r2, [pc, #112]	; (800297c <MENU_hint+0xb0>)
 800290c:	213c      	movs	r1, #60	; 0x3c
 800290e:	2000      	movs	r0, #0
 8002910:	f001 fc36 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 80, (uint8_t *)"to start a measurement", CENTER_MODE);
 8002914:	2301      	movs	r3, #1
 8002916:	4a1a      	ldr	r2, [pc, #104]	; (8002980 <MENU_hint+0xb4>)
 8002918:	2150      	movs	r1, #80	; 0x50
 800291a:	2000      	movs	r0, #0
 800291c:	f001 fc30 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(30, 120, (uint8_t *)"BLUE  pushbutton to SHUT OFF", LEFT_MODE);
 8002920:	2303      	movs	r3, #3
 8002922:	4a18      	ldr	r2, [pc, #96]	; (8002984 <MENU_hint+0xb8>)
 8002924:	2178      	movs	r1, #120	; 0x78
 8002926:	201e      	movs	r0, #30
 8002928:	f001 fc2a 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(30, 150, (uint8_t *)"BLACK pushbutton to RESET", LEFT_MODE);
 800292c:	2303      	movs	r3, #3
 800292e:	4a16      	ldr	r2, [pc, #88]	; (8002988 <MENU_hint+0xbc>)
 8002930:	2196      	movs	r1, #150	; 0x96
 8002932:	201e      	movs	r0, #30
 8002934:	f001 fc24 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_FillCircle(10,154,8);
 8002938:	2208      	movs	r2, #8
 800293a:	219a      	movs	r1, #154	; 0x9a
 800293c:	200a      	movs	r0, #10
 800293e:	f001 ff29 	bl	8004794 <BSP_LCD_FillCircle>
	BSP_LCD_DisplayStringAt(0, 190, (uint8_t *)"Version 30.03.2022", CENTER_MODE);
 8002942:	2301      	movs	r3, #1
 8002944:	4a11      	ldr	r2, [pc, #68]	; (800298c <MENU_hint+0xc0>)
 8002946:	21be      	movs	r1, #190	; 0xbe
 8002948:	2000      	movs	r0, #0
 800294a:	f001 fc19 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 210, (uint8_t *)"ETPM4 Project | ET20a", CENTER_MODE);
 800294e:	2301      	movs	r3, #1
 8002950:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <MENU_hint+0xc4>)
 8002952:	21d2      	movs	r1, #210	; 0xd2
 8002954:	2000      	movs	r0, #0
 8002956:	f001 fc13 	bl	8004180 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 230, (uint8_t *)"kneubste | schocnik", CENTER_MODE);
 800295a:	2301      	movs	r3, #1
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <MENU_hint+0xc8>)
 800295e:	21e6      	movs	r1, #230	; 0xe6
 8002960:	2000      	movs	r0, #0
 8002962:	f001 fc0d 	bl	8004180 <BSP_LCD_DisplayStringAt>
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	ff0000ff 	.word	0xff0000ff
 8002970:	20000418 	.word	0x20000418
 8002974:	0800a158 	.word	0x0800a158
 8002978:	20000430 	.word	0x20000430
 800297c:	0800a168 	.word	0x0800a168
 8002980:	0800a17c 	.word	0x0800a17c
 8002984:	0800a194 	.word	0x0800a194
 8002988:	0800a1b4 	.word	0x0800a1b4
 800298c:	0800a1d0 	.word	0x0800a1d0
 8002990:	0800a1e4 	.word	0x0800a1e4
 8002994:	0800a1fc 	.word	0x0800a1fc

08002998 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MENU_get_transition+0x20>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <MENU_get_transition+0x20>)
 80029a6:	2204      	movs	r2, #4
 80029a8:	701a      	strb	r2, [r3, #0]
	return item;
 80029aa:	79fb      	ldrb	r3, [r7, #7]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	20000324 	.word	0x20000324

080029bc <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 80029bc:	b598      	push	{r3, r4, r7, lr}
 80029be:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 80029c0:	4826      	ldr	r0, [pc, #152]	; (8002a5c <MENU_check_transition+0xa0>)
 80029c2:	f002 fb95 	bl	80050f0 <BSP_TS_GetState>
#ifdef EVAL_REV_E
// Evalboard revision E (blue) has an inverted y-axis in the touch controller
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 80029c6:	f001 faa3 	bl	8003f10 <BSP_LCD_GetYSize>
 80029ca:	4603      	mov	r3, r0
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <MENU_check_transition+0xa0>)
 80029d0:	889b      	ldrh	r3, [r3, #4]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <MENU_check_transition+0xa0>)
 80029d8:	809a      	strh	r2, [r3, #4]
#endif
	if (TS_State.TouchDetected) {		// If a touch was detected
 80029da:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <MENU_check_transition+0xa0>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d039      	beq.n	8002a56 <MENU_check_transition+0x9a>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 80029e2:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <MENU_check_transition+0xa4>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d135      	bne.n	8002a56 <MENU_check_transition+0x9a>
			item_old = item_new;		// Store old item
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <MENU_check_transition+0xa8>)
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <MENU_check_transition+0xac>)
 80029f0:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 80029f2:	f001 fa8d 	bl	8003f10 <BSP_LCD_GetYSize>
 80029f6:	4603      	mov	r3, r0
 80029f8:	3b28      	subs	r3, #40	; 0x28
 80029fa:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <MENU_check_transition+0xa0>)
 80029fc:	8892      	ldrh	r2, [r2, #4]
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d229      	bcs.n	8002a56 <MENU_check_transition+0x9a>
 8002a02:	f001 fa85 	bl	8003f10 <BSP_LCD_GetYSize>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <MENU_check_transition+0xa0>)
 8002a0a:	8892      	ldrh	r2, [r2, #4]
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d922      	bls.n	8002a56 <MENU_check_transition+0x9a>
				item_new = TS_State.X	// Calculate new item
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <MENU_check_transition+0xa0>)
 8002a12:	885b      	ldrh	r3, [r3, #2]
 8002a14:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8002a16:	f001 fa6f 	bl	8003ef8 <BSP_LCD_GetXSize>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <MENU_check_transition+0xb0>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a28:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MENU_check_transition+0xa8>)
 8002a2c:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <MENU_check_transition+0xa8>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d902      	bls.n	8002a3c <MENU_check_transition+0x80>
					item_new = MENU_NONE;	// Out of bounds
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <MENU_check_transition+0xa8>)
 8002a38:	2204      	movs	r2, #4
 8002a3a:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MENU_check_transition+0xa8>)
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MENU_check_transition+0xac>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d106      	bne.n	8002a56 <MENU_check_transition+0x9a>
					item_new = MENU_NONE;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MENU_check_transition+0xa8>)
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MENU_check_transition+0xac>)
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <MENU_check_transition+0xa4>)
 8002a54:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8002a56:	bf00      	nop
 8002a58:	bd98      	pop	{r3, r4, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000c70 	.word	0x20000c70
 8002a60:	20000324 	.word	0x20000324
 8002a64:	200003a0 	.word	0x200003a0
 8002a68:	200003a1 	.word	0x200003a1
 8002a6c:	aaaaaaab 	.word	0xaaaaaaab

08002a70 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <EXTI15_10_IRQHandler+0x40>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d014      	beq.n	8002aaa <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <EXTI15_10_IRQHandler+0x40>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <EXTI15_10_IRQHandler+0x40>)
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8002a8c:	f002 fb24 	bl	80050d8 <BSP_TS_ITGetStatus>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8002a96:	f002 fbdd 	bl	8005254 <BSP_TS_ITClear>
			MENU_check_transition();
 8002a9a:	f7ff ff8f 	bl	80029bc <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <EXTI15_10_IRQHandler+0x40>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	4a03      	ldr	r2, [pc, #12]	; (8002ab0 <EXTI15_10_IRQHandler+0x40>)
 8002aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa8:	6153      	str	r3, [r2, #20]
	}
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <MANUAL_shut_off>:
 * PC8 is set to open drain
 * This will turn off the device if the jupper is in the correct spot
 * LED4 will flash and "SHUT OFF" will be displayed
 *****************************************************************************/
void MANUAL_shut_off(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002aba:	f04f 30ff 	mov.w	r0, #4294967295
 8002abe:	f001 faa7 	bl	8004010 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, 240, 260+1);
 8002ac2:	f240 1305 	movw	r3, #261	; 0x105
 8002ac6:	22f0      	movs	r2, #240	; 0xf0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2000      	movs	r0, #0
 8002acc:	f001 fe08 	bl	80046e0 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font24);
 8002ad0:	481a      	ldr	r0, [pc, #104]	; (8002b3c <MANUAL_shut_off+0x88>)
 8002ad2:	f001 facf 	bl	8004074 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8002ada:	f001 fab1 	bl	8004040 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002ade:	4818      	ldr	r0, [pc, #96]	; (8002b40 <MANUAL_shut_off+0x8c>)
 8002ae0:	f001 fa96 	bl	8004010 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"SHUT OFF", CENTER_MODE);
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <MANUAL_shut_off+0x90>)
 8002ae8:	213c      	movs	r1, #60	; 0x3c
 8002aea:	2005      	movs	r0, #5
 8002aec:	f001 fb48 	bl	8004180 <BSP_LCD_DisplayStringAt>

	for(int i=0; i<9; i++){		//Indication for shut off
 8002af0:	2300      	movs	r3, #0
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	e008      	b.n	8002b08 <MANUAL_shut_off+0x54>
		BSP_LED_Toggle(LED4);
 8002af6:	2001      	movs	r0, #1
 8002af8:	f000 fe04 	bl	8003704 <BSP_LED_Toggle>
		HAL_Delay(125);
 8002afc:	207d      	movs	r0, #125	; 0x7d
 8002afe:	f002 fc2f 	bl	8005360 <HAL_Delay>
	for(int i=0; i<9; i++){		//Indication for shut off
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3301      	adds	r3, #1
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	ddf3      	ble.n	8002af6 <MANUAL_shut_off+0x42>
	}
	BSP_LED_On(LED4);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f000 fdde 	bl	80036d0 <BSP_LED_On>
	HAL_Delay(500);
 8002b14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b18:	f002 fc22 	bl	8005360 <HAL_Delay>

	//shut off routine -> Makros
	GPIOC->MODER 	|= GPIO_MODER_MODER8_0;
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <MANUAL_shut_off+0x94>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <MANUAL_shut_off+0x94>)
 8002b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER 	|= GPIO_OTYPER_OT8_Msk;
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <MANUAL_shut_off+0x94>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a06      	ldr	r2, [pc, #24]	; (8002b48 <MANUAL_shut_off+0x94>)
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b32:	6053      	str	r3, [r2, #4]

}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000418 	.word	0x20000418
 8002b40:	ffff0000 	.word	0xffff0000
 8002b44:	0800a210 	.word	0x0800a210
 8002b48:	40020800 	.word	0x40020800

08002b4c <__NVIC_EnableIRQ>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db0b      	blt.n	8002b76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4907      	ldr	r1, [pc, #28]	; (8002b84 <__NVIC_EnableIRQ+0x38>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_ClearPendingIRQ>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0c      	blt.n	8002bb4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <__NVIC_ClearPendingIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	3360      	adds	r3, #96	; 0x60
 8002bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <PB_init+0x38>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <PB_init+0x38>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <PB_init+0x38>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <PB_init+0x3c>)
 8002be8:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <PB_init+0x3c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6013      	str	r3, [r2, #0]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020000 	.word	0x40020000

08002c04 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <PB_enableIRQ+0x58>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <PB_enableIRQ+0x58>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <PB_enableIRQ+0x58>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <PB_enableIRQ+0x5c>)
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <PB_enableIRQ+0x5c>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <PB_enableIRQ+0x60>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <PB_enableIRQ+0x60>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <PB_enableIRQ+0x60>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <PB_enableIRQ+0x60>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8002c46:	2006      	movs	r0, #6
 8002c48:	f7ff ff9e 	bl	8002b88 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8002c4c:	2006      	movs	r0, #6
 8002c4e:	f7ff ff7d 	bl	8002b4c <__NVIC_EnableIRQ>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40013800 	.word	0x40013800
 8002c64:	40013c00 	.word	0x40013c00

08002c68 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <PB_pressed+0x20>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <PB_pressed+0x20>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
	return pressed;
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	20000c78 	.word	0x20000c78

08002c8c <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <EXTI0_IRQHandler+0x2c>)
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <EXTI0_IRQHandler+0x2c>)
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	4a05      	ldr	r2, [pc, #20]	; (8002cb8 <EXTI0_IRQHandler+0x2c>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <EXTI0_IRQHandler+0x30>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
	}
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40013c00 	.word	0x40013c00
 8002cbc:	20000c78 	.word	0x20000c78

08002cc0 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8002cd2:	e7fe      	b.n	8002cd2 <HardFault_Handler+0x4>

08002cd4 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <MemManage_Handler+0x4>

08002cda <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8002cde:	e7fe      	b.n	8002cde <BusFault_Handler+0x4>

08002ce0 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <UsageFault_Handler+0x4>

08002ce6 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002d14:	f002 fb04 	bl	8005320 <HAL_IncTick>
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d20:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <SystemInit+0x60>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <SystemInit+0x60>)
 8002d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <SystemInit+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <SystemInit+0x64>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d3c:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <SystemInit+0x64>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d42:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <SystemInit+0x64>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <SystemInit+0x64>)
 8002d48:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <SystemInit+0x64>)
 8002d54:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <SystemInit+0x68>)
 8002d56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <SystemInit+0x64>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a08      	ldr	r2, [pc, #32]	; (8002d80 <SystemInit+0x64>)
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <SystemInit+0x64>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <SystemInit+0x60>)
 8002d6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d70:	609a      	str	r2, [r3, #8]
#endif
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00
 8002d80:	40023800 	.word	0x40023800
 8002d84:	24003010 	.word	0x24003010

08002d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dc0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d8e:	e003      	b.n	8002d98 <LoopCopyDataInit>

08002d90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d96:	3104      	adds	r1, #4

08002d98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d98:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002da0:	d3f6      	bcc.n	8002d90 <CopyDataInit>
  ldr  r2, =_sbss
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002da4:	e002      	b.n	8002dac <LoopFillZerobss>

08002da6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002da6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002da8:	f842 3b04 	str.w	r3, [r2], #4

08002dac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dac:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002db0:	d3f9      	bcc.n	8002da6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002db2:	f7ff ffb3 	bl	8002d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002db6:	f006 fbd3 	bl	8009560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dba:	f7fe ff99 	bl	8001cf0 <main>
  bx  lr    
 8002dbe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002dc0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002dc4:	0800dc68 	.word	0x0800dc68
  ldr  r0, =_sdata
 8002dc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002dcc:	200004a8 	.word	0x200004a8
  ldr  r2, =_sbss
 8002dd0:	200004a8 	.word	0x200004a8
  ldr  r3, = _ebss
 8002dd4:	20000f50 	.word	0x20000f50

08002dd8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd8:	e7fe      	b.n	8002dd8 <CAN1_RX0_IRQHandler>

08002dda <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002dde:	f000 fed3 	bl	8003b88 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002de2:	20ca      	movs	r0, #202	; 0xca
 8002de4:	f000 f95d 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002de8:	20c3      	movs	r0, #195	; 0xc3
 8002dea:	f000 f967 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002dee:	2008      	movs	r0, #8
 8002df0:	f000 f964 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002df4:	2050      	movs	r0, #80	; 0x50
 8002df6:	f000 f961 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002dfa:	20cf      	movs	r0, #207	; 0xcf
 8002dfc:	f000 f951 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f000 f95b 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002e06:	20c1      	movs	r0, #193	; 0xc1
 8002e08:	f000 f958 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002e0c:	2030      	movs	r0, #48	; 0x30
 8002e0e:	f000 f955 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002e12:	20ed      	movs	r0, #237	; 0xed
 8002e14:	f000 f945 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002e18:	2064      	movs	r0, #100	; 0x64
 8002e1a:	f000 f94f 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002e1e:	2003      	movs	r0, #3
 8002e20:	f000 f94c 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002e24:	2012      	movs	r0, #18
 8002e26:	f000 f949 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002e2a:	2081      	movs	r0, #129	; 0x81
 8002e2c:	f000 f946 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002e30:	20e8      	movs	r0, #232	; 0xe8
 8002e32:	f000 f936 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002e36:	2085      	movs	r0, #133	; 0x85
 8002e38:	f000 f940 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f000 f93d 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002e42:	2078      	movs	r0, #120	; 0x78
 8002e44:	f000 f93a 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002e48:	20cb      	movs	r0, #203	; 0xcb
 8002e4a:	f000 f92a 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002e4e:	2039      	movs	r0, #57	; 0x39
 8002e50:	f000 f934 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002e54:	202c      	movs	r0, #44	; 0x2c
 8002e56:	f000 f931 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f000 f92e 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002e60:	2034      	movs	r0, #52	; 0x34
 8002e62:	f000 f92b 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002e66:	2002      	movs	r0, #2
 8002e68:	f000 f928 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002e6c:	20f7      	movs	r0, #247	; 0xf7
 8002e6e:	f000 f918 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002e72:	2020      	movs	r0, #32
 8002e74:	f000 f922 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002e78:	20ea      	movs	r0, #234	; 0xea
 8002e7a:	f000 f912 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f000 f91c 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f000 f919 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002e8a:	20b1      	movs	r0, #177	; 0xb1
 8002e8c:	f000 f909 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e90:	2000      	movs	r0, #0
 8002e92:	f000 f913 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002e96:	201b      	movs	r0, #27
 8002e98:	f000 f910 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002e9c:	20b6      	movs	r0, #182	; 0xb6
 8002e9e:	f000 f900 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002ea2:	200a      	movs	r0, #10
 8002ea4:	f000 f90a 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002ea8:	20a2      	movs	r0, #162	; 0xa2
 8002eaa:	f000 f907 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002eae:	20c0      	movs	r0, #192	; 0xc0
 8002eb0:	f000 f8f7 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002eb4:	2010      	movs	r0, #16
 8002eb6:	f000 f901 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002eba:	20c1      	movs	r0, #193	; 0xc1
 8002ebc:	f000 f8f1 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002ec0:	2010      	movs	r0, #16
 8002ec2:	f000 f8fb 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002ec6:	20c5      	movs	r0, #197	; 0xc5
 8002ec8:	f000 f8eb 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002ecc:	2045      	movs	r0, #69	; 0x45
 8002ece:	f000 f8f5 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002ed2:	2015      	movs	r0, #21
 8002ed4:	f000 f8f2 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002ed8:	20c7      	movs	r0, #199	; 0xc7
 8002eda:	f000 f8e2 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002ede:	2090      	movs	r0, #144	; 0x90
 8002ee0:	f000 f8ec 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002ee4:	2036      	movs	r0, #54	; 0x36
 8002ee6:	f000 f8dc 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002eea:	20c8      	movs	r0, #200	; 0xc8
 8002eec:	f000 f8e6 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002ef0:	20f2      	movs	r0, #242	; 0xf2
 8002ef2:	f000 f8d6 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f000 f8e0 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002efc:	20b0      	movs	r0, #176	; 0xb0
 8002efe:	f000 f8d0 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002f02:	20c2      	movs	r0, #194	; 0xc2
 8002f04:	f000 f8da 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002f08:	20b6      	movs	r0, #182	; 0xb6
 8002f0a:	f000 f8ca 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002f0e:	200a      	movs	r0, #10
 8002f10:	f000 f8d4 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002f14:	20a7      	movs	r0, #167	; 0xa7
 8002f16:	f000 f8d1 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002f1a:	2027      	movs	r0, #39	; 0x27
 8002f1c:	f000 f8ce 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002f20:	2004      	movs	r0, #4
 8002f22:	f000 f8cb 	bl	80030bc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002f26:	202a      	movs	r0, #42	; 0x2a
 8002f28:	f000 f8bb 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f000 f8c5 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f32:	2000      	movs	r0, #0
 8002f34:	f000 f8c2 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f000 f8bf 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002f3e:	20ef      	movs	r0, #239	; 0xef
 8002f40:	f000 f8bc 	bl	80030bc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002f44:	202b      	movs	r0, #43	; 0x2b
 8002f46:	f000 f8ac 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f000 f8b6 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f000 f8b3 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002f56:	2001      	movs	r0, #1
 8002f58:	f000 f8b0 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002f5c:	203f      	movs	r0, #63	; 0x3f
 8002f5e:	f000 f8ad 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002f62:	20f6      	movs	r0, #246	; 0xf6
 8002f64:	f000 f89d 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f000 f8a7 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f000 f8a4 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002f74:	2006      	movs	r0, #6
 8002f76:	f000 f8a1 	bl	80030bc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002f7a:	202c      	movs	r0, #44	; 0x2c
 8002f7c:	f000 f891 	bl	80030a2 <ili9341_WriteReg>
  LCD_Delay(200);
 8002f80:	20c8      	movs	r0, #200	; 0xc8
 8002f82:	f000 feef 	bl	8003d64 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002f86:	2026      	movs	r0, #38	; 0x26
 8002f88:	f000 f88b 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f000 f895 	bl	80030bc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002f92:	20e0      	movs	r0, #224	; 0xe0
 8002f94:	f000 f885 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002f98:	200f      	movs	r0, #15
 8002f9a:	f000 f88f 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002f9e:	2029      	movs	r0, #41	; 0x29
 8002fa0:	f000 f88c 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002fa4:	2024      	movs	r0, #36	; 0x24
 8002fa6:	f000 f889 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002faa:	200c      	movs	r0, #12
 8002fac:	f000 f886 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002fb0:	200e      	movs	r0, #14
 8002fb2:	f000 f883 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002fb6:	2009      	movs	r0, #9
 8002fb8:	f000 f880 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002fbc:	204e      	movs	r0, #78	; 0x4e
 8002fbe:	f000 f87d 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002fc2:	2078      	movs	r0, #120	; 0x78
 8002fc4:	f000 f87a 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002fc8:	203c      	movs	r0, #60	; 0x3c
 8002fca:	f000 f877 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002fce:	2009      	movs	r0, #9
 8002fd0:	f000 f874 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002fd4:	2013      	movs	r0, #19
 8002fd6:	f000 f871 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002fda:	2005      	movs	r0, #5
 8002fdc:	f000 f86e 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002fe0:	2017      	movs	r0, #23
 8002fe2:	f000 f86b 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002fe6:	2011      	movs	r0, #17
 8002fe8:	f000 f868 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f000 f865 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002ff2:	20e1      	movs	r0, #225	; 0xe1
 8002ff4:	f000 f855 	bl	80030a2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f000 f85f 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002ffe:	2016      	movs	r0, #22
 8003000:	f000 f85c 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003004:	201b      	movs	r0, #27
 8003006:	f000 f859 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800300a:	2004      	movs	r0, #4
 800300c:	f000 f856 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003010:	2011      	movs	r0, #17
 8003012:	f000 f853 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003016:	2007      	movs	r0, #7
 8003018:	f000 f850 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800301c:	2031      	movs	r0, #49	; 0x31
 800301e:	f000 f84d 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003022:	2033      	movs	r0, #51	; 0x33
 8003024:	f000 f84a 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003028:	2042      	movs	r0, #66	; 0x42
 800302a:	f000 f847 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800302e:	2005      	movs	r0, #5
 8003030:	f000 f844 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003034:	200c      	movs	r0, #12
 8003036:	f000 f841 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800303a:	200a      	movs	r0, #10
 800303c:	f000 f83e 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003040:	2028      	movs	r0, #40	; 0x28
 8003042:	f000 f83b 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003046:	202f      	movs	r0, #47	; 0x2f
 8003048:	f000 f838 	bl	80030bc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800304c:	200f      	movs	r0, #15
 800304e:	f000 f835 	bl	80030bc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003052:	2011      	movs	r0, #17
 8003054:	f000 f825 	bl	80030a2 <ili9341_WriteReg>
  LCD_Delay(200);
 8003058:	20c8      	movs	r0, #200	; 0xc8
 800305a:	f000 fe83 	bl	8003d64 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800305e:	2029      	movs	r0, #41	; 0x29
 8003060:	f000 f81f 	bl	80030a2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003064:	202c      	movs	r0, #44	; 0x2c
 8003066:	f000 f81c 	bl	80030a2 <ili9341_WriteReg>
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}

0800306e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003072:	f000 fd89 	bl	8003b88 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8003076:	2103      	movs	r1, #3
 8003078:	20d3      	movs	r0, #211	; 0xd3
 800307a:	f000 f82c 	bl	80030d6 <ili9341_ReadData>
 800307e:	4603      	mov	r3, r0
 8003080:	b29b      	uxth	r3, r3
}
 8003082:	4618      	mov	r0, r3
 8003084:	bd80      	pop	{r7, pc}

08003086 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800308a:	2029      	movs	r0, #41	; 0x29
 800308c:	f000 f809 	bl	80030a2 <ili9341_WriteReg>
}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}

08003094 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8003098:	2028      	movs	r0, #40	; 0x28
 800309a:	f000 f802 	bl	80030a2 <ili9341_WriteReg>
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fe04 	bl	8003cbc <LCD_IO_WriteReg>
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fdd5 	bl	8003c78 <LCD_IO_WriteData>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	460a      	mov	r2, r1
 80030e0:	80fb      	strh	r3, [r7, #6]
 80030e2:	4613      	mov	r3, r2
 80030e4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80030e6:	797a      	ldrb	r2, [r7, #5]
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fe07 	bl	8003d00 <LCD_IO_ReadData>
 80030f2:	4603      	mov	r3, r0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003100:	23f0      	movs	r3, #240	; 0xf0
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003110:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fa59 	bl	80035e4 <stmpe811_GetInstance>
 8003132:	4603      	mov	r3, r0
 8003134:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2bff      	cmp	r3, #255	; 0xff
 800313a:	d112      	bne.n	8003162 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800313c:	2000      	movs	r0, #0
 800313e:	f000 fa51 	bl	80035e4 <stmpe811_GetInstance>
 8003142:	4603      	mov	r3, r0
 8003144:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8003146:	7bbb      	ldrb	r3, [r7, #14]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d80a      	bhi.n	8003162 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800314c:	7bbb      	ldrb	r3, [r7, #14]
 800314e:	88fa      	ldrh	r2, [r7, #6]
 8003150:	b2d1      	uxtb	r1, r2
 8003152:	4a06      	ldr	r2, [pc, #24]	; (800316c <stmpe811_Init+0x4c>)
 8003154:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8003156:	f000 fe10 	bl	8003d7a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 f807 	bl	8003170 <stmpe811_Reset>
    }
  }
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000c7c 	.word	0x20000c7c

08003170 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2202      	movs	r2, #2
 8003180:	2103      	movs	r1, #3
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fe05 	bl	8003d92 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8003188:	200a      	movs	r0, #10
 800318a:	f000 fe3f 	bl	8003e0c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2200      	movs	r2, #0
 8003194:	2103      	movs	r1, #3
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fdfb 	bl	8003d92 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800319c:	2002      	movs	r0, #2
 800319e:	f000 fe35 	bl	8003e0c <IOE_Delay>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80031aa:	b590      	push	{r4, r7, lr}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80031b4:	f000 fde1 	bl	8003d7a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fdfa 	bl	8003db8 <IOE_Read>
 80031c4:	4603      	mov	r3, r0
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2101      	movs	r1, #1
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fdf1 	bl	8003db8 <IOE_Read>
 80031d6:	4603      	mov	r3, r0
 80031d8:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80031da:	4323      	orrs	r3, r4
 80031dc:	b21b      	sxth	r3, r3
 80031de:	b29b      	uxth	r3, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd90      	pop	{r4, r7, pc}

080031e8 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2109      	movs	r1, #9
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fddb 	bl	8003db8 <IOE_Read>
 8003202:	4603      	mov	r3, r0
 8003204:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	2109      	movs	r1, #9
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fdbb 	bl	8003d92 <IOE_Write>
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2109      	movs	r1, #9
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fdbd 	bl	8003db8 <IOE_Read>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	2109      	movs	r1, #9
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fd9d 	bl	8003d92 <IOE_Write>
    
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	460a      	mov	r2, r1
 800326a:	80fb      	strh	r3, [r7, #6]
 800326c:	4613      	mov	r3, r2
 800326e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	210a      	movs	r1, #10
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fd9c 	bl	8003db8 <IOE_Read>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	797b      	ldrb	r3, [r7, #5]
 8003288:	4313      	orrs	r3, r2
 800328a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	7bfa      	ldrb	r2, [r7, #15]
 8003292:	210a      	movs	r1, #10
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fd7c 	bl	8003d92 <IOE_Write>
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	460a      	mov	r2, r1
 80032ac:	80fb      	strh	r3, [r7, #6]
 80032ae:	4613      	mov	r3, r2
 80032b0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	210a      	movs	r1, #10
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fd7b 	bl	8003db8 <IOE_Read>
 80032c2:	4603      	mov	r3, r0
 80032c4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80032c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	b25a      	sxtb	r2, r3
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d2:	4013      	ands	r3, r2
 80032d4:	b25b      	sxtb	r3, r3
 80032d6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	210a      	movs	r1, #10
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fd56 	bl	8003d92 <IOE_Write>
}
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	4603      	mov	r3, r0
 80032f6:	460a      	mov	r2, r1
 80032f8:	80fb      	strh	r3, [r7, #6]
 80032fa:	4613      	mov	r3, r2
 80032fc:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	210b      	movs	r1, #11
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fd57 	bl	8003db8 <IOE_Read>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	797b      	ldrb	r3, [r7, #5]
 8003310:	4013      	ands	r3, r2
 8003312:	b2db      	uxtb	r3, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	460a      	mov	r2, r1
 8003326:	80fb      	strh	r3, [r7, #6]
 8003328:	4613      	mov	r3, r2
 800332a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	797a      	ldrb	r2, [r7, #5]
 8003332:	210b      	movs	r1, #11
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fd2c 	bl	8003d92 <IOE_Write>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	4603      	mov	r3, r0
 800334a:	6039      	str	r1, [r7, #0]
 800334c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2117      	movs	r1, #23
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fd2d 	bl	8003db8 <IOE_Read>
 800335e:	4603      	mov	r3, r0
 8003360:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	b25b      	sxtb	r3, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	b25a      	sxtb	r2, r3
 800336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336e:	4013      	ands	r3, r2
 8003370:	b25b      	sxtb	r3, r3
 8003372:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	2117      	movs	r1, #23
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fd08 	bl	8003d92 <IOE_Write>
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2104      	movs	r1, #4
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fd0c 	bl	8003db8 <IOE_Read>
 80033a0:	4603      	mov	r3, r0
 80033a2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	7bfa      	ldrb	r2, [r7, #15]
 80033b2:	2104      	movs	r1, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fcec 	bl	8003d92 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	21f0      	movs	r1, #240	; 0xf0
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ffbf 	bl	8003342 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	2104      	movs	r1, #4
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fcdc 	bl	8003d92 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2249      	movs	r2, #73	; 0x49
 80033e0:	2120      	movs	r1, #32
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fcd5 	bl	8003d92 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80033e8:	2002      	movs	r0, #2
 80033ea:	f000 fd0f 	bl	8003e0c <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2201      	movs	r2, #1
 80033f4:	2121      	movs	r1, #33	; 0x21
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fccb 	bl	8003d92 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	229a      	movs	r2, #154	; 0x9a
 8003402:	2141      	movs	r1, #65	; 0x41
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fcc4 	bl	8003d92 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2201      	movs	r2, #1
 8003410:	214a      	movs	r1, #74	; 0x4a
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fcbd 	bl	8003d92 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2201      	movs	r2, #1
 800341e:	214b      	movs	r1, #75	; 0x4b
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fcb6 	bl	8003d92 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2200      	movs	r2, #0
 800342c:	214b      	movs	r1, #75	; 0x4b
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fcaf 	bl	8003d92 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2201      	movs	r2, #1
 800343a:	2156      	movs	r1, #86	; 0x56
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fca8 	bl	8003d92 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2201      	movs	r2, #1
 8003448:	2158      	movs	r1, #88	; 0x58
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fca1 	bl	8003d92 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2201      	movs	r2, #1
 8003456:	2140      	movs	r1, #64	; 0x40
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fc9a 	bl	8003d92 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	22ff      	movs	r2, #255	; 0xff
 8003464:	210b      	movs	r1, #11
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fc93 	bl	8003d92 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 800346c:	2002      	movs	r0, #2
 800346e:	f000 fccd 	bl	8003e0c <IOE_Delay>
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2140      	movs	r1, #64	; 0x40
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fc92 	bl	8003db8 <IOE_Read>
 8003494:	4603      	mov	r3, r0
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b80      	cmp	r3, #128	; 0x80
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80034a6:	7bbb      	ldrb	r3, [r7, #14]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00b      	beq.n	80034c4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	214c      	movs	r1, #76	; 0x4c
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fc80 	bl	8003db8 <IOE_Read>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d010      	beq.n	80034e0 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e00d      	b.n	80034e0 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2201      	movs	r2, #1
 80034ca:	214b      	movs	r1, #75	; 0x4b
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fc60 	bl	8003d92 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2200      	movs	r2, #0
 80034d8:	214b      	movs	r1, #75	; 0x4b
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fc59 	bl	8003d92 <IOE_Write>
  }
  
  return ret;
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80034f8:	89fb      	ldrh	r3, [r7, #14]
 80034fa:	b2d8      	uxtb	r0, r3
 80034fc:	f107 0210 	add.w	r2, r7, #16
 8003500:	2304      	movs	r3, #4
 8003502:	21d7      	movs	r1, #215	; 0xd7
 8003504:	f000 fc6b 	bl	8003dde <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8003508:	7c3b      	ldrb	r3, [r7, #16]
 800350a:	061a      	lsls	r2, r3, #24
 800350c:	7c7b      	ldrb	r3, [r7, #17]
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	431a      	orrs	r2, r3
 8003512:	7cbb      	ldrb	r3, [r7, #18]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	4313      	orrs	r3, r2
 8003518:	7cfa      	ldrb	r2, [r7, #19]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	0d1b      	lsrs	r3, r3, #20
 8003522:	b29a      	uxth	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	b29b      	uxth	r3, r3
 800352e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003532:	b29a      	uxth	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003538:	89fb      	ldrh	r3, [r7, #14]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2201      	movs	r2, #1
 800353e:	214b      	movs	r1, #75	; 0x4b
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fc26 	bl	8003d92 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003546:	89fb      	ldrh	r3, [r7, #14]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2200      	movs	r2, #0
 800354c:	214b      	movs	r1, #75	; 0x4b
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fc1f 	bl	8003d92 <IOE_Write>
}
 8003554:	bf00      	nop
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8003566:	f000 fc0e 	bl	8003d86 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	211f      	movs	r1, #31
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fe76 	bl	8003260 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fe36 	bl	80031e8 <stmpe811_EnableGlobalIT>
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fe47 	bl	8003224 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	211f      	movs	r1, #31
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fe81 	bl	80032a2 <stmpe811_DisableITSource>
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	211f      	movs	r1, #31
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fe99 	bl	80032ee <stmpe811_ReadGITStatus>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	211f      	movs	r1, #31
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fea1 	bl	800331c <stmpe811_ClearGlobalIT>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	e00b      	b.n	8003610 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <stmpe811_GetInstance+0x40>)
 80035fc:	5cd3      	ldrb	r3, [r2, r3]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	429a      	cmp	r2, r3
 8003604:	d101      	bne.n	800360a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	e006      	b.n	8003618 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	3301      	adds	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d9f0      	bls.n	80035f8 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003616:	23ff      	movs	r3, #255	; 0xff
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	20000c7c 	.word	0x20000c7c

08003628 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10e      	bne.n	8003656 <BSP_LED_Init+0x2e>
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <BSP_LED_Init+0x9c>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	4a20      	ldr	r2, [pc, #128]	; (80036c4 <BSP_LED_Init+0x9c>)
 8003642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003646:	6313      	str	r3, [r2, #48]	; 0x30
 8003648:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <BSP_LED_Init+0x9c>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	e010      	b.n	8003678 <BSP_LED_Init+0x50>
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10d      	bne.n	8003678 <BSP_LED_Init+0x50>
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <BSP_LED_Init+0x9c>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <BSP_LED_Init+0x9c>)
 8003666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366a:	6313      	str	r3, [r2, #48]	; 0x30
 800366c:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <BSP_LED_Init+0x9c>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <BSP_LED_Init+0xa0>)
 800367c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003682:	2301      	movs	r3, #1
 8003684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003686:	2301      	movs	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800368a:	2302      	movs	r3, #2
 800368c:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <BSP_LED_Init+0xa4>)
 8003692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003696:	f107 0214 	add.w	r2, r7, #20
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f002 fbe9 	bl	8005e74 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	4a09      	ldr	r2, [pc, #36]	; (80036cc <BSP_LED_Init+0xa4>)
 80036a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <BSP_LED_Init+0xa0>)
 80036ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036b2:	2200      	movs	r2, #0
 80036b4:	4619      	mov	r1, r3
 80036b6:	f002 fd89 	bl	80061cc <HAL_GPIO_WritePin>
}
 80036ba:	bf00      	nop
 80036bc:	3728      	adds	r7, #40	; 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	0800a234 	.word	0x0800a234
 80036cc:	20000408 	.word	0x20000408

080036d0 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	4a07      	ldr	r2, [pc, #28]	; (80036fc <BSP_LED_On+0x2c>)
 80036de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	4a06      	ldr	r2, [pc, #24]	; (8003700 <BSP_LED_On+0x30>)
 80036e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036ea:	2201      	movs	r2, #1
 80036ec:	4619      	mov	r1, r3
 80036ee:	f002 fd6d 	bl	80061cc <HAL_GPIO_WritePin>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000408 	.word	0x20000408
 8003700:	0800a234 	.word	0x0800a234

08003704 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <BSP_LED_Toggle+0x2c>)
 8003712:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	4906      	ldr	r1, [pc, #24]	; (8003734 <BSP_LED_Toggle+0x30>)
 800371a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f002 fd6c 	bl	80061fe <HAL_GPIO_TogglePin>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000408 	.word	0x20000408
 8003734:	0800a234 	.word	0x0800a234

08003738 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a33      	ldr	r2, [pc, #204]	; (8003814 <I2Cx_MspInit+0xdc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d15f      	bne.n	800380a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	4b32      	ldr	r3, [pc, #200]	; (8003818 <I2Cx_MspInit+0xe0>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a31      	ldr	r2, [pc, #196]	; (8003818 <I2Cx_MspInit+0xe0>)
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <I2Cx_MspInit+0xe0>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <I2Cx_MspInit+0xe0>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <I2Cx_MspInit+0xe0>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b28      	ldr	r3, [pc, #160]	; (8003818 <I2Cx_MspInit+0xe0>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003788:	2312      	movs	r3, #18
 800378a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003790:	2302      	movs	r3, #2
 8003792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003794:	2304      	movs	r3, #4
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003798:	f107 0314 	add.w	r3, r7, #20
 800379c:	4619      	mov	r1, r3
 800379e:	481f      	ldr	r0, [pc, #124]	; (800381c <I2Cx_MspInit+0xe4>)
 80037a0:	f002 fb68 	bl	8005e74 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80037a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037a8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80037aa:	f107 0314 	add.w	r3, r7, #20
 80037ae:	4619      	mov	r1, r3
 80037b0:	481b      	ldr	r0, [pc, #108]	; (8003820 <I2Cx_MspInit+0xe8>)
 80037b2:	f002 fb5f 	bl	8005e74 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	4b17      	ldr	r3, [pc, #92]	; (8003818 <I2Cx_MspInit+0xe0>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	4a16      	ldr	r2, [pc, #88]	; (8003818 <I2Cx_MspInit+0xe0>)
 80037c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037c4:	6413      	str	r3, [r2, #64]	; 0x40
 80037c6:	4b14      	ldr	r3, [pc, #80]	; (8003818 <I2Cx_MspInit+0xe0>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <I2Cx_MspInit+0xe0>)
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	4a10      	ldr	r2, [pc, #64]	; (8003818 <I2Cx_MspInit+0xe0>)
 80037d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037dc:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <I2Cx_MspInit+0xe0>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4a0d      	ldr	r2, [pc, #52]	; (8003818 <I2Cx_MspInit+0xe0>)
 80037e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037e8:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80037ea:	2200      	movs	r2, #0
 80037ec:	210f      	movs	r1, #15
 80037ee:	2048      	movs	r0, #72	; 0x48
 80037f0:	f001 feb5 	bl	800555e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80037f4:	2048      	movs	r0, #72	; 0x48
 80037f6:	f001 fece 	bl	8005596 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	210f      	movs	r1, #15
 80037fe:	2049      	movs	r0, #73	; 0x49
 8003800:	f001 fead 	bl	800555e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8003804:	2049      	movs	r0, #73	; 0x49
 8003806:	f001 fec6 	bl	8005596 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800380a:	bf00      	nop
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40005c00 	.word	0x40005c00
 8003818:	40023800 	.word	0x40023800
 800381c:	40020000 	.word	0x40020000
 8003820:	40020800 	.word	0x40020800

08003824 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003828:	4814      	ldr	r0, [pc, #80]	; (800387c <I2Cx_Init+0x58>)
 800382a:	f003 f9ab 	bl	8006b84 <HAL_I2C_GetState>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d121      	bne.n	8003878 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <I2Cx_Init+0x58>)
 8003836:	4a12      	ldr	r2, [pc, #72]	; (8003880 <I2Cx_Init+0x5c>)
 8003838:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <I2Cx_Init+0x58>)
 800383c:	4a11      	ldr	r2, [pc, #68]	; (8003884 <I2Cx_Init+0x60>)
 800383e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <I2Cx_Init+0x58>)
 8003842:	2200      	movs	r2, #0
 8003844:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <I2Cx_Init+0x58>)
 8003848:	2200      	movs	r2, #0
 800384a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <I2Cx_Init+0x58>)
 800384e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003852:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <I2Cx_Init+0x58>)
 8003856:	2200      	movs	r2, #0
 8003858:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <I2Cx_Init+0x58>)
 800385c:	2200      	movs	r2, #0
 800385e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <I2Cx_Init+0x58>)
 8003862:	2200      	movs	r2, #0
 8003864:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <I2Cx_Init+0x58>)
 8003868:	2200      	movs	r2, #0
 800386a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800386c:	4803      	ldr	r0, [pc, #12]	; (800387c <I2Cx_Init+0x58>)
 800386e:	f7ff ff63 	bl	8003738 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003872:	4802      	ldr	r0, [pc, #8]	; (800387c <I2Cx_Init+0x58>)
 8003874:	f002 fcde 	bl	8006234 <HAL_I2C_Init>
  }
}
 8003878:	bf00      	nop
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000c80 	.word	0x20000c80
 8003880:	40005c00 	.word	0x40005c00
 8003884:	000186a0 	.word	0x000186a0

08003888 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <I2Cx_ITConfig+0x58>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4a12      	ldr	r2, [pc, #72]	; (80038e0 <I2Cx_ITConfig+0x58>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6313      	str	r3, [r2, #48]	; 0x30
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <I2Cx_ITConfig+0x58>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80038aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80038b0:	2301      	movs	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <I2Cx_ITConfig+0x5c>)
 80038ba:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80038bc:	1d3b      	adds	r3, r7, #4
 80038be:	4619      	mov	r1, r3
 80038c0:	4809      	ldr	r0, [pc, #36]	; (80038e8 <I2Cx_ITConfig+0x60>)
 80038c2:	f002 fad7 	bl	8005e74 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80038c6:	2200      	movs	r2, #0
 80038c8:	210f      	movs	r1, #15
 80038ca:	2028      	movs	r0, #40	; 0x28
 80038cc:	f001 fe47 	bl	800555e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80038d0:	2028      	movs	r0, #40	; 0x28
 80038d2:	f001 fe60 	bl	8005596 <HAL_NVIC_EnableIRQ>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	10210000 	.word	0x10210000
 80038e8:	40020000 	.word	0x40020000

080038ec <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af04      	add	r7, sp, #16
 80038f2:	4603      	mov	r3, r0
 80038f4:	71fb      	strb	r3, [r7, #7]
 80038f6:	460b      	mov	r3, r1
 80038f8:	71bb      	strb	r3, [r7, #6]
 80038fa:	4613      	mov	r3, r2
 80038fc:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	b299      	uxth	r1, r3
 8003906:	79bb      	ldrb	r3, [r7, #6]
 8003908:	b29a      	uxth	r2, r3
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <I2Cx_WriteData+0x4c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	9302      	str	r3, [sp, #8]
 8003910:	2301      	movs	r3, #1
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	1d7b      	adds	r3, r7, #5
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	2301      	movs	r3, #1
 800391a:	4808      	ldr	r0, [pc, #32]	; (800393c <I2Cx_WriteData+0x50>)
 800391c:	f002 fe12 	bl	8006544 <HAL_I2C_Mem_Write>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800392a:	f000 f863 	bl	80039f4 <I2Cx_Error>
  }        
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000410 	.word	0x20000410
 800393c:	20000c80 	.word	0x20000c80

08003940 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af04      	add	r7, sp, #16
 8003946:	4603      	mov	r3, r0
 8003948:	460a      	mov	r2, r1
 800394a:	71fb      	strb	r3, [r7, #7]
 800394c:	4613      	mov	r3, r2
 800394e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	b299      	uxth	r1, r3
 800395c:	79bb      	ldrb	r3, [r7, #6]
 800395e:	b29a      	uxth	r2, r3
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <I2Cx_ReadData+0x50>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	9302      	str	r3, [sp, #8]
 8003966:	2301      	movs	r3, #1
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	f107 030e 	add.w	r3, r7, #14
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2301      	movs	r3, #1
 8003972:	4808      	ldr	r0, [pc, #32]	; (8003994 <I2Cx_ReadData+0x54>)
 8003974:	f002 fee0 	bl	8006738 <HAL_I2C_Mem_Read>
 8003978:	4603      	mov	r3, r0
 800397a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003982:	f000 f837 	bl	80039f4 <I2Cx_Error>
  
  }
  return value;
 8003986:	7bbb      	ldrb	r3, [r7, #14]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000410 	.word	0x20000410
 8003994:	20000c80 	.word	0x20000c80

08003998 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af04      	add	r7, sp, #16
 800399e:	603a      	str	r2, [r7, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
 80039a6:	460b      	mov	r3, r1
 80039a8:	71bb      	strb	r3, [r7, #6]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	b299      	uxth	r1, r3
 80039b6:	79bb      	ldrb	r3, [r7, #6]
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <I2Cx_ReadBuffer+0x54>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	9302      	str	r3, [sp, #8]
 80039c0:	88bb      	ldrh	r3, [r7, #4]
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2301      	movs	r3, #1
 80039ca:	4809      	ldr	r0, [pc, #36]	; (80039f0 <I2Cx_ReadBuffer+0x58>)
 80039cc:	f002 feb4 	bl	8006738 <HAL_I2C_Mem_Read>
 80039d0:	4603      	mov	r3, r0
 80039d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	e002      	b.n	80039e4 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80039de:	f000 f809 	bl	80039f4 <I2Cx_Error>

    return 1;
 80039e2:	2301      	movs	r3, #1
  }
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000410 	.word	0x20000410
 80039f0:	20000c80 	.word	0x20000c80

080039f4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80039f8:	4803      	ldr	r0, [pc, #12]	; (8003a08 <I2Cx_Error+0x14>)
 80039fa:	f002 fd5f 	bl	80064bc <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80039fe:	f7ff ff11 	bl	8003824 <I2Cx_Init>
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000c80 	.word	0x20000c80

08003a0c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003a10:	4819      	ldr	r0, [pc, #100]	; (8003a78 <SPIx_Init+0x6c>)
 8003a12:	f005 fb44 	bl	800909e <HAL_SPI_GetState>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d12b      	bne.n	8003a74 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003a1c:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <SPIx_Init+0x6c>)
 8003a1e:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <SPIx_Init+0x70>)
 8003a20:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <SPIx_Init+0x6c>)
 8003a24:	2218      	movs	r2, #24
 8003a26:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003a28:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <SPIx_Init+0x6c>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <SPIx_Init+0x6c>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <SPIx_Init+0x6c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <SPIx_Init+0x6c>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003a40:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <SPIx_Init+0x6c>)
 8003a42:	2207      	movs	r2, #7
 8003a44:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <SPIx_Init+0x6c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <SPIx_Init+0x6c>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <SPIx_Init+0x6c>)
 8003a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a58:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <SPIx_Init+0x6c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <SPIx_Init+0x6c>)
 8003a62:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a66:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003a68:	4803      	ldr	r0, [pc, #12]	; (8003a78 <SPIx_Init+0x6c>)
 8003a6a:	f000 f853 	bl	8003b14 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003a6e:	4802      	ldr	r0, [pc, #8]	; (8003a78 <SPIx_Init+0x6c>)
 8003a70:	f004 fd8b 	bl	800858a <HAL_SPI_Init>
  } 
}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000cd4 	.word	0x20000cd4
 8003a7c:	40015000 	.word	0x40015000

08003a80 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <SPIx_Read+0x38>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f107 0108 	add.w	r1, r7, #8
 8003a9a:	4808      	ldr	r0, [pc, #32]	; (8003abc <SPIx_Read+0x3c>)
 8003a9c:	f004 ff72 	bl	8008984 <HAL_SPI_Receive>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003aaa:	f000 f827 	bl	8003afc <SPIx_Error>
  }
  
  return readvalue;
 8003aae:	68bb      	ldr	r3, [r7, #8]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000414 	.word	0x20000414
 8003abc:	20000cd4 	.word	0x20000cd4

08003ac0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <SPIx_Write+0x34>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	1db9      	adds	r1, r7, #6
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4808      	ldr	r0, [pc, #32]	; (8003af8 <SPIx_Write+0x38>)
 8003ad8:	f004 fdfe 	bl	80086d8 <HAL_SPI_Transmit>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003ae6:	f000 f809 	bl	8003afc <SPIx_Error>
  }
}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000414 	.word	0x20000414
 8003af8:	20000cd4 	.word	0x20000cd4

08003afc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003b00:	4803      	ldr	r0, [pc, #12]	; (8003b10 <SPIx_Error+0x14>)
 8003b02:	f004 fdad 	bl	8008660 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003b06:	f7ff ff81 	bl	8003a0c <SPIx_Init>
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000cd4 	.word	0x20000cd4

08003b14 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <SPIx_MspInit+0x6c>)
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <SPIx_MspInit+0x6c>)
 8003b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b2a:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <SPIx_MspInit+0x6c>)
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <SPIx_MspInit+0x6c>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <SPIx_MspInit+0x6c>)
 8003b42:	f043 0320 	orr.w	r3, r3, #32
 8003b46:	6313      	str	r3, [r2, #48]	; 0x30
 8003b48:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <SPIx_MspInit+0x6c>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003b54:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003b62:	2301      	movs	r3, #1
 8003b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003b66:	2305      	movs	r3, #5
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003b6a:	f107 0314 	add.w	r3, r7, #20
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4804      	ldr	r0, [pc, #16]	; (8003b84 <SPIx_MspInit+0x70>)
 8003b72:	f002 f97f 	bl	8005e74 <HAL_GPIO_Init>
}
 8003b76:	bf00      	nop
 8003b78:	3728      	adds	r7, #40	; 0x28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800
 8003b84:	40021400 	.word	0x40021400

08003b88 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003b8e:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <LCD_IO_Init+0xe0>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d164      	bne.n	8003c60 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003b96:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <LCD_IO_Init+0xe0>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <LCD_IO_Init+0xe4>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	4a31      	ldr	r2, [pc, #196]	; (8003c6c <LCD_IO_Init+0xe4>)
 8003ba6:	f043 0308 	orr.w	r3, r3, #8
 8003baa:	6313      	str	r3, [r2, #48]	; 0x30
 8003bac:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <LCD_IO_Init+0xe4>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003bca:	f107 030c 	add.w	r3, r7, #12
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4827      	ldr	r0, [pc, #156]	; (8003c70 <LCD_IO_Init+0xe8>)
 8003bd2:	f002 f94f 	bl	8005e74 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <LCD_IO_Init+0xe4>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	4a23      	ldr	r2, [pc, #140]	; (8003c6c <LCD_IO_Init+0xe4>)
 8003be0:	f043 0308 	orr.w	r3, r3, #8
 8003be4:	6313      	str	r3, [r2, #48]	; 0x30
 8003be6:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <LCD_IO_Init+0xe4>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003c00:	2302      	movs	r3, #2
 8003c02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003c04:	f107 030c 	add.w	r3, r7, #12
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4819      	ldr	r0, [pc, #100]	; (8003c70 <LCD_IO_Init+0xe8>)
 8003c0c:	f002 f932 	bl	8005e74 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003c10:	2300      	movs	r3, #0
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <LCD_IO_Init+0xe4>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <LCD_IO_Init+0xe4>)
 8003c1a:	f043 0304 	orr.w	r3, r3, #4
 8003c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c20:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <LCD_IO_Init+0xe4>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003c30:	2301      	movs	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4619      	mov	r1, r3
 8003c42:	480c      	ldr	r0, [pc, #48]	; (8003c74 <LCD_IO_Init+0xec>)
 8003c44:	f002 f916 	bl	8005e74 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2104      	movs	r1, #4
 8003c4c:	4809      	ldr	r0, [pc, #36]	; (8003c74 <LCD_IO_Init+0xec>)
 8003c4e:	f002 fabd 	bl	80061cc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003c52:	2201      	movs	r2, #1
 8003c54:	2104      	movs	r1, #4
 8003c56:	4807      	ldr	r0, [pc, #28]	; (8003c74 <LCD_IO_Init+0xec>)
 8003c58:	f002 fab8 	bl	80061cc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003c5c:	f7ff fed6 	bl	8003a0c <SPIx_Init>
  }
}
 8003c60:	bf00      	nop
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000d2c 	.word	0x20000d2c
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40020c00 	.word	0x40020c00
 8003c74:	40020800 	.word	0x40020800

08003c78 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003c82:	2201      	movs	r2, #1
 8003c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c88:	480a      	ldr	r0, [pc, #40]	; (8003cb4 <LCD_IO_WriteData+0x3c>)
 8003c8a:	f002 fa9f 	bl	80061cc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2104      	movs	r1, #4
 8003c92:	4809      	ldr	r0, [pc, #36]	; (8003cb8 <LCD_IO_WriteData+0x40>)
 8003c94:	f002 fa9a 	bl	80061cc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff ff10 	bl	8003ac0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	2104      	movs	r1, #4
 8003ca4:	4804      	ldr	r0, [pc, #16]	; (8003cb8 <LCD_IO_WriteData+0x40>)
 8003ca6:	f002 fa91 	bl	80061cc <HAL_GPIO_WritePin>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40020c00 	.word	0x40020c00
 8003cb8:	40020800 	.word	0x40020800

08003cbc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ccc:	480a      	ldr	r0, [pc, #40]	; (8003cf8 <LCD_IO_WriteReg+0x3c>)
 8003cce:	f002 fa7d 	bl	80061cc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2104      	movs	r1, #4
 8003cd6:	4809      	ldr	r0, [pc, #36]	; (8003cfc <LCD_IO_WriteReg+0x40>)
 8003cd8:	f002 fa78 	bl	80061cc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff feed 	bl	8003ac0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	2104      	movs	r1, #4
 8003cea:	4804      	ldr	r0, [pc, #16]	; (8003cfc <LCD_IO_WriteReg+0x40>)
 8003cec:	f002 fa6e 	bl	80061cc <HAL_GPIO_WritePin>
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40020c00 	.word	0x40020c00
 8003cfc:	40020800 	.word	0x40020800

08003d00 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	460a      	mov	r2, r1
 8003d0a:	80fb      	strh	r3, [r7, #6]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003d14:	2200      	movs	r2, #0
 8003d16:	2104      	movs	r1, #4
 8003d18:	4810      	ldr	r0, [pc, #64]	; (8003d5c <LCD_IO_ReadData+0x5c>)
 8003d1a:	f002 fa57 	bl	80061cc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d24:	480e      	ldr	r0, [pc, #56]	; (8003d60 <LCD_IO_ReadData+0x60>)
 8003d26:	f002 fa51 	bl	80061cc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fec7 	bl	8003ac0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003d32:	797b      	ldrb	r3, [r7, #5]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fea3 	bl	8003a80 <SPIx_Read>
 8003d3a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d42:	4807      	ldr	r0, [pc, #28]	; (8003d60 <LCD_IO_ReadData+0x60>)
 8003d44:	f002 fa42 	bl	80061cc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003d48:	2201      	movs	r2, #1
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	4803      	ldr	r0, [pc, #12]	; (8003d5c <LCD_IO_ReadData+0x5c>)
 8003d4e:	f002 fa3d 	bl	80061cc <HAL_GPIO_WritePin>
  
  return readvalue;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40020800 	.word	0x40020800
 8003d60:	40020c00 	.word	0x40020c00

08003d64 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f001 faf7 	bl	8005360 <HAL_Delay>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003d7e:	f7ff fd51 	bl	8003824 <I2Cx_Init>
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003d8a:	f7ff fd7d 	bl	8003888 <I2Cx_ITConfig>
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	71fb      	strb	r3, [r7, #7]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	71bb      	strb	r3, [r7, #6]
 8003da0:	4613      	mov	r3, r2
 8003da2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003da4:	797a      	ldrb	r2, [r7, #5]
 8003da6:	79b9      	ldrb	r1, [r7, #6]
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fd9e 	bl	80038ec <I2Cx_WriteData>
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	460a      	mov	r2, r1
 8003dc2:	71fb      	strb	r3, [r7, #7]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003dc8:	79ba      	ldrb	r2, [r7, #6]
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fdb6 	bl	8003940 <I2Cx_ReadData>
 8003dd4:	4603      	mov	r3, r0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	603a      	str	r2, [r7, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	4603      	mov	r3, r0
 8003dea:	71fb      	strb	r3, [r7, #7]
 8003dec:	460b      	mov	r3, r1
 8003dee:	71bb      	strb	r3, [r7, #6]
 8003df0:	4613      	mov	r3, r2
 8003df2:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003df4:	88bb      	ldrh	r3, [r7, #4]
 8003df6:	79b9      	ldrb	r1, [r7, #6]
 8003df8:	79f8      	ldrb	r0, [r7, #7]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	f7ff fdcc 	bl	8003998 <I2Cx_ReadBuffer>
 8003e00:	4603      	mov	r3, r0
 8003e02:	b29b      	uxth	r3, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f001 faa3 	bl	8005360 <HAL_Delay>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003e28:	4b2d      	ldr	r3, [pc, #180]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e2a:	4a2e      	ldr	r2, [pc, #184]	; (8003ee4 <BSP_LCD_Init+0xc0>)
 8003e2c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e30:	2209      	movs	r2, #9
 8003e32:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003e34:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003e3a:	4b29      	ldr	r3, [pc, #164]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e3c:	221d      	movs	r2, #29
 8003e3e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003e40:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e42:	2203      	movs	r2, #3
 8003e44:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003e46:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e48:	f240 120d 	movw	r2, #269	; 0x10d
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003e4e:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e50:	f240 1243 	movw	r2, #323	; 0x143
 8003e54:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e58:	f240 1217 	movw	r2, #279	; 0x117
 8003e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e60:	f240 1247 	movw	r2, #327	; 0x147
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003e66:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003e6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <BSP_LCD_Init+0xc4>)
 8003e80:	2208      	movs	r2, #8
 8003e82:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003e84:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <BSP_LCD_Init+0xc4>)
 8003e86:	22c0      	movs	r2, #192	; 0xc0
 8003e88:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003e8a:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <BSP_LCD_Init+0xc4>)
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003e90:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <BSP_LCD_Init+0xc4>)
 8003e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003e98:	4813      	ldr	r0, [pc, #76]	; (8003ee8 <BSP_LCD_Init+0xc4>)
 8003e9a:	f004 f92d 	bl	80080f8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003e9e:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003eb6:	f000 fd1d 	bl	80048f4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003eba:	4809      	ldr	r0, [pc, #36]	; (8003ee0 <BSP_LCD_Init+0xbc>)
 8003ebc:	f003 f9c8 	bl	8007250 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <BSP_LCD_Init+0xc8>)
 8003ec2:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <BSP_LCD_Init+0xcc>)
 8003ec4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <BSP_LCD_Init+0xc8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003ece:	f000 feff 	bl	8004cd0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003ed2:	4808      	ldr	r0, [pc, #32]	; (8003ef4 <BSP_LCD_Init+0xd0>)
 8003ed4:	f000 f8ce 	bl	8004074 <BSP_LCD_SetFont>

  return LCD_OK;
 8003ed8:	2300      	movs	r3, #0
}  
 8003eda:	4618      	mov	r0, r3
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000d30 	.word	0x20000d30
 8003ee4:	40016800 	.word	0x40016800
 8003ee8:	20000e18 	.word	0x20000e18
 8003eec:	20000e64 	.word	0x20000e64
 8003ef0:	200003a8 	.word	0x200003a8
 8003ef4:	20000418 	.word	0x20000418

08003ef8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <BSP_LCD_GetXSize+0x14>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	4798      	blx	r3
 8003f04:	4603      	mov	r3, r0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000e64 	.word	0x20000e64

08003f10 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003f14:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <BSP_LCD_GetYSize+0x14>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	4798      	blx	r3
 8003f1c:	4603      	mov	r3, r0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000e64 	.word	0x20000e64

08003f28 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b090      	sub	sp, #64	; 0x40
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	6039      	str	r1, [r7, #0]
 8003f32:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003f38:	f7ff ffde 	bl	8003ef8 <BSP_LCD_GetXSize>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003f44:	f7ff ffe4 	bl	8003f10 <BSP_LCD_GetYSize>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003f54:	23ff      	movs	r3, #255	; 0xff
 8003f56:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003f6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003f74:	2307      	movs	r3, #7
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003f78:	f7ff ffbe 	bl	8003ef8 <BSP_LCD_GetXSize>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003f80:	f7ff ffc6 	bl	8003f10 <BSP_LCD_GetYSize>
 8003f84:	4603      	mov	r3, r0
 8003f86:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	f107 030c 	add.w	r3, r7, #12
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4814      	ldr	r0, [pc, #80]	; (8003fe4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003f92:	f003 fa37 	bl	8007404 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	4913      	ldr	r1, [pc, #76]	; (8003fe8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003faa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	490e      	ldr	r1, [pc, #56]	; (8003fe8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	3308      	adds	r3, #8
 8003fbc:	4a0b      	ldr	r2, [pc, #44]	; (8003fec <BSP_LCD_LayerDefaultInit+0xc4>)
 8003fbe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	4909      	ldr	r1, [pc, #36]	; (8003fe8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003fd4:	4803      	ldr	r0, [pc, #12]	; (8003fe4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003fd6:	f003 fa53 	bl	8007480 <HAL_LTDC_EnableDither>
}
 8003fda:	bf00      	nop
 8003fdc:	3740      	adds	r7, #64	; 0x40
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000d30 	.word	0x20000d30
 8003fe8:	20000e4c 	.word	0x20000e4c
 8003fec:	20000418 	.word	0x20000418

08003ff0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <BSP_LCD_SelectLayer+0x1c>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6013      	str	r3, [r2, #0]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000e48 	.word	0x20000e48

08004010 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004018:	4b07      	ldr	r3, [pc, #28]	; (8004038 <BSP_LCD_SetTextColor+0x28>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4907      	ldr	r1, [pc, #28]	; (800403c <BSP_LCD_SetTextColor+0x2c>)
 800401e:	4613      	mov	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	601a      	str	r2, [r3, #0]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	20000e48 	.word	0x20000e48
 800403c:	20000e4c 	.word	0x20000e4c

08004040 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <BSP_LCD_SetBackColor+0x2c>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4908      	ldr	r1, [pc, #32]	; (8004070 <BSP_LCD_SetBackColor+0x30>)
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	3304      	adds	r3, #4
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	601a      	str	r2, [r3, #0]
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	20000e48 	.word	0x20000e48
 8004070:	20000e4c 	.word	0x20000e4c

08004074 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800407c:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <BSP_LCD_SetFont+0x2c>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4908      	ldr	r1, [pc, #32]	; (80040a4 <BSP_LCD_SetFont+0x30>)
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	3308      	adds	r3, #8
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	601a      	str	r2, [r3, #0]
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000e48 	.word	0x20000e48
 80040a4:	20000e4c 	.word	0x20000e4c

080040a8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80040a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80040b0:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <BSP_LCD_Clear+0x48>)
 80040b2:	681c      	ldr	r4, [r3, #0]
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <BSP_LCD_Clear+0x48>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <BSP_LCD_Clear+0x4c>)
 80040ba:	2134      	movs	r1, #52	; 0x34
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	335c      	adds	r3, #92	; 0x5c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461e      	mov	r6, r3
 80040c8:	f7ff ff16 	bl	8003ef8 <BSP_LCD_GetXSize>
 80040cc:	4605      	mov	r5, r0
 80040ce:	f7ff ff1f 	bl	8003f10 <BSP_LCD_GetYSize>
 80040d2:	4602      	mov	r2, r0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	2300      	movs	r3, #0
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	462a      	mov	r2, r5
 80040e0:	4631      	mov	r1, r6
 80040e2:	4620      	mov	r0, r4
 80040e4:	f000 fdbc 	bl	8004c60 <FillBuffer>
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f0:	20000e48 	.word	0x20000e48
 80040f4:	20000d30 	.word	0x20000d30

080040f8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80040f8:	b590      	push	{r4, r7, lr}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	80fb      	strh	r3, [r7, #6]
 8004102:	460b      	mov	r3, r1
 8004104:	80bb      	strh	r3, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800410a:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <BSP_LCD_DisplayChar+0x80>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	491b      	ldr	r1, [pc, #108]	; (800417c <BSP_LCD_DisplayChar+0x84>)
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	3308      	adds	r3, #8
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <BSP_LCD_DisplayChar+0x80>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4c14      	ldr	r4, [pc, #80]	; (800417c <BSP_LCD_DisplayChar+0x84>)
 800412c:	4613      	mov	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4423      	add	r3, r4
 8004136:	3308      	adds	r3, #8
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800413c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <BSP_LCD_DisplayChar+0x80>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4c0d      	ldr	r4, [pc, #52]	; (800417c <BSP_LCD_DisplayChar+0x84>)
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4423      	add	r3, r4
 8004150:	3308      	adds	r3, #8
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	889b      	ldrh	r3, [r3, #4]
 8004156:	3307      	adds	r3, #7
 8004158:	2b00      	cmp	r3, #0
 800415a:	da00      	bge.n	800415e <BSP_LCD_DisplayChar+0x66>
 800415c:	3307      	adds	r3, #7
 800415e:	10db      	asrs	r3, r3, #3
 8004160:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004164:	18ca      	adds	r2, r1, r3
 8004166:	88b9      	ldrh	r1, [r7, #4]
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fcbe 	bl	8004aec <DrawChar>
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	bd90      	pop	{r4, r7, pc}
 8004178:	20000e48 	.word	0x20000e48
 800417c:	20000e4c 	.word	0x20000e4c

08004180 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8004180:	b5b0      	push	{r4, r5, r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	60ba      	str	r2, [r7, #8]
 8004188:	461a      	mov	r2, r3
 800418a:	4603      	mov	r3, r0
 800418c:	81fb      	strh	r3, [r7, #14]
 800418e:	460b      	mov	r3, r1
 8004190:	81bb      	strh	r3, [r7, #12]
 8004192:	4613      	mov	r3, r2
 8004194:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8004196:	2301      	movs	r3, #1
 8004198:	83fb      	strh	r3, [r7, #30]
 800419a:	2300      	movs	r3, #0
 800419c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80041aa:	e002      	b.n	80041b2 <BSP_LCD_DisplayStringAt+0x32>
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	3301      	adds	r3, #1
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	617a      	str	r2, [r7, #20]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f6      	bne.n	80041ac <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80041be:	f7ff fe9b 	bl	8003ef8 <BSP_LCD_GetXSize>
 80041c2:	4601      	mov	r1, r0
 80041c4:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <BSP_LCD_DisplayStringAt+0x174>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	484b      	ldr	r0, [pc, #300]	; (80042f8 <BSP_LCD_DisplayStringAt+0x178>)
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4403      	add	r3, r0
 80041d4:	3308      	adds	r3, #8
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	889b      	ldrh	r3, [r3, #4]
 80041da:	fbb1 f3f3 	udiv	r3, r1, r3
 80041de:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d01c      	beq.n	8004220 <BSP_LCD_DisplayStringAt+0xa0>
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	dc33      	bgt.n	8004252 <BSP_LCD_DisplayStringAt+0xd2>
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d002      	beq.n	80041f4 <BSP_LCD_DisplayStringAt+0x74>
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d019      	beq.n	8004226 <BSP_LCD_DisplayStringAt+0xa6>
 80041f2:	e02e      	b.n	8004252 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	1ad1      	subs	r1, r2, r3
 80041fa:	4b3e      	ldr	r3, [pc, #248]	; (80042f4 <BSP_LCD_DisplayStringAt+0x174>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	483e      	ldr	r0, [pc, #248]	; (80042f8 <BSP_LCD_DisplayStringAt+0x178>)
 8004200:	4613      	mov	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4403      	add	r3, r0
 800420a:	3308      	adds	r3, #8
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	889b      	ldrh	r3, [r3, #4]
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	89fb      	ldrh	r3, [r7, #14]
 800421a:	4413      	add	r3, r2
 800421c:	83fb      	strh	r3, [r7, #30]
      break;
 800421e:	e01b      	b.n	8004258 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8004220:	89fb      	ldrh	r3, [r7, #14]
 8004222:	83fb      	strh	r3, [r7, #30]
      break;
 8004224:	e018      	b.n	8004258 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	b299      	uxth	r1, r3
 800422e:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <BSP_LCD_DisplayStringAt+0x174>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4831      	ldr	r0, [pc, #196]	; (80042f8 <BSP_LCD_DisplayStringAt+0x178>)
 8004234:	4613      	mov	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4403      	add	r3, r0
 800423e:	3308      	adds	r3, #8
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	889b      	ldrh	r3, [r3, #4]
 8004244:	fb11 f303 	smulbb	r3, r1, r3
 8004248:	b29a      	uxth	r2, r3
 800424a:	89fb      	ldrh	r3, [r7, #14]
 800424c:	4413      	add	r3, r2
 800424e:	83fb      	strh	r3, [r7, #30]
      break;
 8004250:	e002      	b.n	8004258 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8004252:	89fb      	ldrh	r3, [r7, #14]
 8004254:	83fb      	strh	r3, [r7, #30]
      break;
 8004256:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004258:	e01a      	b.n	8004290 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	89b9      	ldrh	r1, [r7, #12]
 8004260:	8bfb      	ldrh	r3, [r7, #30]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ff48 	bl	80040f8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8004268:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <BSP_LCD_DisplayStringAt+0x174>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4922      	ldr	r1, [pc, #136]	; (80042f8 <BSP_LCD_DisplayStringAt+0x178>)
 800426e:	4613      	mov	r3, r2
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	3308      	adds	r3, #8
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	889a      	ldrh	r2, [r3, #4]
 800427e:	8bfb      	ldrh	r3, [r7, #30]
 8004280:	4413      	add	r3, r2
 8004282:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3301      	adds	r3, #1
 8004288:	60bb      	str	r3, [r7, #8]
    i++;
 800428a:	8bbb      	ldrh	r3, [r7, #28]
 800428c:	3301      	adds	r3, #1
 800428e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2dc      	uxtb	r4, r3
 800429e:	f7ff fe2b 	bl	8003ef8 <BSP_LCD_GetXSize>
 80042a2:	8bb9      	ldrh	r1, [r7, #28]
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <BSP_LCD_DisplayStringAt+0x174>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4d13      	ldr	r5, [pc, #76]	; (80042f8 <BSP_LCD_DisplayStringAt+0x178>)
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	442b      	add	r3, r5
 80042b4:	3308      	adds	r3, #8
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	889b      	ldrh	r3, [r3, #4]
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	1ac3      	subs	r3, r0, r3
 80042c0:	b299      	uxth	r1, r3
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <BSP_LCD_DisplayStringAt+0x174>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	480c      	ldr	r0, [pc, #48]	; (80042f8 <BSP_LCD_DisplayStringAt+0x178>)
 80042c8:	4613      	mov	r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4403      	add	r3, r0
 80042d2:	3308      	adds	r3, #8
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	889b      	ldrh	r3, [r3, #4]
 80042d8:	4299      	cmp	r1, r3
 80042da:	bf2c      	ite	cs
 80042dc:	2301      	movcs	r3, #1
 80042de:	2300      	movcc	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	4023      	ands	r3, r4
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1b7      	bne.n	800425a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bdb0      	pop	{r4, r5, r7, pc}
 80042f4:	20000e48 	.word	0x20000e48
 80042f8:	20000e4c 	.word	0x20000e4c

080042fc <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80042fc:	b5b0      	push	{r4, r5, r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af02      	add	r7, sp, #8
 8004302:	4603      	mov	r3, r0
 8004304:	80fb      	strh	r3, [r7, #6]
 8004306:	460b      	mov	r3, r1
 8004308:	80bb      	strh	r3, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004312:	4b16      	ldr	r3, [pc, #88]	; (800436c <BSP_LCD_DrawHLine+0x70>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a16      	ldr	r2, [pc, #88]	; (8004370 <BSP_LCD_DrawHLine+0x74>)
 8004318:	2134      	movs	r1, #52	; 0x34
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	335c      	adds	r3, #92	; 0x5c
 8004322:	681c      	ldr	r4, [r3, #0]
 8004324:	f7ff fde8 	bl	8003ef8 <BSP_LCD_GetXSize>
 8004328:	4602      	mov	r2, r0
 800432a:	88bb      	ldrh	r3, [r7, #4]
 800432c:	fb03 f202 	mul.w	r2, r3, r2
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4423      	add	r3, r4
 8004338:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800433a:	4b0c      	ldr	r3, [pc, #48]	; (800436c <BSP_LCD_DrawHLine+0x70>)
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	68f9      	ldr	r1, [r7, #12]
 8004340:	887c      	ldrh	r4, [r7, #2]
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <BSP_LCD_DrawHLine+0x70>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4d0b      	ldr	r5, [pc, #44]	; (8004374 <BSP_LCD_DrawHLine+0x78>)
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	442b      	add	r3, r5
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	2300      	movs	r3, #0
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	2301      	movs	r3, #1
 800435c:	4622      	mov	r2, r4
 800435e:	f000 fc7f 	bl	8004c60 <FillBuffer>
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bdb0      	pop	{r4, r5, r7, pc}
 800436a:	bf00      	nop
 800436c:	20000e48 	.word	0x20000e48
 8004370:	20000d30 	.word	0x20000d30
 8004374:	20000e4c 	.word	0x20000e4c

08004378 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b08b      	sub	sp, #44	; 0x2c
 800437c:	af00      	add	r7, sp, #0
 800437e:	4604      	mov	r4, r0
 8004380:	4608      	mov	r0, r1
 8004382:	4611      	mov	r1, r2
 8004384:	461a      	mov	r2, r3
 8004386:	4623      	mov	r3, r4
 8004388:	80fb      	strh	r3, [r7, #6]
 800438a:	4603      	mov	r3, r0
 800438c:	80bb      	strh	r3, [r7, #4]
 800438e:	460b      	mov	r3, r1
 8004390:	807b      	strh	r3, [r7, #2]
 8004392:	4613      	mov	r3, r2
 8004394:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8004396:	2300      	movs	r3, #0
 8004398:	823b      	strh	r3, [r7, #16]
 800439a:	2300      	movs	r3, #0
 800439c:	81fb      	strh	r3, [r7, #14]
 800439e:	2300      	movs	r3, #0
 80043a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043a2:	2300      	movs	r3, #0
 80043a4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80043a6:	2300      	movs	r3, #0
 80043a8:	847b      	strh	r3, [r7, #34]	; 0x22
 80043aa:	2300      	movs	r3, #0
 80043ac:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80043ae:	2300      	movs	r3, #0
 80043b0:	83fb      	strh	r3, [r7, #30]
 80043b2:	2300      	movs	r3, #0
 80043b4:	83bb      	strh	r3, [r7, #28]
 80043b6:	2300      	movs	r3, #0
 80043b8:	837b      	strh	r3, [r7, #26]
 80043ba:	2300      	movs	r3, #0
 80043bc:	833b      	strh	r3, [r7, #24]
 80043be:	2300      	movs	r3, #0
 80043c0:	82fb      	strh	r3, [r7, #22]
 80043c2:	2300      	movs	r3, #0
 80043c4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80043ca:	887a      	ldrh	r2, [r7, #2]
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bfb8      	it	lt
 80043d4:	425b      	neglt	r3, r3
 80043d6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80043d8:	883a      	ldrh	r2, [r7, #0]
 80043da:	88bb      	ldrh	r3, [r7, #4]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bfb8      	it	lt
 80043e2:	425b      	neglt	r3, r3
 80043e4:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 80043ea:	88bb      	ldrh	r3, [r7, #4]
 80043ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d304      	bcc.n	8004400 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80043f6:	2301      	movs	r3, #1
 80043f8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	843b      	strh	r3, [r7, #32]
 80043fe:	e005      	b.n	800440c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8004400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004404:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8004406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800440a:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 800440c:	883a      	ldrh	r2, [r7, #0]
 800440e:	88bb      	ldrh	r3, [r7, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	d304      	bcc.n	800441e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8004414:	2301      	movs	r3, #1
 8004416:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8004418:	2301      	movs	r3, #1
 800441a:	83bb      	strh	r3, [r7, #28]
 800441c:	e005      	b.n	800442a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800441e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004422:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8004424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004428:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800442a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800442e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004432:	429a      	cmp	r2, r3
 8004434:	db10      	blt.n	8004458 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8004436:	2300      	movs	r3, #0
 8004438:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800443a:	2300      	movs	r3, #0
 800443c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800443e:	8a3b      	ldrh	r3, [r7, #16]
 8004440:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8004442:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004446:	0fda      	lsrs	r2, r3, #31
 8004448:	4413      	add	r3, r2
 800444a:	105b      	asrs	r3, r3, #1
 800444c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800444e:	89fb      	ldrh	r3, [r7, #14]
 8004450:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8004452:	8a3b      	ldrh	r3, [r7, #16]
 8004454:	82bb      	strh	r3, [r7, #20]
 8004456:	e00f      	b.n	8004478 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8004458:	2300      	movs	r3, #0
 800445a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800445c:	2300      	movs	r3, #0
 800445e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8004460:	89fb      	ldrh	r3, [r7, #14]
 8004462:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8004464:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004468:	0fda      	lsrs	r2, r3, #31
 800446a:	4413      	add	r3, r2
 800446c:	105b      	asrs	r3, r3, #1
 800446e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8004470:	8a3b      	ldrh	r3, [r7, #16]
 8004472:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8004474:	89fb      	ldrh	r3, [r7, #14]
 8004476:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004478:	2300      	movs	r3, #0
 800447a:	827b      	strh	r3, [r7, #18]
 800447c:	e037      	b.n	80044ee <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800447e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004480:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004482:	4b20      	ldr	r3, [pc, #128]	; (8004504 <BSP_LCD_DrawLine+0x18c>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4c20      	ldr	r4, [pc, #128]	; (8004508 <BSP_LCD_DrawLine+0x190>)
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4423      	add	r3, r4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	f000 fb03 	bl	8004aa0 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800449a:	8b3a      	ldrh	r2, [r7, #24]
 800449c:	8afb      	ldrh	r3, [r7, #22]
 800449e:	4413      	add	r3, r2
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 80044a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80044a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	db0e      	blt.n	80044ce <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 80044b0:	8b3a      	ldrh	r2, [r7, #24]
 80044b2:	8b7b      	ldrh	r3, [r7, #26]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 80044ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80044bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044be:	4413      	add	r3, r2
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80044c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044c6:	8bfb      	ldrh	r3, [r7, #30]
 80044c8:	4413      	add	r3, r2
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80044ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80044d0:	8c3b      	ldrh	r3, [r7, #32]
 80044d2:	4413      	add	r3, r2
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80044d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044da:	8bbb      	ldrh	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	b29b      	uxth	r3, r3
 80044e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80044e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3301      	adds	r3, #1
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	827b      	strh	r3, [r7, #18]
 80044ee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80044f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	ddc1      	ble.n	800447e <BSP_LCD_DrawLine+0x106>
  }
}
 80044fa:	bf00      	nop
 80044fc:	bf00      	nop
 80044fe:	372c      	adds	r7, #44	; 0x2c
 8004500:	46bd      	mov	sp, r7
 8004502:	bd90      	pop	{r4, r7, pc}
 8004504:	20000e48 	.word	0x20000e48
 8004508:	20000e4c 	.word	0x20000e4c

0800450c <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	80fb      	strh	r3, [r7, #6]
 8004516:	460b      	mov	r3, r1
 8004518:	80bb      	strh	r3, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800451e:	887b      	ldrh	r3, [r7, #2]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	f1c3 0303 	rsb	r3, r3, #3
 8004526:	617b      	str	r3, [r7, #20]
  curx = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800452c:	887b      	ldrh	r3, [r7, #2]
 800452e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8004530:	e0c7      	b.n	80046c2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	b29a      	uxth	r2, r3
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	4413      	add	r3, r2
 800453a:	b298      	uxth	r0, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	b29b      	uxth	r3, r3
 8004540:	88ba      	ldrh	r2, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	b299      	uxth	r1, r3
 8004546:	4b64      	ldr	r3, [pc, #400]	; (80046d8 <BSP_LCD_DrawCircle+0x1cc>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4c64      	ldr	r4, [pc, #400]	; (80046dc <BSP_LCD_DrawCircle+0x1d0>)
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4423      	add	r3, r4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	f000 faa1 	bl	8004aa0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	b29b      	uxth	r3, r3
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	b298      	uxth	r0, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	b29b      	uxth	r3, r3
 800456c:	88ba      	ldrh	r2, [r7, #4]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	b299      	uxth	r1, r3
 8004572:	4b59      	ldr	r3, [pc, #356]	; (80046d8 <BSP_LCD_DrawCircle+0x1cc>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4c59      	ldr	r4, [pc, #356]	; (80046dc <BSP_LCD_DrawCircle+0x1d0>)
 8004578:	4613      	mov	r3, r2
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4423      	add	r3, r4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	f000 fa8b 	bl	8004aa0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	b29a      	uxth	r2, r3
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	4413      	add	r3, r2
 8004592:	b298      	uxth	r0, r3
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	b29b      	uxth	r3, r3
 8004598:	88ba      	ldrh	r2, [r7, #4]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	b299      	uxth	r1, r3
 800459e:	4b4e      	ldr	r3, [pc, #312]	; (80046d8 <BSP_LCD_DrawCircle+0x1cc>)
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4c4e      	ldr	r4, [pc, #312]	; (80046dc <BSP_LCD_DrawCircle+0x1d0>)
 80045a4:	4613      	mov	r3, r2
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4423      	add	r3, r4
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	f000 fa75 	bl	8004aa0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	b298      	uxth	r0, r3
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	88ba      	ldrh	r2, [r7, #4]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	b299      	uxth	r1, r3
 80045ca:	4b43      	ldr	r3, [pc, #268]	; (80046d8 <BSP_LCD_DrawCircle+0x1cc>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4c43      	ldr	r4, [pc, #268]	; (80046dc <BSP_LCD_DrawCircle+0x1d0>)
 80045d0:	4613      	mov	r3, r2
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4423      	add	r3, r4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	f000 fa5f 	bl	8004aa0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	4413      	add	r3, r2
 80045ea:	b298      	uxth	r0, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	88bb      	ldrh	r3, [r7, #4]
 80045f2:	4413      	add	r3, r2
 80045f4:	b299      	uxth	r1, r3
 80045f6:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <BSP_LCD_DrawCircle+0x1cc>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4c38      	ldr	r4, [pc, #224]	; (80046dc <BSP_LCD_DrawCircle+0x1d0>)
 80045fc:	4613      	mov	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4423      	add	r3, r4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	f000 fa49 	bl	8004aa0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	b29b      	uxth	r3, r3
 8004612:	88fa      	ldrh	r2, [r7, #6]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	b298      	uxth	r0, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	b29a      	uxth	r2, r3
 800461c:	88bb      	ldrh	r3, [r7, #4]
 800461e:	4413      	add	r3, r2
 8004620:	b299      	uxth	r1, r3
 8004622:	4b2d      	ldr	r3, [pc, #180]	; (80046d8 <BSP_LCD_DrawCircle+0x1cc>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4c2d      	ldr	r4, [pc, #180]	; (80046dc <BSP_LCD_DrawCircle+0x1d0>)
 8004628:	4613      	mov	r3, r2
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4423      	add	r3, r4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	f000 fa33 	bl	8004aa0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	b29a      	uxth	r2, r3
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	4413      	add	r3, r2
 8004642:	b298      	uxth	r0, r3
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	b29a      	uxth	r2, r3
 8004648:	88bb      	ldrh	r3, [r7, #4]
 800464a:	4413      	add	r3, r2
 800464c:	b299      	uxth	r1, r3
 800464e:	4b22      	ldr	r3, [pc, #136]	; (80046d8 <BSP_LCD_DrawCircle+0x1cc>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4c22      	ldr	r4, [pc, #136]	; (80046dc <BSP_LCD_DrawCircle+0x1d0>)
 8004654:	4613      	mov	r3, r2
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4423      	add	r3, r4
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	f000 fa1d 	bl	8004aa0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	b29b      	uxth	r3, r3
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	b298      	uxth	r0, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	b29a      	uxth	r2, r3
 8004674:	88bb      	ldrh	r3, [r7, #4]
 8004676:	4413      	add	r3, r2
 8004678:	b299      	uxth	r1, r3
 800467a:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <BSP_LCD_DrawCircle+0x1cc>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4c17      	ldr	r4, [pc, #92]	; (80046dc <BSP_LCD_DrawCircle+0x1d0>)
 8004680:	4613      	mov	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4423      	add	r3, r4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	f000 fa07 	bl	8004aa0 <BSP_LCD_DrawPixel>

    if (d < 0)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	da06      	bge.n	80046a6 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	009a      	lsls	r2, r3, #2
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4413      	add	r3, r2
 80046a0:	3306      	adds	r3, #6
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e00a      	b.n	80046bc <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	009a      	lsls	r2, r3, #2
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	4413      	add	r3, r2
 80046b2:	330a      	adds	r3, #10
 80046b4:	617b      	str	r3, [r7, #20]
      cury--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	3301      	adds	r3, #1
 80046c0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	f67f af33 	bls.w	8004532 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd90      	pop	{r4, r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000e48 	.word	0x20000e48
 80046dc:	20000e4c 	.word	0x20000e4c

080046e0 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80046e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e4:	b086      	sub	sp, #24
 80046e6:	af02      	add	r7, sp, #8
 80046e8:	4604      	mov	r4, r0
 80046ea:	4608      	mov	r0, r1
 80046ec:	4611      	mov	r1, r2
 80046ee:	461a      	mov	r2, r3
 80046f0:	4623      	mov	r3, r4
 80046f2:	80fb      	strh	r3, [r7, #6]
 80046f4:	4603      	mov	r3, r0
 80046f6:	80bb      	strh	r3, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	807b      	strh	r3, [r7, #2]
 80046fc:	4613      	mov	r3, r2
 80046fe:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004704:	4b20      	ldr	r3, [pc, #128]	; (8004788 <BSP_LCD_FillRect+0xa8>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4920      	ldr	r1, [pc, #128]	; (800478c <BSP_LCD_FillRect+0xac>)
 800470a:	4613      	mov	r3, r2
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fc7a 	bl	8004010 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <BSP_LCD_FillRect+0xa8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <BSP_LCD_FillRect+0xb0>)
 8004722:	2134      	movs	r1, #52	; 0x34
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	4413      	add	r3, r2
 800472a:	335c      	adds	r3, #92	; 0x5c
 800472c:	681c      	ldr	r4, [r3, #0]
 800472e:	f7ff fbe3 	bl	8003ef8 <BSP_LCD_GetXSize>
 8004732:	4602      	mov	r2, r0
 8004734:	88bb      	ldrh	r3, [r7, #4]
 8004736:	fb03 f202 	mul.w	r2, r3, r2
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4423      	add	r3, r4
 8004742:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004744:	4b10      	ldr	r3, [pc, #64]	; (8004788 <BSP_LCD_FillRect+0xa8>)
 8004746:	681c      	ldr	r4, [r3, #0]
 8004748:	68fd      	ldr	r5, [r7, #12]
 800474a:	887e      	ldrh	r6, [r7, #2]
 800474c:	f8b7 8000 	ldrh.w	r8, [r7]
 8004750:	f7ff fbd2 	bl	8003ef8 <BSP_LCD_GetXSize>
 8004754:	4602      	mov	r2, r0
 8004756:	887b      	ldrh	r3, [r7, #2]
 8004758:	1ad1      	subs	r1, r2, r3
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <BSP_LCD_FillRect+0xa8>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	480b      	ldr	r0, [pc, #44]	; (800478c <BSP_LCD_FillRect+0xac>)
 8004760:	4613      	mov	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4403      	add	r3, r0
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	9100      	str	r1, [sp, #0]
 8004770:	4643      	mov	r3, r8
 8004772:	4632      	mov	r2, r6
 8004774:	4629      	mov	r1, r5
 8004776:	4620      	mov	r0, r4
 8004778:	f000 fa72 	bl	8004c60 <FillBuffer>
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004786:	bf00      	nop
 8004788:	20000e48 	.word	0x20000e48
 800478c:	20000e4c 	.word	0x20000e4c
 8004790:	20000d30 	.word	0x20000d30

08004794 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	80fb      	strh	r3, [r7, #6]
 800479e:	460b      	mov	r3, r1
 80047a0:	80bb      	strh	r3, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80047a6:	887b      	ldrh	r3, [r7, #2]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	f1c3 0303 	rsb	r3, r3, #3
 80047ae:	617b      	str	r3, [r7, #20]

  curx = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80047b4:	887b      	ldrh	r3, [r7, #2]
 80047b6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80047b8:	4b44      	ldr	r3, [pc, #272]	; (80048cc <BSP_LCD_FillCircle+0x138>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4944      	ldr	r1, [pc, #272]	; (80048d0 <BSP_LCD_FillCircle+0x13c>)
 80047be:	4613      	mov	r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fc20 	bl	8004010 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80047d0:	e061      	b.n	8004896 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d021      	beq.n	800481c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	b298      	uxth	r0, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	88bb      	ldrh	r3, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	b299      	uxth	r1, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	f7ff fd81 	bl	80042fc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	b298      	uxth	r0, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	b29b      	uxth	r3, r3
 8004808:	88ba      	ldrh	r2, [r7, #4]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	b299      	uxth	r1, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	b29b      	uxth	r3, r3
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	f7ff fd70 	bl	80042fc <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d021      	beq.n	8004866 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	b29b      	uxth	r3, r3
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	b298      	uxth	r0, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	b29b      	uxth	r3, r3
 8004830:	88ba      	ldrh	r2, [r7, #4]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	b299      	uxth	r1, r3
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	b29b      	uxth	r3, r3
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	b29b      	uxth	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	f7ff fd5c 	bl	80042fc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	b29b      	uxth	r3, r3
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	b298      	uxth	r0, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	b29a      	uxth	r2, r3
 8004852:	88bb      	ldrh	r3, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	b299      	uxth	r1, r3
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	b29b      	uxth	r3, r3
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	b29b      	uxth	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	f7ff fd4b 	bl	80042fc <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	da06      	bge.n	800487a <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	009a      	lsls	r2, r3, #2
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	4413      	add	r3, r2
 8004874:	3306      	adds	r3, #6
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e00a      	b.n	8004890 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	009a      	lsls	r2, r3, #2
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	4413      	add	r3, r2
 8004886:	330a      	adds	r3, #10
 8004888:	617b      	str	r3, [r7, #20]
      cury--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3b01      	subs	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	3301      	adds	r3, #1
 8004894:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	429a      	cmp	r2, r3
 800489c:	d999      	bls.n	80047d2 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <BSP_LCD_FillCircle+0x138>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	490b      	ldr	r1, [pc, #44]	; (80048d0 <BSP_LCD_FillCircle+0x13c>)
 80048a4:	4613      	mov	r3, r2
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fbad 	bl	8004010 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	88b9      	ldrh	r1, [r7, #4]
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fe25 	bl	800450c <BSP_LCD_DrawCircle>
}
 80048c2:	bf00      	nop
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000e48 	.word	0x20000e48
 80048d0:	20000e4c 	.word	0x20000e4c

080048d4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <BSP_LCD_DisplayOn+0x1c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80048e2:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <BSP_LCD_DisplayOn+0x1c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4798      	blx	r3
  }
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000e64 	.word	0x20000e64

080048f4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08e      	sub	sp, #56	; 0x38
 80048f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	623b      	str	r3, [r7, #32]
 80048fe:	4b61      	ldr	r3, [pc, #388]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	4a60      	ldr	r2, [pc, #384]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004904:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004908:	6453      	str	r3, [r2, #68]	; 0x44
 800490a:	4b5e      	ldr	r3, [pc, #376]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004912:	623b      	str	r3, [r7, #32]
 8004914:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	4b5a      	ldr	r3, [pc, #360]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	4a59      	ldr	r2, [pc, #356]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004920:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004924:	6313      	str	r3, [r2, #48]	; 0x30
 8004926:	4b57      	ldr	r3, [pc, #348]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	4b53      	ldr	r3, [pc, #332]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	4a52      	ldr	r2, [pc, #328]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	6313      	str	r3, [r2, #48]	; 0x30
 8004942:	4b50      	ldr	r3, [pc, #320]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	4b4c      	ldr	r3, [pc, #304]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	4a4b      	ldr	r2, [pc, #300]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004958:	f043 0302 	orr.w	r3, r3, #2
 800495c:	6313      	str	r3, [r2, #48]	; 0x30
 800495e:	4b49      	ldr	r3, [pc, #292]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	4b45      	ldr	r3, [pc, #276]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	4a44      	ldr	r2, [pc, #272]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
 800497a:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	4b3e      	ldr	r3, [pc, #248]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	4a3d      	ldr	r2, [pc, #244]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004990:	f043 0308 	orr.w	r3, r3, #8
 8004994:	6313      	str	r3, [r2, #48]	; 0x30
 8004996:	4b3b      	ldr	r3, [pc, #236]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	4b37      	ldr	r3, [pc, #220]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	4a36      	ldr	r2, [pc, #216]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 80049ac:	f043 0320 	orr.w	r3, r3, #32
 80049b0:	6313      	str	r3, [r2, #48]	; 0x30
 80049b2:	4b34      	ldr	r3, [pc, #208]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	4b30      	ldr	r3, [pc, #192]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 80049c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049cc:	6313      	str	r3, [r2, #48]	; 0x30
 80049ce:	4b2d      	ldr	r3, [pc, #180]	; (8004a84 <BSP_LCD_MspInit+0x190>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80049da:	f641 0358 	movw	r3, #6232	; 0x1858
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80049e0:	2302      	movs	r3, #2
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80049e8:	2302      	movs	r3, #2
 80049ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80049ec:	230e      	movs	r3, #14
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80049f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049f4:	4619      	mov	r1, r3
 80049f6:	4824      	ldr	r0, [pc, #144]	; (8004a88 <BSP_LCD_MspInit+0x194>)
 80049f8:	f001 fa3c 	bl	8005e74 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80049fc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a06:	4619      	mov	r1, r3
 8004a08:	4820      	ldr	r0, [pc, #128]	; (8004a8c <BSP_LCD_MspInit+0x198>)
 8004a0a:	f001 fa33 	bl	8005e74 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004a0e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a18:	4619      	mov	r1, r3
 8004a1a:	481d      	ldr	r0, [pc, #116]	; (8004a90 <BSP_LCD_MspInit+0x19c>)
 8004a1c:	f001 fa2a 	bl	8005e74 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004a20:	2348      	movs	r3, #72	; 0x48
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a28:	4619      	mov	r1, r3
 8004a2a:	481a      	ldr	r0, [pc, #104]	; (8004a94 <BSP_LCD_MspInit+0x1a0>)
 8004a2c:	f001 fa22 	bl	8005e74 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8004a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4816      	ldr	r0, [pc, #88]	; (8004a98 <BSP_LCD_MspInit+0x1a4>)
 8004a3e:	f001 fa19 	bl	8005e74 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004a42:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4813      	ldr	r0, [pc, #76]	; (8004a9c <BSP_LCD_MspInit+0x1a8>)
 8004a50:	f001 fa10 	bl	8005e74 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004a54:	2303      	movs	r3, #3
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004a58:	2309      	movs	r3, #9
 8004a5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a60:	4619      	mov	r1, r3
 8004a62:	480a      	ldr	r0, [pc, #40]	; (8004a8c <BSP_LCD_MspInit+0x198>)
 8004a64:	f001 fa06 	bl	8005e74 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004a68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a72:	4619      	mov	r1, r3
 8004a74:	4809      	ldr	r0, [pc, #36]	; (8004a9c <BSP_LCD_MspInit+0x1a8>)
 8004a76:	f001 f9fd 	bl	8005e74 <HAL_GPIO_Init>
}
 8004a7a:	bf00      	nop
 8004a7c:	3738      	adds	r7, #56	; 0x38
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800
 8004a88:	40020000 	.word	0x40020000
 8004a8c:	40020400 	.word	0x40020400
 8004a90:	40020800 	.word	0x40020800
 8004a94:	40020c00 	.word	0x40020c00
 8004a98:	40021400 	.word	0x40021400
 8004a9c:	40021800 	.word	0x40021800

08004aa0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004aa0:	b5b0      	push	{r4, r5, r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	603a      	str	r2, [r7, #0]
 8004aaa:	80fb      	strh	r3, [r7, #6]
 8004aac:	460b      	mov	r3, r1
 8004aae:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <BSP_LCD_DrawPixel+0x44>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a0c      	ldr	r2, [pc, #48]	; (8004ae8 <BSP_LCD_DrawPixel+0x48>)
 8004ab6:	2134      	movs	r1, #52	; 0x34
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	335c      	adds	r3, #92	; 0x5c
 8004ac0:	681c      	ldr	r4, [r3, #0]
 8004ac2:	88bd      	ldrh	r5, [r7, #4]
 8004ac4:	f7ff fa18 	bl	8003ef8 <BSP_LCD_GetXSize>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	fb03 f205 	mul.w	r2, r3, r5
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4423      	add	r3, r4
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	6013      	str	r3, [r2, #0]
}
 8004adc:	bf00      	nop
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae4:	20000e48 	.word	0x20000e48
 8004ae8:	20000d30 	.word	0x20000d30

08004aec <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	603a      	str	r2, [r7, #0]
 8004af6:	80fb      	strh	r3, [r7, #6]
 8004af8:	460b      	mov	r3, r1
 8004afa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	61fb      	str	r3, [r7, #28]
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004b08:	4b53      	ldr	r3, [pc, #332]	; (8004c58 <DrawChar+0x16c>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4953      	ldr	r1, [pc, #332]	; (8004c5c <DrawChar+0x170>)
 8004b0e:	4613      	mov	r3, r2
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3308      	adds	r3, #8
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	88db      	ldrh	r3, [r3, #6]
 8004b1e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004b20:	4b4d      	ldr	r3, [pc, #308]	; (8004c58 <DrawChar+0x16c>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	494d      	ldr	r1, [pc, #308]	; (8004c5c <DrawChar+0x170>)
 8004b26:	4613      	mov	r3, r2
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	3308      	adds	r3, #8
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	889b      	ldrh	r3, [r3, #4]
 8004b36:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004b38:	8a3b      	ldrh	r3, [r7, #16]
 8004b3a:	3307      	adds	r3, #7
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	da00      	bge.n	8004b42 <DrawChar+0x56>
 8004b40:	3307      	adds	r3, #7
 8004b42:	10db      	asrs	r3, r3, #3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	8a3b      	ldrh	r3, [r7, #16]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	e076      	b.n	8004c46 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004b58:	8a3b      	ldrh	r3, [r7, #16]
 8004b5a:	3307      	adds	r3, #7
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	da00      	bge.n	8004b62 <DrawChar+0x76>
 8004b60:	3307      	adds	r3, #7
 8004b62:	10db      	asrs	r3, r3, #3
 8004b64:	461a      	mov	r2, r3
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	4413      	add	r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004b72:	8a3b      	ldrh	r3, [r7, #16]
 8004b74:	3307      	adds	r3, #7
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	da00      	bge.n	8004b7c <DrawChar+0x90>
 8004b7a:	3307      	adds	r3, #7
 8004b7c:	10db      	asrs	r3, r3, #3
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d002      	beq.n	8004b88 <DrawChar+0x9c>
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d004      	beq.n	8004b90 <DrawChar+0xa4>
 8004b86:	e00c      	b.n	8004ba2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	617b      	str	r3, [r7, #20]
      break;
 8004b8e:	e016      	b.n	8004bbe <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	3201      	adds	r2, #1
 8004b9a:	7812      	ldrb	r2, [r2, #0]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
      break;
 8004ba0:	e00d      	b.n	8004bbe <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	041a      	lsls	r2, r3, #16
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	3301      	adds	r3, #1
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	3202      	adds	r2, #2
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
      break;
 8004bbc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	e036      	b.n	8004c32 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004bc4:	8a3a      	ldrh	r2, [r7, #16]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1ad2      	subs	r2, r2, r3
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	4413      	add	r3, r2
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d012      	beq.n	8004c06 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	4413      	add	r3, r2
 8004be8:	b298      	uxth	r0, r3
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <DrawChar+0x16c>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	491b      	ldr	r1, [pc, #108]	; (8004c5c <DrawChar+0x170>)
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	88bb      	ldrh	r3, [r7, #4]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	f7ff ff4e 	bl	8004aa0 <BSP_LCD_DrawPixel>
 8004c04:	e012      	b.n	8004c2c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	b298      	uxth	r0, r3
 8004c10:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <DrawChar+0x16c>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4911      	ldr	r1, [pc, #68]	; (8004c5c <DrawChar+0x170>)
 8004c16:	4613      	mov	r3, r2
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	3304      	adds	r3, #4
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	88bb      	ldrh	r3, [r7, #4]
 8004c26:	4619      	mov	r1, r3
 8004c28:	f7ff ff3a 	bl	8004aa0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	8a3b      	ldrh	r3, [r7, #16]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d3c4      	bcc.n	8004bc4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004c3a:	88bb      	ldrh	r3, [r7, #4]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3301      	adds	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	8a7b      	ldrh	r3, [r7, #18]
 8004c48:	69fa      	ldr	r2, [r7, #28]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d384      	bcc.n	8004b58 <DrawChar+0x6c>
  }
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20000e48 	.word	0x20000e48
 8004c5c:	20000e4c 	.word	0x20000e4c

08004c60 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004c6e:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <FillBuffer+0x68>)
 8004c70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004c74:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <FillBuffer+0x68>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004c7c:	4a12      	ldr	r2, [pc, #72]	; (8004cc8 <FillBuffer+0x68>)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004c82:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <FillBuffer+0x68>)
 8004c84:	4a11      	ldr	r2, [pc, #68]	; (8004ccc <FillBuffer+0x6c>)
 8004c86:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004c88:	480f      	ldr	r0, [pc, #60]	; (8004cc8 <FillBuffer+0x68>)
 8004c8a:	f000 fe5d 	bl	8005948 <HAL_DMA2D_Init>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d115      	bne.n	8004cc0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004c94:	68f9      	ldr	r1, [r7, #12]
 8004c96:	480c      	ldr	r0, [pc, #48]	; (8004cc8 <FillBuffer+0x68>)
 8004c98:	f000 ffbe 	bl	8005c18 <HAL_DMA2D_ConfigLayer>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10e      	bne.n	8004cc0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69f9      	ldr	r1, [r7, #28]
 8004cac:	4806      	ldr	r0, [pc, #24]	; (8004cc8 <FillBuffer+0x68>)
 8004cae:	f000 fe9e 	bl	80059ee <HAL_DMA2D_Start>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d103      	bne.n	8004cc0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004cb8:	210a      	movs	r1, #10
 8004cba:	4803      	ldr	r0, [pc, #12]	; (8004cc8 <FillBuffer+0x68>)
 8004cbc:	f000 fec2 	bl	8005a44 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000dd8 	.word	0x20000dd8
 8004ccc:	4002b000 	.word	0x4002b000

08004cd0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004cd4:	4b29      	ldr	r3, [pc, #164]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004cd6:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <BSP_SDRAM_Init+0xb0>)
 8004cd8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004cda:	4b2a      	ldr	r3, [pc, #168]	; (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004cdc:	2202      	movs	r2, #2
 8004cde:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004ce0:	4b28      	ldr	r3, [pc, #160]	; (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004ce2:	2207      	movs	r2, #7
 8004ce4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004ce6:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004ce8:	2204      	movs	r2, #4
 8004cea:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004cec:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004cee:	2207      	movs	r2, #7
 8004cf0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004cf2:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004cf8:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004cfe:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004d00:	2202      	movs	r2, #2
 8004d02:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004d04:	4b1d      	ldr	r3, [pc, #116]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004d0a:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d12:	2204      	movs	r2, #4
 8004d14:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d18:	2210      	movs	r2, #16
 8004d1a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004d1c:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d1e:	2240      	movs	r2, #64	; 0x40
 8004d20:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004d22:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d24:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004d28:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004d2a:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d36:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004d38:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004d3e:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004d46:	2100      	movs	r1, #0
 8004d48:	480c      	ldr	r0, [pc, #48]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d4a:	f000 f87f 	bl	8004e4c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004d4e:	490d      	ldr	r1, [pc, #52]	; (8004d84 <BSP_SDRAM_Init+0xb4>)
 8004d50:	480a      	ldr	r0, [pc, #40]	; (8004d7c <BSP_SDRAM_Init+0xac>)
 8004d52:	f003 fb91 	bl	8008478 <HAL_SDRAM_Init>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <BSP_SDRAM_Init+0xb8>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e002      	b.n	8004d6a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004d64:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <BSP_SDRAM_Init+0xb8>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004d6a:	f240 506a 	movw	r0, #1386	; 0x56a
 8004d6e:	f000 f80d 	bl	8004d8c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <BSP_SDRAM_Init+0xb8>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000e68 	.word	0x20000e68
 8004d80:	a0000140 	.word	0xa0000140
 8004d84:	20000e9c 	.word	0x20000e9c
 8004d88:	20000438 	.word	0x20000438

08004d8c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004d98:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004d9e:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004da0:	2208      	movs	r2, #8
 8004da2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004da4:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004daa:	4b26      	ldr	r3, [pc, #152]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004db4:	4923      	ldr	r1, [pc, #140]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004db6:	4824      	ldr	r0, [pc, #144]	; (8004e48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004db8:	f003 fb9c 	bl	80084f4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004dbc:	2001      	movs	r0, #1
 8004dbe:	f000 facf 	bl	8005360 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004dc2:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dca:	2208      	movs	r2, #8
 8004dcc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004dce:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dde:	4919      	ldr	r1, [pc, #100]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004de0:	4819      	ldr	r0, [pc, #100]	; (8004e48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004de2:	f003 fb87 	bl	80084f4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004de6:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004de8:	2203      	movs	r2, #3
 8004dea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004dec:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dee:	2208      	movs	r2, #8
 8004df0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004df2:	4b14      	ldr	r3, [pc, #80]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004df4:	2204      	movs	r2, #4
 8004df6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004df8:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e02:	4910      	ldr	r1, [pc, #64]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e04:	4810      	ldr	r0, [pc, #64]	; (8004e48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e06:	f003 fb75 	bl	80084f4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004e0a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004e0e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e12:	2204      	movs	r2, #4
 8004e14:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e18:	2208      	movs	r2, #8
 8004e1a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a07      	ldr	r2, [pc, #28]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e26:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e2c:	4905      	ldr	r1, [pc, #20]	; (8004e44 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e2e:	4806      	ldr	r0, [pc, #24]	; (8004e48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e30:	f003 fb60 	bl	80084f4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4804      	ldr	r0, [pc, #16]	; (8004e48 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e38:	f003 fb87 	bl	800854a <HAL_SDRAM_ProgramRefreshRate>
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000eb8 	.word	0x20000eb8
 8004e48:	20000e68 	.word	0x20000e68

08004e4c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b090      	sub	sp, #64	; 0x40
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80ec 	beq.w	8005036 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e62:	4b77      	ldr	r3, [pc, #476]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	4a76      	ldr	r2, [pc, #472]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6393      	str	r3, [r2, #56]	; 0x38
 8004e6e:	4b74      	ldr	r3, [pc, #464]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7e:	4b70      	ldr	r3, [pc, #448]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	4a6f      	ldr	r2, [pc, #444]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e88:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8a:	4b6d      	ldr	r3, [pc, #436]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	4b69      	ldr	r3, [pc, #420]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	4a68      	ldr	r2, [pc, #416]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ea0:	f043 0302 	orr.w	r3, r3, #2
 8004ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea6:	4b66      	ldr	r3, [pc, #408]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	623b      	str	r3, [r7, #32]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	4b62      	ldr	r3, [pc, #392]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	4a61      	ldr	r2, [pc, #388]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ebc:	f043 0304 	orr.w	r3, r3, #4
 8004ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec2:	4b5f      	ldr	r3, [pc, #380]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	4b5b      	ldr	r3, [pc, #364]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	4a5a      	ldr	r2, [pc, #360]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ed8:	f043 0308 	orr.w	r3, r3, #8
 8004edc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ede:	4b58      	ldr	r3, [pc, #352]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	4b54      	ldr	r3, [pc, #336]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	4a53      	ldr	r2, [pc, #332]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004ef4:	f043 0310 	orr.w	r3, r3, #16
 8004ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8004efa:	4b51      	ldr	r3, [pc, #324]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	4b4d      	ldr	r3, [pc, #308]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	4a4c      	ldr	r2, [pc, #304]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f10:	f043 0320 	orr.w	r3, r3, #32
 8004f14:	6313      	str	r3, [r2, #48]	; 0x30
 8004f16:	4b4a      	ldr	r3, [pc, #296]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	4b46      	ldr	r3, [pc, #280]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	4a45      	ldr	r2, [pc, #276]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f30:	6313      	str	r3, [r2, #48]	; 0x30
 8004f32:	4b43      	ldr	r3, [pc, #268]	; (8005040 <BSP_SDRAM_MspInit+0x1f4>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004f42:	2302      	movs	r3, #2
 8004f44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004f4e:	2360      	movs	r3, #96	; 0x60
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f56:	4619      	mov	r1, r3
 8004f58:	483a      	ldr	r0, [pc, #232]	; (8005044 <BSP_SDRAM_MspInit+0x1f8>)
 8004f5a:	f000 ff8b 	bl	8005e74 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004f5e:	2301      	movs	r3, #1
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f66:	4619      	mov	r1, r3
 8004f68:	4837      	ldr	r0, [pc, #220]	; (8005048 <BSP_SDRAM_MspInit+0x1fc>)
 8004f6a:	f000 ff83 	bl	8005e74 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004f6e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004f72:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4834      	ldr	r0, [pc, #208]	; (800504c <BSP_SDRAM_MspInit+0x200>)
 8004f7c:	f000 ff7a 	bl	8005e74 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004f80:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4830      	ldr	r0, [pc, #192]	; (8005050 <BSP_SDRAM_MspInit+0x204>)
 8004f8e:	f000 ff71 	bl	8005e74 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004f92:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	482d      	ldr	r0, [pc, #180]	; (8005054 <BSP_SDRAM_MspInit+0x208>)
 8004fa0:	f000 ff68 	bl	8005e74 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004fa4:	f248 1333 	movw	r3, #33075	; 0x8133
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4829      	ldr	r0, [pc, #164]	; (8005058 <BSP_SDRAM_MspInit+0x20c>)
 8004fb2:	f000 ff5f 	bl	8005e74 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004fb6:	4b29      	ldr	r3, [pc, #164]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004fbc:	4b27      	ldr	r3, [pc, #156]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fbe:	2280      	movs	r2, #128	; 0x80
 8004fc0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004fc2:	4b26      	ldr	r3, [pc, #152]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004fca:	4b24      	ldr	r3, [pc, #144]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fd0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fd2:	4b22      	ldr	r3, [pc, #136]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fd8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004fda:	4b20      	ldr	r3, [pc, #128]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fe0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8004fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fee:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004ff0:	4b1a      	ldr	r3, [pc, #104]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004ff6:	4b19      	ldr	r3, [pc, #100]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004ffc:	4b17      	ldr	r3, [pc, #92]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005002:	4b16      	ldr	r3, [pc, #88]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8005004:	2200      	movs	r2, #0
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8005008:	4b14      	ldr	r3, [pc, #80]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <BSP_SDRAM_MspInit+0x214>)
 800500c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a12      	ldr	r2, [pc, #72]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
 8005014:	4a11      	ldr	r2, [pc, #68]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800501a:	4810      	ldr	r0, [pc, #64]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 800501c:	f000 fb84 	bl	8005728 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8005020:	480e      	ldr	r0, [pc, #56]	; (800505c <BSP_SDRAM_MspInit+0x210>)
 8005022:	f000 fad3 	bl	80055cc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005026:	2200      	movs	r2, #0
 8005028:	210f      	movs	r1, #15
 800502a:	2038      	movs	r0, #56	; 0x38
 800502c:	f000 fa97 	bl	800555e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005030:	2038      	movs	r0, #56	; 0x38
 8005032:	f000 fab0 	bl	8005596 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8005036:	bf00      	nop
 8005038:	3740      	adds	r7, #64	; 0x40
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800
 8005044:	40020400 	.word	0x40020400
 8005048:	40020800 	.word	0x40020800
 800504c:	40020c00 	.word	0x40020c00
 8005050:	40021000 	.word	0x40021000
 8005054:	40021400 	.word	0x40021400
 8005058:	40021800 	.word	0x40021800
 800505c:	20000ec8 	.word	0x20000ec8
 8005060:	40026410 	.word	0x40026410

08005064 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	460a      	mov	r2, r1
 800506e:	80fb      	strh	r3, [r7, #6]
 8005070:	4613      	mov	r3, r2
 8005072:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8005078:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <BSP_TS_Init+0x64>)
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800507e:	4a13      	ldr	r2, [pc, #76]	; (80050cc <BSP_TS_Init+0x68>)
 8005080:	88bb      	ldrh	r3, [r7, #4]
 8005082:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8005084:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <BSP_TS_Init+0x6c>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2082      	movs	r0, #130	; 0x82
 800508a:	4798      	blx	r3
 800508c:	4603      	mov	r3, r0
 800508e:	461a      	mov	r2, r3
 8005090:	f640 0311 	movw	r3, #2065	; 0x811
 8005094:	429a      	cmp	r2, r3
 8005096:	d104      	bne.n	80050a2 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8005098:	4b0e      	ldr	r3, [pc, #56]	; (80050d4 <BSP_TS_Init+0x70>)
 800509a:	4a0d      	ldr	r2, [pc, #52]	; (80050d0 <BSP_TS_Init+0x6c>)
 800509c:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d109      	bne.n	80050bc <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <BSP_TS_Init+0x70>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2082      	movs	r0, #130	; 0x82
 80050b0:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <BSP_TS_Init+0x70>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2082      	movs	r0, #130	; 0x82
 80050ba:	4798      	blx	r3
  }

  return ret;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000f2c 	.word	0x20000f2c
 80050cc:	20000f2e 	.word	0x20000f2e
 80050d0:	200003e0 	.word	0x200003e0
 80050d4:	20000f28 	.word	0x20000f28

080050d8 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 80050dc:	4b03      	ldr	r3, [pc, #12]	; (80050ec <BSP_TS_ITGetStatus+0x14>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	2082      	movs	r0, #130	; 0x82
 80050e4:	4798      	blx	r3
 80050e6:	4603      	mov	r3, r0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000f28 	.word	0x20000f28

080050f0 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80050f8:	4b4f      	ldr	r3, [pc, #316]	; (8005238 <BSP_TS_GetState+0x148>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2082      	movs	r0, #130	; 0x82
 8005100:	4798      	blx	r3
 8005102:	4603      	mov	r3, r0
 8005104:	b29a      	uxth	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 808d 	beq.w	800522e <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8005114:	4b48      	ldr	r3, [pc, #288]	; (8005238 <BSP_TS_GetState+0x148>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f107 020c 	add.w	r2, r7, #12
 800511e:	f107 010e 	add.w	r1, r7, #14
 8005122:	2082      	movs	r0, #130	; 0x82
 8005124:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8005126:	89bb      	ldrh	r3, [r7, #12]
 8005128:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800512c:	b29b      	uxth	r3, r3
 800512e:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8005130:	89bb      	ldrh	r3, [r7, #12]
 8005132:	4a42      	ldr	r2, [pc, #264]	; (800523c <BSP_TS_GetState+0x14c>)
 8005134:	fba2 2303 	umull	r2, r3, r2, r3
 8005138:	08db      	lsrs	r3, r3, #3
 800513a:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 800513c:	8abb      	ldrh	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	82bb      	strh	r3, [r7, #20]
 8005146:	e008      	b.n	800515a <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8005148:	4b3d      	ldr	r3, [pc, #244]	; (8005240 <BSP_TS_GetState+0x150>)
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	8aba      	ldrh	r2, [r7, #20]
 800514e:	429a      	cmp	r2, r3
 8005150:	d903      	bls.n	800515a <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8005152:	4b3b      	ldr	r3, [pc, #236]	; (8005240 <BSP_TS_GetState+0x150>)
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	3b01      	subs	r3, #1
 8005158:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800515a:	8abb      	ldrh	r3, [r7, #20]
 800515c:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800515e:	89fb      	ldrh	r3, [r7, #14]
 8005160:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005164:	4293      	cmp	r3, r2
 8005166:	d806      	bhi.n	8005176 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8005168:	89fb      	ldrh	r3, [r7, #14]
 800516a:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800516e:	330e      	adds	r3, #14
 8005170:	b29b      	uxth	r3, r3
 8005172:	81fb      	strh	r3, [r7, #14]
 8005174:	e005      	b.n	8005182 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8005176:	89fb      	ldrh	r3, [r7, #14]
 8005178:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800517c:	3308      	adds	r3, #8
 800517e:	b29b      	uxth	r3, r3
 8005180:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8005182:	89fb      	ldrh	r3, [r7, #14]
 8005184:	4a2f      	ldr	r2, [pc, #188]	; (8005244 <BSP_TS_GetState+0x154>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800518e:	8afb      	ldrh	r3, [r7, #22]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	82fb      	strh	r3, [r7, #22]
 8005198:	e008      	b.n	80051ac <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800519a:	4b2b      	ldr	r3, [pc, #172]	; (8005248 <BSP_TS_GetState+0x158>)
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	8afa      	ldrh	r2, [r7, #22]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d903      	bls.n	80051ac <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80051a4:	4b28      	ldr	r3, [pc, #160]	; (8005248 <BSP_TS_GetState+0x158>)
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 80051ac:	8afb      	ldrh	r3, [r7, #22]
 80051ae:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 80051b0:	89fb      	ldrh	r3, [r7, #14]
 80051b2:	461a      	mov	r2, r3
 80051b4:	4b25      	ldr	r3, [pc, #148]	; (800524c <BSP_TS_GetState+0x15c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d906      	bls.n	80051ca <BSP_TS_GetState+0xda>
 80051bc:	89fa      	ldrh	r2, [r7, #14]
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <BSP_TS_GetState+0x15c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	e005      	b.n	80051d6 <BSP_TS_GetState+0xe6>
 80051ca:	4b20      	ldr	r3, [pc, #128]	; (800524c <BSP_TS_GetState+0x15c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 80051d8:	89bb      	ldrh	r3, [r7, #12]
 80051da:	461a      	mov	r2, r3
 80051dc:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <BSP_TS_GetState+0x160>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d906      	bls.n	80051f2 <BSP_TS_GetState+0x102>
 80051e4:	89ba      	ldrh	r2, [r7, #12]
 80051e6:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <BSP_TS_GetState+0x160>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	e005      	b.n	80051fe <BSP_TS_GetState+0x10e>
 80051f2:	4b17      	ldr	r3, [pc, #92]	; (8005250 <BSP_TS_GetState+0x160>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	89bb      	ldrh	r3, [r7, #12]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8005200:	8a7a      	ldrh	r2, [r7, #18]
 8005202:	8a3b      	ldrh	r3, [r7, #16]
 8005204:	4413      	add	r3, r2
 8005206:	2b05      	cmp	r3, #5
 8005208:	dd07      	ble.n	800521a <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800520a:	89fb      	ldrh	r3, [r7, #14]
 800520c:	461a      	mov	r2, r3
 800520e:	4b0f      	ldr	r3, [pc, #60]	; (800524c <BSP_TS_GetState+0x15c>)
 8005210:	601a      	str	r2, [r3, #0]
      _y = y; 
 8005212:	89bb      	ldrh	r3, [r7, #12]
 8005214:	461a      	mov	r2, r3
 8005216:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <BSP_TS_GetState+0x160>)
 8005218:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800521a:	4b0c      	ldr	r3, [pc, #48]	; (800524c <BSP_TS_GetState+0x15c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	b29a      	uxth	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <BSP_TS_GetState+0x160>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	b29a      	uxth	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	809a      	strh	r2, [r3, #4]
  }
}
 800522e:	bf00      	nop
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000f28 	.word	0x20000f28
 800523c:	ba2e8ba3 	.word	0xba2e8ba3
 8005240:	20000f2e 	.word	0x20000f2e
 8005244:	88888889 	.word	0x88888889
 8005248:	20000f2c 	.word	0x20000f2c
 800524c:	20000f30 	.word	0x20000f30
 8005250:	20000f34 	.word	0x20000f34

08005254 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8005258:	4b03      	ldr	r3, [pc, #12]	; (8005268 <BSP_TS_ITClear+0x14>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	2082      	movs	r0, #130	; 0x82
 8005260:	4798      	blx	r3
}
 8005262:	bf00      	nop
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000f28 	.word	0x20000f28

0800526c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005270:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <HAL_Init+0x40>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <HAL_Init+0x40>)
 8005276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800527a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <HAL_Init+0x40>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a0a      	ldr	r2, [pc, #40]	; (80052ac <HAL_Init+0x40>)
 8005282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005288:	4b08      	ldr	r3, [pc, #32]	; (80052ac <HAL_Init+0x40>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a07      	ldr	r2, [pc, #28]	; (80052ac <HAL_Init+0x40>)
 800528e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005294:	2003      	movs	r0, #3
 8005296:	f000 f957 	bl	8005548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800529a:	200f      	movs	r0, #15
 800529c:	f000 f810 	bl	80052c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052a0:	f000 f806 	bl	80052b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40023c00 	.word	0x40023c00

080052b0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052c8:	4b12      	ldr	r3, [pc, #72]	; (8005314 <HAL_InitTick+0x54>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b12      	ldr	r3, [pc, #72]	; (8005318 <HAL_InitTick+0x58>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	4619      	mov	r1, r3
 80052d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80052da:	fbb2 f3f3 	udiv	r3, r2, r3
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f967 	bl	80055b2 <HAL_SYSTICK_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e00e      	b.n	800530c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b0f      	cmp	r3, #15
 80052f2:	d80a      	bhi.n	800530a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052f4:	2200      	movs	r2, #0
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	f000 f92f 	bl	800555e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005300:	4a06      	ldr	r2, [pc, #24]	; (800531c <HAL_InitTick+0x5c>)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e000      	b.n	800530c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	200003a4 	.word	0x200003a4
 8005318:	20000440 	.word	0x20000440
 800531c:	2000043c 	.word	0x2000043c

08005320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005324:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_IncTick+0x20>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	4b06      	ldr	r3, [pc, #24]	; (8005344 <HAL_IncTick+0x24>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4413      	add	r3, r2
 8005330:	4a04      	ldr	r2, [pc, #16]	; (8005344 <HAL_IncTick+0x24>)
 8005332:	6013      	str	r3, [r2, #0]
}
 8005334:	bf00      	nop
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000440 	.word	0x20000440
 8005344:	20000f38 	.word	0x20000f38

08005348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return uwTick;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_GetTick+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000f38 	.word	0x20000f38

08005360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005368:	f7ff ffee 	bl	8005348 <HAL_GetTick>
 800536c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d005      	beq.n	8005386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800537a:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <HAL_Delay+0x44>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005386:	bf00      	nop
 8005388:	f7ff ffde 	bl	8005348 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	429a      	cmp	r2, r3
 8005396:	d8f7      	bhi.n	8005388 <HAL_Delay+0x28>
  {
  }
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000440 	.word	0x20000440

080053a8 <__NVIC_SetPriorityGrouping>:
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053b8:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <__NVIC_SetPriorityGrouping+0x44>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053c4:	4013      	ands	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053da:	4a04      	ldr	r2, [pc, #16]	; (80053ec <__NVIC_SetPriorityGrouping+0x44>)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	60d3      	str	r3, [r2, #12]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	e000ed00 	.word	0xe000ed00

080053f0 <__NVIC_GetPriorityGrouping>:
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053f4:	4b04      	ldr	r3, [pc, #16]	; (8005408 <__NVIC_GetPriorityGrouping+0x18>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	f003 0307 	and.w	r3, r3, #7
}
 80053fe:	4618      	mov	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	e000ed00 	.word	0xe000ed00

0800540c <__NVIC_EnableIRQ>:
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541a:	2b00      	cmp	r3, #0
 800541c:	db0b      	blt.n	8005436 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	f003 021f 	and.w	r2, r3, #31
 8005424:	4907      	ldr	r1, [pc, #28]	; (8005444 <__NVIC_EnableIRQ+0x38>)
 8005426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	2001      	movs	r0, #1
 800542e:	fa00 f202 	lsl.w	r2, r0, r2
 8005432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	e000e100 	.word	0xe000e100

08005448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	6039      	str	r1, [r7, #0]
 8005452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005458:	2b00      	cmp	r3, #0
 800545a:	db0a      	blt.n	8005472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	490c      	ldr	r1, [pc, #48]	; (8005494 <__NVIC_SetPriority+0x4c>)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	0112      	lsls	r2, r2, #4
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	440b      	add	r3, r1
 800546c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005470:	e00a      	b.n	8005488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	b2da      	uxtb	r2, r3
 8005476:	4908      	ldr	r1, [pc, #32]	; (8005498 <__NVIC_SetPriority+0x50>)
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	3b04      	subs	r3, #4
 8005480:	0112      	lsls	r2, r2, #4
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	440b      	add	r3, r1
 8005486:	761a      	strb	r2, [r3, #24]
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	e000e100 	.word	0xe000e100
 8005498:	e000ed00 	.word	0xe000ed00

0800549c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800549c:	b480      	push	{r7}
 800549e:	b089      	sub	sp, #36	; 0x24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f1c3 0307 	rsb	r3, r3, #7
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	bf28      	it	cs
 80054ba:	2304      	movcs	r3, #4
 80054bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	3304      	adds	r3, #4
 80054c2:	2b06      	cmp	r3, #6
 80054c4:	d902      	bls.n	80054cc <NVIC_EncodePriority+0x30>
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	3b03      	subs	r3, #3
 80054ca:	e000      	b.n	80054ce <NVIC_EncodePriority+0x32>
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d0:	f04f 32ff 	mov.w	r2, #4294967295
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43da      	mvns	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	401a      	ands	r2, r3
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054e4:	f04f 31ff 	mov.w	r1, #4294967295
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	fa01 f303 	lsl.w	r3, r1, r3
 80054ee:	43d9      	mvns	r1, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f4:	4313      	orrs	r3, r2
         );
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3724      	adds	r7, #36	; 0x24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3b01      	subs	r3, #1
 8005510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005514:	d301      	bcc.n	800551a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005516:	2301      	movs	r3, #1
 8005518:	e00f      	b.n	800553a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800551a:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <SysTick_Config+0x40>)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005522:	210f      	movs	r1, #15
 8005524:	f04f 30ff 	mov.w	r0, #4294967295
 8005528:	f7ff ff8e 	bl	8005448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <SysTick_Config+0x40>)
 800552e:	2200      	movs	r2, #0
 8005530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005532:	4b04      	ldr	r3, [pc, #16]	; (8005544 <SysTick_Config+0x40>)
 8005534:	2207      	movs	r2, #7
 8005536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	e000e010 	.word	0xe000e010

08005548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ff29 	bl	80053a8 <__NVIC_SetPriorityGrouping>
}
 8005556:	bf00      	nop
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800555e:	b580      	push	{r7, lr}
 8005560:	b086      	sub	sp, #24
 8005562:	af00      	add	r7, sp, #0
 8005564:	4603      	mov	r3, r0
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005570:	f7ff ff3e 	bl	80053f0 <__NVIC_GetPriorityGrouping>
 8005574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	6978      	ldr	r0, [r7, #20]
 800557c:	f7ff ff8e 	bl	800549c <NVIC_EncodePriority>
 8005580:	4602      	mov	r2, r0
 8005582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005586:	4611      	mov	r1, r2
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ff5d 	bl	8005448 <__NVIC_SetPriority>
}
 800558e:	bf00      	nop
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	4603      	mov	r3, r0
 800559e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff ff31 	bl	800540c <__NVIC_EnableIRQ>
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff ffa2 	bl	8005504 <SysTick_Config>
 80055c0:	4603      	mov	r3, r0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055d8:	f7ff feb6 	bl	8005348 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e099      	b.n	800571c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005608:	e00f      	b.n	800562a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800560a:	f7ff fe9d 	bl	8005348 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b05      	cmp	r3, #5
 8005616:	d908      	bls.n	800562a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2203      	movs	r2, #3
 8005622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e078      	b.n	800571c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e8      	bne.n	800560a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4b38      	ldr	r3, [pc, #224]	; (8005724 <HAL_DMA_Init+0x158>)
 8005644:	4013      	ands	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800566e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b04      	cmp	r3, #4
 8005682:	d107      	bne.n	8005694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	4313      	orrs	r3, r2
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 0307 	bic.w	r3, r3, #7
 80056aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d117      	bne.n	80056ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00e      	beq.n	80056ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f8bd 	bl	8005850 <DMA_CheckFifoParam>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2240      	movs	r2, #64	; 0x40
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056ea:	2301      	movs	r3, #1
 80056ec:	e016      	b.n	800571c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f874 	bl	80057e4 <DMA_CalcBaseAndBitshift>
 80056fc:	4603      	mov	r3, r0
 80056fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005704:	223f      	movs	r2, #63	; 0x3f
 8005706:	409a      	lsls	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	f010803f 	.word	0xf010803f

08005728 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e050      	b.n	80057dc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d101      	bne.n	800574a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
 8005748:	e048      	b.n	80057dc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0201 	bic.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2200      	movs	r2, #0
 8005768:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2200      	movs	r2, #0
 8005770:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2200      	movs	r2, #0
 8005778:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2200      	movs	r2, #0
 8005780:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2221      	movs	r2, #33	; 0x21
 8005788:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f82a 	bl	80057e4 <DMA_CalcBaseAndBitshift>
 8005790:	4603      	mov	r3, r0
 8005792:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057bc:	223f      	movs	r2, #63	; 0x3f
 80057be:	409a      	lsls	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	3b10      	subs	r3, #16
 80057f4:	4a14      	ldr	r2, [pc, #80]	; (8005848 <DMA_CalcBaseAndBitshift+0x64>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	091b      	lsrs	r3, r3, #4
 80057fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057fe:	4a13      	ldr	r2, [pc, #76]	; (800584c <DMA_CalcBaseAndBitshift+0x68>)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b03      	cmp	r3, #3
 8005810:	d909      	bls.n	8005826 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800581a:	f023 0303 	bic.w	r3, r3, #3
 800581e:	1d1a      	adds	r2, r3, #4
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	659a      	str	r2, [r3, #88]	; 0x58
 8005824:	e007      	b.n	8005836 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	aaaaaaab 	.word	0xaaaaaaab
 800584c:	0800dc1c 	.word	0x0800dc1c

08005850 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005860:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d11f      	bne.n	80058aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d856      	bhi.n	800591e <DMA_CheckFifoParam+0xce>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <DMA_CheckFifoParam+0x28>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	08005889 	.word	0x08005889
 800587c:	0800589b 	.word	0x0800589b
 8005880:	08005889 	.word	0x08005889
 8005884:	0800591f 	.word	0x0800591f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d046      	beq.n	8005922 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005898:	e043      	b.n	8005922 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058a2:	d140      	bne.n	8005926 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a8:	e03d      	b.n	8005926 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b2:	d121      	bne.n	80058f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d837      	bhi.n	800592a <DMA_CheckFifoParam+0xda>
 80058ba:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <DMA_CheckFifoParam+0x70>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058d1 	.word	0x080058d1
 80058c4:	080058d7 	.word	0x080058d7
 80058c8:	080058d1 	.word	0x080058d1
 80058cc:	080058e9 	.word	0x080058e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
      break;
 80058d4:	e030      	b.n	8005938 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d025      	beq.n	800592e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e6:	e022      	b.n	800592e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058f0:	d11f      	bne.n	8005932 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058f6:	e01c      	b.n	8005932 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d903      	bls.n	8005906 <DMA_CheckFifoParam+0xb6>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d003      	beq.n	800590c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005904:	e018      	b.n	8005938 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	73fb      	strb	r3, [r7, #15]
      break;
 800590a:	e015      	b.n	8005938 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00e      	beq.n	8005936 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
      break;
 800591c:	e00b      	b.n	8005936 <DMA_CheckFifoParam+0xe6>
      break;
 800591e:	bf00      	nop
 8005920:	e00a      	b.n	8005938 <DMA_CheckFifoParam+0xe8>
      break;
 8005922:	bf00      	nop
 8005924:	e008      	b.n	8005938 <DMA_CheckFifoParam+0xe8>
      break;
 8005926:	bf00      	nop
 8005928:	e006      	b.n	8005938 <DMA_CheckFifoParam+0xe8>
      break;
 800592a:	bf00      	nop
 800592c:	e004      	b.n	8005938 <DMA_CheckFifoParam+0xe8>
      break;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <DMA_CheckFifoParam+0xe8>
      break;   
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <DMA_CheckFifoParam+0xe8>
      break;
 8005936:	bf00      	nop
    }
  } 
  
  return status; 
 8005938:	7bfb      	ldrb	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop

08005948 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e03b      	b.n	80059d2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f833 	bl	80059da <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005998:	f023 0107 	bic.w	r1, r3, #7
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80059b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68d1      	ldr	r1, [r2, #12]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6812      	ldr	r2, [r2, #0]
 80059be:	430b      	orrs	r3, r1
 80059c0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b086      	sub	sp, #24
 80059f2:	af02      	add	r7, sp, #8
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_DMA2D_Start+0x1c>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e018      	b.n	8005a3c <HAL_DMA2D_Start+0x4e>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f989 	bl	8005d3c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0201 	orr.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d056      	beq.n	8005b0e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005a60:	f7ff fc72 	bl	8005348 <HAL_GetTick>
 8005a64:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005a66:	e04b      	b.n	8005b00 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d023      	beq.n	8005ac2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	f043 0202 	orr.w	r2, r3, #2
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	f043 0201 	orr.w	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2221      	movs	r2, #33	; 0x21
 8005aac:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e0a5      	b.n	8005c0e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d01a      	beq.n	8005b00 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005aca:	f7ff fc3d 	bl	8005348 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d302      	bcc.n	8005ae0 <HAL_DMA2D_PollForTransfer+0x9c>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10f      	bne.n	8005b00 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae4:	f043 0220 	orr.w	r2, r3, #32
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2203      	movs	r2, #3
 8005af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e086      	b.n	8005c0e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0ac      	beq.n	8005a68 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d061      	beq.n	8005bf4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b30:	f7ff fc0a 	bl	8005348 <HAL_GetTick>
 8005b34:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005b36:	e056      	b.n	8005be6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d02e      	beq.n	8005ba8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b58:	f043 0204 	orr.w	r2, r3, #4
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	f043 0202 	orr.w	r2, r3, #2
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	f043 0201 	orr.w	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2229      	movs	r2, #41	; 0x29
 8005b92:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2204      	movs	r2, #4
 8005b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e032      	b.n	8005c0e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d01a      	beq.n	8005be6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005bb0:	f7ff fbca 	bl	8005348 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d302      	bcc.n	8005bc6 <HAL_DMA2D_PollForTransfer+0x182>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10f      	bne.n	8005be6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bca:	f043 0220 	orr.w	r2, r3, #32
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e013      	b.n	8005c0e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0a1      	beq.n	8005b38 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2212      	movs	r2, #18
 8005bfa:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_DMA2D_ConfigLayer+0x20>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e079      	b.n	8005d2c <HAL_DMA2D_ConfigLayer+0x114>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	3318      	adds	r3, #24
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	4413      	add	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	041b      	lsls	r3, r3, #16
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005c62:	4b35      	ldr	r3, [pc, #212]	; (8005d38 <HAL_DMA2D_ConfigLayer+0x120>)
 8005c64:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b0a      	cmp	r3, #10
 8005c6c:	d003      	beq.n	8005c76 <HAL_DMA2D_ConfigLayer+0x5e>
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b09      	cmp	r3, #9
 8005c74:	d107      	bne.n	8005c86 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e005      	b.n	8005c92 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	061b      	lsls	r3, r3, #24
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d120      	bne.n	8005cda <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	ea02 0103 	and.w	r1, r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b0a      	cmp	r3, #10
 8005cc0:	d003      	beq.n	8005cca <HAL_DMA2D_ConfigLayer+0xb2>
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b09      	cmp	r3, #9
 8005cc8:	d127      	bne.n	8005d1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8005cd8:	e01f      	b.n	8005d1a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	43db      	mvns	r3, r3
 8005ce4:	ea02 0103 	and.w	r1, r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b0a      	cmp	r3, #10
 8005d02:	d003      	beq.n	8005d0c <HAL_DMA2D_ConfigLayer+0xf4>
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b09      	cmp	r3, #9
 8005d0a:	d106      	bne.n	8005d1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005d18:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	ff03000f 	.word	0xff03000f

08005d3c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b08b      	sub	sp, #44	; 0x2c
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d50:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	041a      	lsls	r2, r3, #16
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d74:	d174      	bne.n	8005e60 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005d7c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d84:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d8c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d108      	bne.n	8005dae <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
 8005dac:	e053      	b.n	8005e56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d106      	bne.n	8005dc4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc2:	e048      	b.n	8005e56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d111      	bne.n	8005df0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	0cdb      	lsrs	r3, r3, #19
 8005dd0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	0a9b      	lsrs	r3, r3, #10
 8005dd6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	08db      	lsrs	r3, r3, #3
 8005ddc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	02db      	lsls	r3, r3, #11
 8005de6:	4313      	orrs	r3, r2
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
 8005dee:	e032      	b.n	8005e56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d117      	bne.n	8005e28 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	0fdb      	lsrs	r3, r3, #31
 8005dfc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	0cdb      	lsrs	r3, r3, #19
 8005e02:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	0adb      	lsrs	r3, r3, #11
 8005e08:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	08db      	lsrs	r3, r3, #3
 8005e0e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	029b      	lsls	r3, r3, #10
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	03db      	lsls	r3, r3, #15
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
 8005e26:	e016      	b.n	8005e56 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	0f1b      	lsrs	r3, r3, #28
 8005e2c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	0d1b      	lsrs	r3, r3, #20
 8005e32:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	0b1b      	lsrs	r3, r3, #12
 8005e38:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	011a      	lsls	r2, r3, #4
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	031b      	lsls	r3, r3, #12
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005e5e:	e003      	b.n	8005e68 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	60da      	str	r2, [r3, #12]
}
 8005e68:	bf00      	nop
 8005e6a:	372c      	adds	r7, #44	; 0x2c
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b089      	sub	sp, #36	; 0x24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	e177      	b.n	8006180 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e90:	2201      	movs	r2, #1
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	f040 8166 	bne.w	800617a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d00b      	beq.n	8005ece <HAL_GPIO_Init+0x5a>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d007      	beq.n	8005ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ec2:	2b11      	cmp	r3, #17
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b12      	cmp	r3, #18
 8005ecc:	d130      	bne.n	8005f30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	2203      	movs	r2, #3
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f04:	2201      	movs	r2, #1
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	091b      	lsrs	r3, r3, #4
 8005f1a:	f003 0201 	and.w	r2, r3, #1
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d003      	beq.n	8005f70 <HAL_GPIO_Init+0xfc>
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b12      	cmp	r3, #18
 8005f6e:	d123      	bne.n	8005fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	08da      	lsrs	r2, r3, #3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3208      	adds	r2, #8
 8005f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	220f      	movs	r2, #15
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4013      	ands	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	08da      	lsrs	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3208      	adds	r2, #8
 8005fb2:	69b9      	ldr	r1, [r7, #24]
 8005fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	2203      	movs	r2, #3
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f003 0203 	and.w	r2, r3, #3
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80c0 	beq.w	800617a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	4b66      	ldr	r3, [pc, #408]	; (8006198 <HAL_GPIO_Init+0x324>)
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	4a65      	ldr	r2, [pc, #404]	; (8006198 <HAL_GPIO_Init+0x324>)
 8006004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006008:	6453      	str	r3, [r2, #68]	; 0x44
 800600a:	4b63      	ldr	r3, [pc, #396]	; (8006198 <HAL_GPIO_Init+0x324>)
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006016:	4a61      	ldr	r2, [pc, #388]	; (800619c <HAL_GPIO_Init+0x328>)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	3302      	adds	r3, #2
 800601e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	220f      	movs	r2, #15
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	43db      	mvns	r3, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4013      	ands	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a58      	ldr	r2, [pc, #352]	; (80061a0 <HAL_GPIO_Init+0x32c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d037      	beq.n	80060b2 <HAL_GPIO_Init+0x23e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a57      	ldr	r2, [pc, #348]	; (80061a4 <HAL_GPIO_Init+0x330>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d031      	beq.n	80060ae <HAL_GPIO_Init+0x23a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a56      	ldr	r2, [pc, #344]	; (80061a8 <HAL_GPIO_Init+0x334>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02b      	beq.n	80060aa <HAL_GPIO_Init+0x236>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a55      	ldr	r2, [pc, #340]	; (80061ac <HAL_GPIO_Init+0x338>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d025      	beq.n	80060a6 <HAL_GPIO_Init+0x232>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a54      	ldr	r2, [pc, #336]	; (80061b0 <HAL_GPIO_Init+0x33c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01f      	beq.n	80060a2 <HAL_GPIO_Init+0x22e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a53      	ldr	r2, [pc, #332]	; (80061b4 <HAL_GPIO_Init+0x340>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d019      	beq.n	800609e <HAL_GPIO_Init+0x22a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a52      	ldr	r2, [pc, #328]	; (80061b8 <HAL_GPIO_Init+0x344>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <HAL_GPIO_Init+0x226>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a51      	ldr	r2, [pc, #324]	; (80061bc <HAL_GPIO_Init+0x348>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00d      	beq.n	8006096 <HAL_GPIO_Init+0x222>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a50      	ldr	r2, [pc, #320]	; (80061c0 <HAL_GPIO_Init+0x34c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <HAL_GPIO_Init+0x21e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a4f      	ldr	r2, [pc, #316]	; (80061c4 <HAL_GPIO_Init+0x350>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d101      	bne.n	800608e <HAL_GPIO_Init+0x21a>
 800608a:	2309      	movs	r3, #9
 800608c:	e012      	b.n	80060b4 <HAL_GPIO_Init+0x240>
 800608e:	230a      	movs	r3, #10
 8006090:	e010      	b.n	80060b4 <HAL_GPIO_Init+0x240>
 8006092:	2308      	movs	r3, #8
 8006094:	e00e      	b.n	80060b4 <HAL_GPIO_Init+0x240>
 8006096:	2307      	movs	r3, #7
 8006098:	e00c      	b.n	80060b4 <HAL_GPIO_Init+0x240>
 800609a:	2306      	movs	r3, #6
 800609c:	e00a      	b.n	80060b4 <HAL_GPIO_Init+0x240>
 800609e:	2305      	movs	r3, #5
 80060a0:	e008      	b.n	80060b4 <HAL_GPIO_Init+0x240>
 80060a2:	2304      	movs	r3, #4
 80060a4:	e006      	b.n	80060b4 <HAL_GPIO_Init+0x240>
 80060a6:	2303      	movs	r3, #3
 80060a8:	e004      	b.n	80060b4 <HAL_GPIO_Init+0x240>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e002      	b.n	80060b4 <HAL_GPIO_Init+0x240>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <HAL_GPIO_Init+0x240>
 80060b2:	2300      	movs	r3, #0
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	f002 0203 	and.w	r2, r2, #3
 80060ba:	0092      	lsls	r2, r2, #2
 80060bc:	4093      	lsls	r3, r2
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060c4:	4935      	ldr	r1, [pc, #212]	; (800619c <HAL_GPIO_Init+0x328>)
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	089b      	lsrs	r3, r3, #2
 80060ca:	3302      	adds	r3, #2
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060d2:	4b3d      	ldr	r3, [pc, #244]	; (80061c8 <HAL_GPIO_Init+0x354>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	43db      	mvns	r3, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	4013      	ands	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060f6:	4a34      	ldr	r2, [pc, #208]	; (80061c8 <HAL_GPIO_Init+0x354>)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80060fc:	4b32      	ldr	r3, [pc, #200]	; (80061c8 <HAL_GPIO_Init+0x354>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	43db      	mvns	r3, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4013      	ands	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006120:	4a29      	ldr	r2, [pc, #164]	; (80061c8 <HAL_GPIO_Init+0x354>)
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006126:	4b28      	ldr	r3, [pc, #160]	; (80061c8 <HAL_GPIO_Init+0x354>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	43db      	mvns	r3, r3
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	4013      	ands	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800614a:	4a1f      	ldr	r2, [pc, #124]	; (80061c8 <HAL_GPIO_Init+0x354>)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006150:	4b1d      	ldr	r3, [pc, #116]	; (80061c8 <HAL_GPIO_Init+0x354>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	43db      	mvns	r3, r3
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4013      	ands	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006174:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <HAL_GPIO_Init+0x354>)
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	3301      	adds	r3, #1
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b0f      	cmp	r3, #15
 8006184:	f67f ae84 	bls.w	8005e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	3724      	adds	r7, #36	; 0x24
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40023800 	.word	0x40023800
 800619c:	40013800 	.word	0x40013800
 80061a0:	40020000 	.word	0x40020000
 80061a4:	40020400 	.word	0x40020400
 80061a8:	40020800 	.word	0x40020800
 80061ac:	40020c00 	.word	0x40020c00
 80061b0:	40021000 	.word	0x40021000
 80061b4:	40021400 	.word	0x40021400
 80061b8:	40021800 	.word	0x40021800
 80061bc:	40021c00 	.word	0x40021c00
 80061c0:	40022000 	.word	0x40022000
 80061c4:	40022400 	.word	0x40022400
 80061c8:	40013c00 	.word	0x40013c00

080061cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	807b      	strh	r3, [r7, #2]
 80061d8:	4613      	mov	r3, r2
 80061da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061dc:	787b      	ldrb	r3, [r7, #1]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061e8:	e003      	b.n	80061f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061ea:	887b      	ldrh	r3, [r7, #2]
 80061ec:	041a      	lsls	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	619a      	str	r2, [r3, #24]
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	887b      	ldrh	r3, [r7, #2]
 8006210:	401a      	ands	r2, r3
 8006212:	887b      	ldrh	r3, [r7, #2]
 8006214:	429a      	cmp	r2, r3
 8006216:	d104      	bne.n	8006222 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006218:	887b      	ldrh	r3, [r7, #2]
 800621a:	041a      	lsls	r2, r3, #16
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006220:	e002      	b.n	8006228 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006222:	887a      	ldrh	r2, [r7, #2]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	619a      	str	r2, [r3, #24]
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e12b      	b.n	800649e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f95d 	bl	800651a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2224      	movs	r2, #36	; 0x24
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0201 	bic.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006298:	f001 ff1a 	bl	80080d0 <HAL_RCC_GetPCLK1Freq>
 800629c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	4a81      	ldr	r2, [pc, #516]	; (80064a8 <HAL_I2C_Init+0x274>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d807      	bhi.n	80062b8 <HAL_I2C_Init+0x84>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a80      	ldr	r2, [pc, #512]	; (80064ac <HAL_I2C_Init+0x278>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	bf94      	ite	ls
 80062b0:	2301      	movls	r3, #1
 80062b2:	2300      	movhi	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	e006      	b.n	80062c6 <HAL_I2C_Init+0x92>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4a7d      	ldr	r2, [pc, #500]	; (80064b0 <HAL_I2C_Init+0x27c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	bf94      	ite	ls
 80062c0:	2301      	movls	r3, #1
 80062c2:	2300      	movhi	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e0e7      	b.n	800649e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4a78      	ldr	r2, [pc, #480]	; (80064b4 <HAL_I2C_Init+0x280>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	0c9b      	lsrs	r3, r3, #18
 80062d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4a6a      	ldr	r2, [pc, #424]	; (80064a8 <HAL_I2C_Init+0x274>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d802      	bhi.n	8006308 <HAL_I2C_Init+0xd4>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	3301      	adds	r3, #1
 8006306:	e009      	b.n	800631c <HAL_I2C_Init+0xe8>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800630e:	fb02 f303 	mul.w	r3, r2, r3
 8006312:	4a69      	ldr	r2, [pc, #420]	; (80064b8 <HAL_I2C_Init+0x284>)
 8006314:	fba2 2303 	umull	r2, r3, r2, r3
 8006318:	099b      	lsrs	r3, r3, #6
 800631a:	3301      	adds	r3, #1
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	430b      	orrs	r3, r1
 8006322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800632e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	495c      	ldr	r1, [pc, #368]	; (80064a8 <HAL_I2C_Init+0x274>)
 8006338:	428b      	cmp	r3, r1
 800633a:	d819      	bhi.n	8006370 <HAL_I2C_Init+0x13c>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	1e59      	subs	r1, r3, #1
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	fbb1 f3f3 	udiv	r3, r1, r3
 800634a:	1c59      	adds	r1, r3, #1
 800634c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006350:	400b      	ands	r3, r1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_I2C_Init+0x138>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1e59      	subs	r1, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	fbb1 f3f3 	udiv	r3, r1, r3
 8006364:	3301      	adds	r3, #1
 8006366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636a:	e051      	b.n	8006410 <HAL_I2C_Init+0x1dc>
 800636c:	2304      	movs	r3, #4
 800636e:	e04f      	b.n	8006410 <HAL_I2C_Init+0x1dc>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d111      	bne.n	800639c <HAL_I2C_Init+0x168>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	1e58      	subs	r0, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6859      	ldr	r1, [r3, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	440b      	add	r3, r1
 8006386:	fbb0 f3f3 	udiv	r3, r0, r3
 800638a:	3301      	adds	r3, #1
 800638c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006390:	2b00      	cmp	r3, #0
 8006392:	bf0c      	ite	eq
 8006394:	2301      	moveq	r3, #1
 8006396:	2300      	movne	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	e012      	b.n	80063c2 <HAL_I2C_Init+0x18e>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	1e58      	subs	r0, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6859      	ldr	r1, [r3, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	0099      	lsls	r1, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80063b2:	3301      	adds	r3, #1
 80063b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_I2C_Init+0x196>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e022      	b.n	8006410 <HAL_I2C_Init+0x1dc>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10e      	bne.n	80063f0 <HAL_I2C_Init+0x1bc>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	1e58      	subs	r0, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6859      	ldr	r1, [r3, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	440b      	add	r3, r1
 80063e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80063e4:	3301      	adds	r3, #1
 80063e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ee:	e00f      	b.n	8006410 <HAL_I2C_Init+0x1dc>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1e58      	subs	r0, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	0099      	lsls	r1, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	fbb0 f3f3 	udiv	r3, r0, r3
 8006406:	3301      	adds	r3, #1
 8006408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800640c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	6809      	ldr	r1, [r1, #0]
 8006414:	4313      	orrs	r3, r2
 8006416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69da      	ldr	r2, [r3, #28]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800643e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6911      	ldr	r1, [r2, #16]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68d2      	ldr	r2, [r2, #12]
 800644a:	4311      	orrs	r1, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	430b      	orrs	r3, r1
 8006452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695a      	ldr	r2, [r3, #20]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	000186a0 	.word	0x000186a0
 80064ac:	001e847f 	.word	0x001e847f
 80064b0:	003d08ff 	.word	0x003d08ff
 80064b4:	431bde83 	.word	0x431bde83
 80064b8:	10624dd3 	.word	0x10624dd3

080064bc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e021      	b.n	8006512 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2224      	movs	r2, #36	; 0x24
 80064d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0201 	bic.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f821 	bl	800652e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800651a:	b480      	push	{r7}
 800651c:	b083      	sub	sp, #12
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	4608      	mov	r0, r1
 800654e:	4611      	mov	r1, r2
 8006550:	461a      	mov	r2, r3
 8006552:	4603      	mov	r3, r0
 8006554:	817b      	strh	r3, [r7, #10]
 8006556:	460b      	mov	r3, r1
 8006558:	813b      	strh	r3, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800655e:	f7fe fef3 	bl	8005348 <HAL_GetTick>
 8006562:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b20      	cmp	r3, #32
 800656e:	f040 80d9 	bne.w	8006724 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	2319      	movs	r3, #25
 8006578:	2201      	movs	r2, #1
 800657a:	496d      	ldr	r1, [pc, #436]	; (8006730 <HAL_I2C_Mem_Write+0x1ec>)
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fc89 	bl	8006e94 <I2C_WaitOnFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006588:	2302      	movs	r3, #2
 800658a:	e0cc      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_I2C_Mem_Write+0x56>
 8006596:	2302      	movs	r3, #2
 8006598:	e0c5      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d007      	beq.n	80065c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2221      	movs	r2, #33	; 0x21
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2240      	movs	r2, #64	; 0x40
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a3a      	ldr	r2, [r7, #32]
 80065ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4a4d      	ldr	r2, [pc, #308]	; (8006734 <HAL_I2C_Mem_Write+0x1f0>)
 8006600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006602:	88f8      	ldrh	r0, [r7, #6]
 8006604:	893a      	ldrh	r2, [r7, #8]
 8006606:	8979      	ldrh	r1, [r7, #10]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	4603      	mov	r3, r0
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fac4 	bl	8006ba0 <I2C_RequestMemoryWrite>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d052      	beq.n	80066c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e081      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fd0a 	bl	8007040 <I2C_WaitOnTXEFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00d      	beq.n	800664e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	2b04      	cmp	r3, #4
 8006638:	d107      	bne.n	800664a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e06b      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b04      	cmp	r3, #4
 800668a:	d11b      	bne.n	80066c4 <HAL_I2C_Mem_Write+0x180>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	d017      	beq.n	80066c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	781a      	ldrb	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1aa      	bne.n	8006622 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 fcf6 	bl	80070c2 <I2C_WaitOnBTFFlagUntilTimeout>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00d      	beq.n	80066f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d107      	bne.n	80066f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e016      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	e000      	b.n	8006726 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	00100002 	.word	0x00100002
 8006734:	ffff0000 	.word	0xffff0000

08006738 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08c      	sub	sp, #48	; 0x30
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	4608      	mov	r0, r1
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	4603      	mov	r3, r0
 8006748:	817b      	strh	r3, [r7, #10]
 800674a:	460b      	mov	r3, r1
 800674c:	813b      	strh	r3, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006752:	f7fe fdf9 	bl	8005348 <HAL_GetTick>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b20      	cmp	r3, #32
 8006762:	f040 8208 	bne.w	8006b76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	2319      	movs	r3, #25
 800676c:	2201      	movs	r2, #1
 800676e:	497b      	ldr	r1, [pc, #492]	; (800695c <HAL_I2C_Mem_Read+0x224>)
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fb8f 	bl	8006e94 <I2C_WaitOnFlagUntilTimeout>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800677c:	2302      	movs	r3, #2
 800677e:	e1fb      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_I2C_Mem_Read+0x56>
 800678a:	2302      	movs	r3, #2
 800678c:	e1f4      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d007      	beq.n	80067b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2222      	movs	r2, #34	; 0x22
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2240      	movs	r2, #64	; 0x40
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80067e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a5b      	ldr	r2, [pc, #364]	; (8006960 <HAL_I2C_Mem_Read+0x228>)
 80067f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067f6:	88f8      	ldrh	r0, [r7, #6]
 80067f8:	893a      	ldrh	r2, [r7, #8]
 80067fa:	8979      	ldrh	r1, [r7, #10]
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4603      	mov	r3, r0
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fa5e 	bl	8006cc8 <I2C_RequestMemoryRead>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e1b0      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d113      	bne.n	8006846 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800681e:	2300      	movs	r3, #0
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	623b      	str	r3, [r7, #32]
 8006832:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e184      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684a:	2b01      	cmp	r3, #1
 800684c:	d11b      	bne.n	8006886 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800685e:	2300      	movs	r3, #0
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	e164      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688a:	2b02      	cmp	r3, #2
 800688c:	d11b      	bne.n	80068c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ae:	2300      	movs	r3, #0
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	e144      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80068dc:	e138      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	f200 80f1 	bhi.w	8006aca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d123      	bne.n	8006938 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fc25 	bl	8007144 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e139      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691a      	ldr	r2, [r3, #16]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006936:	e10b      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800693c:	2b02      	cmp	r3, #2
 800693e:	d14e      	bne.n	80069de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	2200      	movs	r2, #0
 8006948:	4906      	ldr	r1, [pc, #24]	; (8006964 <HAL_I2C_Mem_Read+0x22c>)
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 faa2 	bl	8006e94 <I2C_WaitOnFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d008      	beq.n	8006968 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e10e      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
 800695a:	bf00      	nop
 800695c:	00100002 	.word	0x00100002
 8006960:	ffff0000 	.word	0xffff0000
 8006964:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069dc:	e0b8      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	2200      	movs	r2, #0
 80069e6:	4966      	ldr	r1, [pc, #408]	; (8006b80 <HAL_I2C_Mem_Read+0x448>)
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fa53 	bl	8006e94 <I2C_WaitOnFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0bf      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	2200      	movs	r2, #0
 8006a42:	494f      	ldr	r1, [pc, #316]	; (8006b80 <HAL_I2C_Mem_Read+0x448>)
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fa25 	bl	8006e94 <I2C_WaitOnFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e091      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ac8:	e042      	b.n	8006b50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006acc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fb38 	bl	8007144 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e04c      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d118      	bne.n	8006b50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f47f aec2 	bne.w	80068de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e000      	b.n	8006b78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b76:	2302      	movs	r3, #2
  }
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3728      	adds	r7, #40	; 0x28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	00010004 	.word	0x00010004

08006b84 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b92:	b2db      	uxtb	r3, r3
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	4608      	mov	r0, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	817b      	strh	r3, [r7, #10]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	813b      	strh	r3, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 f95c 	bl	8006e94 <I2C_WaitOnFlagUntilTimeout>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00c      	beq.n	8006bfc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e05f      	b.n	8006cbc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bfc:	897b      	ldrh	r3, [r7, #10]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	6a3a      	ldr	r2, [r7, #32]
 8006c10:	492c      	ldr	r1, [pc, #176]	; (8006cc4 <I2C_RequestMemoryWrite+0x124>)
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f995 	bl	8006f42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e04c      	b.n	8006cbc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c22:	2300      	movs	r3, #0
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3a:	6a39      	ldr	r1, [r7, #32]
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f9ff 	bl	8007040 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00d      	beq.n	8006c64 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d107      	bne.n	8006c60 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e02b      	b.n	8006cbc <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d105      	bne.n	8006c76 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c6a:	893b      	ldrh	r3, [r7, #8]
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	611a      	str	r2, [r3, #16]
 8006c74:	e021      	b.n	8006cba <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c76:	893b      	ldrh	r3, [r7, #8]
 8006c78:	0a1b      	lsrs	r3, r3, #8
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c86:	6a39      	ldr	r1, [r7, #32]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f9d9 	bl	8007040 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00d      	beq.n	8006cb0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d107      	bne.n	8006cac <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006caa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e005      	b.n	8006cbc <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cb0:	893b      	ldrh	r3, [r7, #8]
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	00010002 	.word	0x00010002

08006cc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	817b      	strh	r3, [r7, #10]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	813b      	strh	r3, [r7, #8]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cf0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f8c0 	bl	8006e94 <I2C_WaitOnFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00c      	beq.n	8006d34 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e0a9      	b.n	8006e88 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d34:	897b      	ldrh	r3, [r7, #10]
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	6a3a      	ldr	r2, [r7, #32]
 8006d48:	4951      	ldr	r1, [pc, #324]	; (8006e90 <I2C_RequestMemoryRead+0x1c8>)
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f8f9 	bl	8006f42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e096      	b.n	8006e88 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d72:	6a39      	ldr	r1, [r7, #32]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f963 	bl	8007040 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00d      	beq.n	8006d9c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d107      	bne.n	8006d98 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e075      	b.n	8006e88 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d105      	bne.n	8006dae <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006da2:	893b      	ldrh	r3, [r7, #8]
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	611a      	str	r2, [r3, #16]
 8006dac:	e021      	b.n	8006df2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006dae:	893b      	ldrh	r3, [r7, #8]
 8006db0:	0a1b      	lsrs	r3, r3, #8
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dbe:	6a39      	ldr	r1, [r7, #32]
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f93d 	bl	8007040 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00d      	beq.n	8006de8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d107      	bne.n	8006de4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006de2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e04f      	b.n	8006e88 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006de8:	893b      	ldrh	r3, [r7, #8]
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df4:	6a39      	ldr	r1, [r7, #32]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f922 	bl	8007040 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00d      	beq.n	8006e1e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d107      	bne.n	8006e1a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e034      	b.n	8006e88 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f82a 	bl	8006e94 <I2C_WaitOnFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00c      	beq.n	8006e60 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e013      	b.n	8006e88 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e60:	897b      	ldrh	r3, [r7, #10]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	f043 0301 	orr.w	r3, r3, #1
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	6a3a      	ldr	r2, [r7, #32]
 8006e74:	4906      	ldr	r1, [pc, #24]	; (8006e90 <I2C_RequestMemoryRead+0x1c8>)
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 f863 	bl	8006f42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	00010002 	.word	0x00010002

08006e94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ea4:	e025      	b.n	8006ef2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eac:	d021      	beq.n	8006ef2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eae:	f7fe fa4b 	bl	8005348 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d302      	bcc.n	8006ec4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d116      	bne.n	8006ef2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	f043 0220 	orr.w	r2, r3, #32
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e023      	b.n	8006f3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	0c1b      	lsrs	r3, r3, #16
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d10d      	bne.n	8006f18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	43da      	mvns	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4013      	ands	r3, r2
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bf0c      	ite	eq
 8006f0e:	2301      	moveq	r3, #1
 8006f10:	2300      	movne	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	e00c      	b.n	8006f32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	43da      	mvns	r2, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4013      	ands	r3, r2
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bf0c      	ite	eq
 8006f2a:	2301      	moveq	r3, #1
 8006f2c:	2300      	movne	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d0b6      	beq.n	8006ea6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
 8006f4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f50:	e051      	b.n	8006ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f60:	d123      	bne.n	8006faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	f043 0204 	orr.w	r2, r3, #4
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e046      	b.n	8007038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb0:	d021      	beq.n	8006ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fb2:	f7fe f9c9 	bl	8005348 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d302      	bcc.n	8006fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d116      	bne.n	8006ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	f043 0220 	orr.w	r2, r3, #32
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e020      	b.n	8007038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	0c1b      	lsrs	r3, r3, #16
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d10c      	bne.n	800701a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	43da      	mvns	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4013      	ands	r3, r2
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	bf14      	ite	ne
 8007012:	2301      	movne	r3, #1
 8007014:	2300      	moveq	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	e00b      	b.n	8007032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	43da      	mvns	r2, r3
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	4013      	ands	r3, r2
 8007026:	b29b      	uxth	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	bf14      	ite	ne
 800702c:	2301      	movne	r3, #1
 800702e:	2300      	moveq	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d18d      	bne.n	8006f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800704c:	e02d      	b.n	80070aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 f8ce 	bl	80071f0 <I2C_IsAcknowledgeFailed>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e02d      	b.n	80070ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007064:	d021      	beq.n	80070aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007066:	f7fe f96f 	bl	8005348 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	429a      	cmp	r2, r3
 8007074:	d302      	bcc.n	800707c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d116      	bne.n	80070aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2220      	movs	r2, #32
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	f043 0220 	orr.w	r2, r3, #32
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e007      	b.n	80070ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b4:	2b80      	cmp	r3, #128	; 0x80
 80070b6:	d1ca      	bne.n	800704e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070ce:	e02d      	b.n	800712c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f88d 	bl	80071f0 <I2C_IsAcknowledgeFailed>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e02d      	b.n	800713c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e6:	d021      	beq.n	800712c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070e8:	f7fe f92e 	bl	8005348 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d302      	bcc.n	80070fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d116      	bne.n	800712c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	f043 0220 	orr.w	r2, r3, #32
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e007      	b.n	800713c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b04      	cmp	r3, #4
 8007138:	d1ca      	bne.n	80070d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007150:	e042      	b.n	80071d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	f003 0310 	and.w	r3, r3, #16
 800715c:	2b10      	cmp	r3, #16
 800715e:	d119      	bne.n	8007194 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0210 	mvn.w	r2, #16
 8007168:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e029      	b.n	80071e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007194:	f7fe f8d8 	bl	8005348 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d302      	bcc.n	80071aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d116      	bne.n	80071d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	f043 0220 	orr.w	r2, r3, #32
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e007      	b.n	80071e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d1b5      	bne.n	8007152 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007206:	d11b      	bne.n	8007240 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007210:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	f043 0204 	orr.w	r2, r3, #4
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e000      	b.n	8007242 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e0bf      	b.n	80073e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8ba 	bl	80073f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007292:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6999      	ldr	r1, [r3, #24]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6899      	ldr	r1, [r3, #8]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	4b4a      	ldr	r3, [pc, #296]	; (80073ec <HAL_LTDC_Init+0x19c>)
 80072c4:	400b      	ands	r3, r1
 80072c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	041b      	lsls	r3, r3, #16
 80072ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6899      	ldr	r1, [r3, #8]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68d9      	ldr	r1, [r3, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	4b3e      	ldr	r3, [pc, #248]	; (80073ec <HAL_LTDC_Init+0x19c>)
 80072f2:	400b      	ands	r3, r1
 80072f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68d9      	ldr	r1, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1a      	ldr	r2, [r3, #32]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6919      	ldr	r1, [r3, #16]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	4b33      	ldr	r3, [pc, #204]	; (80073ec <HAL_LTDC_Init+0x19c>)
 8007320:	400b      	ands	r3, r1
 8007322:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	041b      	lsls	r3, r3, #16
 800732a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6919      	ldr	r1, [r3, #16]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6959      	ldr	r1, [r3, #20]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	4b27      	ldr	r3, [pc, #156]	; (80073ec <HAL_LTDC_Init+0x19c>)
 800734e:	400b      	ands	r3, r1
 8007350:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6959      	ldr	r1, [r3, #20]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007380:	041b      	lsls	r3, r3, #16
 8007382:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007392:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0206 	orr.w	r2, r2, #6
 80073be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	f000f800 	.word	0xf000f800

080073f0 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007404:	b5b0      	push	{r4, r5, r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_LTDC_ConfigLayer+0x1a>
 800741a:	2302      	movs	r3, #2
 800741c:	e02c      	b.n	8007478 <HAL_LTDC_ConfigLayer+0x74>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2202      	movs	r2, #2
 800742a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2134      	movs	r1, #52	; 0x34
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	4413      	add	r3, r2
 800743a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4614      	mov	r4, r2
 8007442:	461d      	mov	r5, r3
 8007444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800744a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800744c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800744e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 f83b 	bl	80074d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2201      	movs	r2, #1
 8007464:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bdb0      	pop	{r4, r5, r7, pc}

08007480 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_LTDC_EnableDither+0x16>
 8007492:	2302      	movs	r3, #2
 8007494:	e016      	b.n	80074c4 <HAL_LTDC_EnableDither+0x44>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2202      	movs	r2, #2
 80074a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80074a6:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <HAL_LTDC_EnableDither+0x50>)
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <HAL_LTDC_EnableDither+0x50>)
 80074ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	40016800 	.word	0x40016800

080074d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b089      	sub	sp, #36	; 0x24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	0c1b      	lsrs	r3, r3, #16
 80074ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074f0:	4413      	add	r3, r2
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	01db      	lsls	r3, r3, #7
 8007500:	4413      	add	r3, r2
 8007502:	3384      	adds	r3, #132	; 0x84
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	6812      	ldr	r2, [r2, #0]
 800750a:	4611      	mov	r1, r2
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	01d2      	lsls	r2, r2, #7
 8007510:	440a      	add	r2, r1
 8007512:	3284      	adds	r2, #132	; 0x84
 8007514:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007518:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	0c1b      	lsrs	r3, r3, #16
 8007526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800752a:	4413      	add	r3, r2
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4619      	mov	r1, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	01db      	lsls	r3, r3, #7
 8007538:	440b      	add	r3, r1
 800753a:	3384      	adds	r3, #132	; 0x84
 800753c:	4619      	mov	r1, r3
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4313      	orrs	r3, r2
 8007542:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007552:	4413      	add	r3, r2
 8007554:	041b      	lsls	r3, r3, #16
 8007556:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	01db      	lsls	r3, r3, #7
 8007562:	4413      	add	r3, r2
 8007564:	3384      	adds	r3, #132	; 0x84
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	6812      	ldr	r2, [r2, #0]
 800756c:	4611      	mov	r1, r2
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	01d2      	lsls	r2, r2, #7
 8007572:	440a      	add	r2, r1
 8007574:	3284      	adds	r2, #132	; 0x84
 8007576:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800757a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800758a:	4413      	add	r3, r2
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4619      	mov	r1, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	01db      	lsls	r3, r3, #7
 8007598:	440b      	add	r3, r1
 800759a:	3384      	adds	r3, #132	; 0x84
 800759c:	4619      	mov	r1, r3
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	01db      	lsls	r3, r3, #7
 80075ae:	4413      	add	r3, r2
 80075b0:	3384      	adds	r3, #132	; 0x84
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	6812      	ldr	r2, [r2, #0]
 80075b8:	4611      	mov	r1, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	01d2      	lsls	r2, r2, #7
 80075be:	440a      	add	r2, r1
 80075c0:	3284      	adds	r2, #132	; 0x84
 80075c2:	f023 0307 	bic.w	r3, r3, #7
 80075c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	01db      	lsls	r3, r3, #7
 80075d2:	4413      	add	r3, r2
 80075d4:	3384      	adds	r3, #132	; 0x84
 80075d6:	461a      	mov	r2, r3
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	061b      	lsls	r3, r3, #24
 80075f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	01db      	lsls	r3, r3, #7
 8007604:	4413      	add	r3, r2
 8007606:	3384      	adds	r3, #132	; 0x84
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	01db      	lsls	r3, r3, #7
 8007614:	4413      	add	r3, r2
 8007616:	3384      	adds	r3, #132	; 0x84
 8007618:	461a      	mov	r2, r3
 800761a:	2300      	movs	r3, #0
 800761c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007624:	461a      	mov	r2, r3
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	431a      	orrs	r2, r3
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	431a      	orrs	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4619      	mov	r1, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	440b      	add	r3, r1
 800763a:	3384      	adds	r3, #132	; 0x84
 800763c:	4619      	mov	r1, r3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	4313      	orrs	r3, r2
 8007642:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	01db      	lsls	r3, r3, #7
 800764e:	4413      	add	r3, r2
 8007650:	3384      	adds	r3, #132	; 0x84
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	6812      	ldr	r2, [r2, #0]
 8007658:	4611      	mov	r1, r2
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	01d2      	lsls	r2, r2, #7
 800765e:	440a      	add	r2, r1
 8007660:	3284      	adds	r2, #132	; 0x84
 8007662:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007666:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	01db      	lsls	r3, r3, #7
 8007672:	4413      	add	r3, r2
 8007674:	3384      	adds	r3, #132	; 0x84
 8007676:	461a      	mov	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	01db      	lsls	r3, r3, #7
 8007688:	4413      	add	r3, r2
 800768a:	3384      	adds	r3, #132	; 0x84
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	4611      	mov	r1, r2
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	01d2      	lsls	r2, r2, #7
 8007698:	440a      	add	r2, r1
 800769a:	3284      	adds	r2, #132	; 0x84
 800769c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80076a0:	f023 0307 	bic.w	r3, r3, #7
 80076a4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	69da      	ldr	r2, [r3, #28]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	68f9      	ldr	r1, [r7, #12]
 80076b0:	6809      	ldr	r1, [r1, #0]
 80076b2:	4608      	mov	r0, r1
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	01c9      	lsls	r1, r1, #7
 80076b8:	4401      	add	r1, r0
 80076ba:	3184      	adds	r1, #132	; 0x84
 80076bc:	4313      	orrs	r3, r2
 80076be:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	01db      	lsls	r3, r3, #7
 80076ca:	4413      	add	r3, r2
 80076cc:	3384      	adds	r3, #132	; 0x84
 80076ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	01db      	lsls	r3, r3, #7
 80076da:	4413      	add	r3, r2
 80076dc:	3384      	adds	r3, #132	; 0x84
 80076de:	461a      	mov	r2, r3
 80076e0:	2300      	movs	r3, #0
 80076e2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	01db      	lsls	r3, r3, #7
 80076ee:	4413      	add	r3, r2
 80076f0:	3384      	adds	r3, #132	; 0x84
 80076f2:	461a      	mov	r2, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d102      	bne.n	8007708 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007702:	2304      	movs	r3, #4
 8007704:	61fb      	str	r3, [r7, #28]
 8007706:	e01b      	b.n	8007740 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d102      	bne.n	8007716 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007710:	2303      	movs	r3, #3
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	e014      	b.n	8007740 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	2b04      	cmp	r3, #4
 800771c:	d00b      	beq.n	8007736 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007722:	2b02      	cmp	r3, #2
 8007724:	d007      	beq.n	8007736 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800772a:	2b03      	cmp	r3, #3
 800772c:	d003      	beq.n	8007736 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007732:	2b07      	cmp	r3, #7
 8007734:	d102      	bne.n	800773c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007736:	2302      	movs	r3, #2
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	e001      	b.n	8007740 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800773c:	2301      	movs	r3, #1
 800773e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	01db      	lsls	r3, r3, #7
 800774a:	4413      	add	r3, r2
 800774c:	3384      	adds	r3, #132	; 0x84
 800774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	6812      	ldr	r2, [r2, #0]
 8007754:	4611      	mov	r1, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	01d2      	lsls	r2, r2, #7
 800775a:	440a      	add	r2, r1
 800775c:	3284      	adds	r2, #132	; 0x84
 800775e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007762:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	fb02 f303 	mul.w	r3, r2, r3
 800776e:	041a      	lsls	r2, r3, #16
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6859      	ldr	r1, [r3, #4]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	1acb      	subs	r3, r1, r3
 800777a:	69f9      	ldr	r1, [r7, #28]
 800777c:	fb01 f303 	mul.w	r3, r1, r3
 8007780:	3303      	adds	r3, #3
 8007782:	68f9      	ldr	r1, [r7, #12]
 8007784:	6809      	ldr	r1, [r1, #0]
 8007786:	4608      	mov	r0, r1
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	01c9      	lsls	r1, r1, #7
 800778c:	4401      	add	r1, r0
 800778e:	3184      	adds	r1, #132	; 0x84
 8007790:	4313      	orrs	r3, r2
 8007792:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	01db      	lsls	r3, r3, #7
 800779e:	4413      	add	r3, r2
 80077a0:	3384      	adds	r3, #132	; 0x84
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	4611      	mov	r1, r2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	01d2      	lsls	r2, r2, #7
 80077ae:	440a      	add	r2, r1
 80077b0:	3284      	adds	r2, #132	; 0x84
 80077b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80077b6:	f023 0307 	bic.w	r3, r3, #7
 80077ba:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	01db      	lsls	r3, r3, #7
 80077c6:	4413      	add	r3, r2
 80077c8:	3384      	adds	r3, #132	; 0x84
 80077ca:	461a      	mov	r2, r3
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	01db      	lsls	r3, r3, #7
 80077dc:	4413      	add	r3, r2
 80077de:	3384      	adds	r3, #132	; 0x84
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	6812      	ldr	r2, [r2, #0]
 80077e6:	4611      	mov	r1, r2
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	01d2      	lsls	r2, r2, #7
 80077ec:	440a      	add	r2, r1
 80077ee:	3284      	adds	r2, #132	; 0x84
 80077f0:	f043 0301 	orr.w	r3, r3, #1
 80077f4:	6013      	str	r3, [r2, #0]
}
 80077f6:	bf00      	nop
 80077f8:	3724      	adds	r7, #36	; 0x24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
	...

08007804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e25e      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d075      	beq.n	800790e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007822:	4b88      	ldr	r3, [pc, #544]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 030c 	and.w	r3, r3, #12
 800782a:	2b04      	cmp	r3, #4
 800782c:	d00c      	beq.n	8007848 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800782e:	4b85      	ldr	r3, [pc, #532]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007836:	2b08      	cmp	r3, #8
 8007838:	d112      	bne.n	8007860 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800783a:	4b82      	ldr	r3, [pc, #520]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007846:	d10b      	bne.n	8007860 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007848:	4b7e      	ldr	r3, [pc, #504]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d05b      	beq.n	800790c <HAL_RCC_OscConfig+0x108>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d157      	bne.n	800790c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e239      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007868:	d106      	bne.n	8007878 <HAL_RCC_OscConfig+0x74>
 800786a:	4b76      	ldr	r3, [pc, #472]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a75      	ldr	r2, [pc, #468]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	e01d      	b.n	80078b4 <HAL_RCC_OscConfig+0xb0>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007880:	d10c      	bne.n	800789c <HAL_RCC_OscConfig+0x98>
 8007882:	4b70      	ldr	r3, [pc, #448]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a6f      	ldr	r2, [pc, #444]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	4b6d      	ldr	r3, [pc, #436]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a6c      	ldr	r2, [pc, #432]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	e00b      	b.n	80078b4 <HAL_RCC_OscConfig+0xb0>
 800789c:	4b69      	ldr	r3, [pc, #420]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a68      	ldr	r2, [pc, #416]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 80078a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	4b66      	ldr	r3, [pc, #408]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a65      	ldr	r2, [pc, #404]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 80078ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d013      	beq.n	80078e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078bc:	f7fd fd44 	bl	8005348 <HAL_GetTick>
 80078c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078c2:	e008      	b.n	80078d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078c4:	f7fd fd40 	bl	8005348 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b64      	cmp	r3, #100	; 0x64
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e1fe      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078d6:	4b5b      	ldr	r3, [pc, #364]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0f0      	beq.n	80078c4 <HAL_RCC_OscConfig+0xc0>
 80078e2:	e014      	b.n	800790e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e4:	f7fd fd30 	bl	8005348 <HAL_GetTick>
 80078e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ea:	e008      	b.n	80078fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078ec:	f7fd fd2c 	bl	8005348 <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	2b64      	cmp	r3, #100	; 0x64
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e1ea      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078fe:	4b51      	ldr	r3, [pc, #324]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1f0      	bne.n	80078ec <HAL_RCC_OscConfig+0xe8>
 800790a:	e000      	b.n	800790e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800790c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d063      	beq.n	80079e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800791a:	4b4a      	ldr	r3, [pc, #296]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 030c 	and.w	r3, r3, #12
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007926:	4b47      	ldr	r3, [pc, #284]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800792e:	2b08      	cmp	r3, #8
 8007930:	d11c      	bne.n	800796c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007932:	4b44      	ldr	r3, [pc, #272]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d116      	bne.n	800796c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800793e:	4b41      	ldr	r3, [pc, #260]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <HAL_RCC_OscConfig+0x152>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d001      	beq.n	8007956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e1be      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007956:	4b3b      	ldr	r3, [pc, #236]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	4937      	ldr	r1, [pc, #220]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007966:	4313      	orrs	r3, r2
 8007968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800796a:	e03a      	b.n	80079e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d020      	beq.n	80079b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007974:	4b34      	ldr	r3, [pc, #208]	; (8007a48 <HAL_RCC_OscConfig+0x244>)
 8007976:	2201      	movs	r2, #1
 8007978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800797a:	f7fd fce5 	bl	8005348 <HAL_GetTick>
 800797e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007980:	e008      	b.n	8007994 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007982:	f7fd fce1 	bl	8005348 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d901      	bls.n	8007994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e19f      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007994:	4b2b      	ldr	r3, [pc, #172]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0f0      	beq.n	8007982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079a0:	4b28      	ldr	r3, [pc, #160]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	4925      	ldr	r1, [pc, #148]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	600b      	str	r3, [r1, #0]
 80079b4:	e015      	b.n	80079e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079b6:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <HAL_RCC_OscConfig+0x244>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079bc:	f7fd fcc4 	bl	8005348 <HAL_GetTick>
 80079c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079c2:	e008      	b.n	80079d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079c4:	f7fd fcc0 	bl	8005348 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e17e      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079d6:	4b1b      	ldr	r3, [pc, #108]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f0      	bne.n	80079c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0308 	and.w	r3, r3, #8
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d036      	beq.n	8007a5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d016      	beq.n	8007a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079f6:	4b15      	ldr	r3, [pc, #84]	; (8007a4c <HAL_RCC_OscConfig+0x248>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079fc:	f7fd fca4 	bl	8005348 <HAL_GetTick>
 8007a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a04:	f7fd fca0 	bl	8005348 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e15e      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a16:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <HAL_RCC_OscConfig+0x240>)
 8007a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0f0      	beq.n	8007a04 <HAL_RCC_OscConfig+0x200>
 8007a22:	e01b      	b.n	8007a5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a24:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <HAL_RCC_OscConfig+0x248>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a2a:	f7fd fc8d 	bl	8005348 <HAL_GetTick>
 8007a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a30:	e00e      	b.n	8007a50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a32:	f7fd fc89 	bl	8005348 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d907      	bls.n	8007a50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e147      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
 8007a44:	40023800 	.word	0x40023800
 8007a48:	42470000 	.word	0x42470000
 8007a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a50:	4b88      	ldr	r3, [pc, #544]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1ea      	bne.n	8007a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 8097 	beq.w	8007b98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a6e:	4b81      	ldr	r3, [pc, #516]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10f      	bne.n	8007a9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60bb      	str	r3, [r7, #8]
 8007a7e:	4b7d      	ldr	r3, [pc, #500]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	4a7c      	ldr	r2, [pc, #496]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a88:	6413      	str	r3, [r2, #64]	; 0x40
 8007a8a:	4b7a      	ldr	r3, [pc, #488]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a92:	60bb      	str	r3, [r7, #8]
 8007a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a96:	2301      	movs	r3, #1
 8007a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a9a:	4b77      	ldr	r3, [pc, #476]	; (8007c78 <HAL_RCC_OscConfig+0x474>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d118      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007aa6:	4b74      	ldr	r3, [pc, #464]	; (8007c78 <HAL_RCC_OscConfig+0x474>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a73      	ldr	r2, [pc, #460]	; (8007c78 <HAL_RCC_OscConfig+0x474>)
 8007aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ab2:	f7fd fc49 	bl	8005348 <HAL_GetTick>
 8007ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ab8:	e008      	b.n	8007acc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aba:	f7fd fc45 	bl	8005348 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d901      	bls.n	8007acc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e103      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007acc:	4b6a      	ldr	r3, [pc, #424]	; (8007c78 <HAL_RCC_OscConfig+0x474>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0f0      	beq.n	8007aba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d106      	bne.n	8007aee <HAL_RCC_OscConfig+0x2ea>
 8007ae0:	4b64      	ldr	r3, [pc, #400]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae4:	4a63      	ldr	r2, [pc, #396]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007ae6:	f043 0301 	orr.w	r3, r3, #1
 8007aea:	6713      	str	r3, [r2, #112]	; 0x70
 8007aec:	e01c      	b.n	8007b28 <HAL_RCC_OscConfig+0x324>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	2b05      	cmp	r3, #5
 8007af4:	d10c      	bne.n	8007b10 <HAL_RCC_OscConfig+0x30c>
 8007af6:	4b5f      	ldr	r3, [pc, #380]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afa:	4a5e      	ldr	r2, [pc, #376]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007afc:	f043 0304 	orr.w	r3, r3, #4
 8007b00:	6713      	str	r3, [r2, #112]	; 0x70
 8007b02:	4b5c      	ldr	r3, [pc, #368]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b06:	4a5b      	ldr	r2, [pc, #364]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007b08:	f043 0301 	orr.w	r3, r3, #1
 8007b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b0e:	e00b      	b.n	8007b28 <HAL_RCC_OscConfig+0x324>
 8007b10:	4b58      	ldr	r3, [pc, #352]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b14:	4a57      	ldr	r2, [pc, #348]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007b16:	f023 0301 	bic.w	r3, r3, #1
 8007b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b1c:	4b55      	ldr	r3, [pc, #340]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b20:	4a54      	ldr	r2, [pc, #336]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007b22:	f023 0304 	bic.w	r3, r3, #4
 8007b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d015      	beq.n	8007b5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b30:	f7fd fc0a 	bl	8005348 <HAL_GetTick>
 8007b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b36:	e00a      	b.n	8007b4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b38:	f7fd fc06 	bl	8005348 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e0c2      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b4e:	4b49      	ldr	r3, [pc, #292]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0ee      	beq.n	8007b38 <HAL_RCC_OscConfig+0x334>
 8007b5a:	e014      	b.n	8007b86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b5c:	f7fd fbf4 	bl	8005348 <HAL_GetTick>
 8007b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b62:	e00a      	b.n	8007b7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b64:	f7fd fbf0 	bl	8005348 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e0ac      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b7a:	4b3e      	ldr	r3, [pc, #248]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1ee      	bne.n	8007b64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d105      	bne.n	8007b98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b8c:	4b39      	ldr	r3, [pc, #228]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	4a38      	ldr	r2, [pc, #224]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8098 	beq.w	8007cd2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ba2:	4b34      	ldr	r3, [pc, #208]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 030c 	and.w	r3, r3, #12
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d05c      	beq.n	8007c68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d141      	bne.n	8007c3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bb6:	4b31      	ldr	r3, [pc, #196]	; (8007c7c <HAL_RCC_OscConfig+0x478>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bbc:	f7fd fbc4 	bl	8005348 <HAL_GetTick>
 8007bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bc4:	f7fd fbc0 	bl	8005348 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e07e      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bd6:	4b27      	ldr	r3, [pc, #156]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1f0      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	69da      	ldr	r2, [r3, #28]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	019b      	lsls	r3, r3, #6
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf8:	085b      	lsrs	r3, r3, #1
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	041b      	lsls	r3, r3, #16
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	061b      	lsls	r3, r3, #24
 8007c06:	491b      	ldr	r1, [pc, #108]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c0c:	4b1b      	ldr	r3, [pc, #108]	; (8007c7c <HAL_RCC_OscConfig+0x478>)
 8007c0e:	2201      	movs	r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c12:	f7fd fb99 	bl	8005348 <HAL_GetTick>
 8007c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c18:	e008      	b.n	8007c2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c1a:	f7fd fb95 	bl	8005348 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e053      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c2c:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0f0      	beq.n	8007c1a <HAL_RCC_OscConfig+0x416>
 8007c38:	e04b      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c3a:	4b10      	ldr	r3, [pc, #64]	; (8007c7c <HAL_RCC_OscConfig+0x478>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c40:	f7fd fb82 	bl	8005348 <HAL_GetTick>
 8007c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c46:	e008      	b.n	8007c5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c48:	f7fd fb7e 	bl	8005348 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d901      	bls.n	8007c5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e03c      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c5a:	4b06      	ldr	r3, [pc, #24]	; (8007c74 <HAL_RCC_OscConfig+0x470>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1f0      	bne.n	8007c48 <HAL_RCC_OscConfig+0x444>
 8007c66:	e034      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d107      	bne.n	8007c80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e02f      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
 8007c74:	40023800 	.word	0x40023800
 8007c78:	40007000 	.word	0x40007000
 8007c7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c80:	4b16      	ldr	r3, [pc, #88]	; (8007cdc <HAL_RCC_OscConfig+0x4d8>)
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d11c      	bne.n	8007cce <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d115      	bne.n	8007cce <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ca8:	4013      	ands	r3, r2
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d10d      	bne.n	8007cce <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d106      	bne.n	8007cce <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d001      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e000      	b.n	8007cd4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	40023800 	.word	0x40023800

08007ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e0cc      	b.n	8007e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cf4:	4b68      	ldr	r3, [pc, #416]	; (8007e98 <HAL_RCC_ClockConfig+0x1b8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d90c      	bls.n	8007d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d02:	4b65      	ldr	r3, [pc, #404]	; (8007e98 <HAL_RCC_ClockConfig+0x1b8>)
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d0a:	4b63      	ldr	r3, [pc, #396]	; (8007e98 <HAL_RCC_ClockConfig+0x1b8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 030f 	and.w	r3, r3, #15
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d001      	beq.n	8007d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e0b8      	b.n	8007e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d020      	beq.n	8007d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d005      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d34:	4b59      	ldr	r3, [pc, #356]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	4a58      	ldr	r2, [pc, #352]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0308 	and.w	r3, r3, #8
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d005      	beq.n	8007d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d4c:	4b53      	ldr	r3, [pc, #332]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	4a52      	ldr	r2, [pc, #328]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d58:	4b50      	ldr	r3, [pc, #320]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	494d      	ldr	r1, [pc, #308]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d044      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d107      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d7e:	4b47      	ldr	r3, [pc, #284]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d119      	bne.n	8007dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e07f      	b.n	8007e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d003      	beq.n	8007d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d107      	bne.n	8007dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d9e:	4b3f      	ldr	r3, [pc, #252]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e06f      	b.n	8007e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dae:	4b3b      	ldr	r3, [pc, #236]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e067      	b.n	8007e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dbe:	4b37      	ldr	r3, [pc, #220]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f023 0203 	bic.w	r2, r3, #3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	4934      	ldr	r1, [pc, #208]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007dd0:	f7fd faba 	bl	8005348 <HAL_GetTick>
 8007dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dd6:	e00a      	b.n	8007dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dd8:	f7fd fab6 	bl	8005348 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d901      	bls.n	8007dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e04f      	b.n	8007e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dee:	4b2b      	ldr	r3, [pc, #172]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f003 020c 	and.w	r2, r3, #12
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d1eb      	bne.n	8007dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e00:	4b25      	ldr	r3, [pc, #148]	; (8007e98 <HAL_RCC_ClockConfig+0x1b8>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 030f 	and.w	r3, r3, #15
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d20c      	bcs.n	8007e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e0e:	4b22      	ldr	r3, [pc, #136]	; (8007e98 <HAL_RCC_ClockConfig+0x1b8>)
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	b2d2      	uxtb	r2, r2
 8007e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e16:	4b20      	ldr	r3, [pc, #128]	; (8007e98 <HAL_RCC_ClockConfig+0x1b8>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d001      	beq.n	8007e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e032      	b.n	8007e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d008      	beq.n	8007e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e34:	4b19      	ldr	r3, [pc, #100]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	4916      	ldr	r1, [pc, #88]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0308 	and.w	r3, r3, #8
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d009      	beq.n	8007e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e52:	4b12      	ldr	r3, [pc, #72]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	490e      	ldr	r1, [pc, #56]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e66:	f000 f821 	bl	8007eac <HAL_RCC_GetSysClockFreq>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	4b0b      	ldr	r3, [pc, #44]	; (8007e9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	091b      	lsrs	r3, r3, #4
 8007e72:	f003 030f 	and.w	r3, r3, #15
 8007e76:	490a      	ldr	r1, [pc, #40]	; (8007ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8007e78:	5ccb      	ldrb	r3, [r1, r3]
 8007e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e7e:	4a09      	ldr	r2, [pc, #36]	; (8007ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8007e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e82:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fd fa1a 	bl	80052c0 <HAL_InitTick>

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	40023c00 	.word	0x40023c00
 8007e9c:	40023800 	.word	0x40023800
 8007ea0:	0800a21c 	.word	0x0800a21c
 8007ea4:	200003a4 	.word	0x200003a4
 8007ea8:	2000043c 	.word	0x2000043c

08007eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eb0:	b094      	sub	sp, #80	; 0x50
 8007eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8007eb8:	2300      	movs	r3, #0
 8007eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ec4:	4b79      	ldr	r3, [pc, #484]	; (80080ac <HAL_RCC_GetSysClockFreq+0x200>)
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f003 030c 	and.w	r3, r3, #12
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d00d      	beq.n	8007eec <HAL_RCC_GetSysClockFreq+0x40>
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	f200 80e1 	bhi.w	8008098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d003      	beq.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007ede:	e0db      	b.n	8008098 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ee0:	4b73      	ldr	r3, [pc, #460]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ee2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007ee4:	e0db      	b.n	800809e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ee6:	4b73      	ldr	r3, [pc, #460]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ee8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007eea:	e0d8      	b.n	800809e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007eec:	4b6f      	ldr	r3, [pc, #444]	; (80080ac <HAL_RCC_GetSysClockFreq+0x200>)
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ef4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ef6:	4b6d      	ldr	r3, [pc, #436]	; (80080ac <HAL_RCC_GetSysClockFreq+0x200>)
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d063      	beq.n	8007fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f02:	4b6a      	ldr	r3, [pc, #424]	; (80080ac <HAL_RCC_GetSysClockFreq+0x200>)
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	2200      	movs	r2, #0
 8007f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f14:	633b      	str	r3, [r7, #48]	; 0x30
 8007f16:	2300      	movs	r3, #0
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
 8007f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007f1e:	4622      	mov	r2, r4
 8007f20:	462b      	mov	r3, r5
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f04f 0100 	mov.w	r1, #0
 8007f2a:	0159      	lsls	r1, r3, #5
 8007f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f30:	0150      	lsls	r0, r2, #5
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4621      	mov	r1, r4
 8007f38:	1a51      	subs	r1, r2, r1
 8007f3a:	6139      	str	r1, [r7, #16]
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	f04f 0200 	mov.w	r2, #0
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f50:	4659      	mov	r1, fp
 8007f52:	018b      	lsls	r3, r1, #6
 8007f54:	4651      	mov	r1, sl
 8007f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f5a:	4651      	mov	r1, sl
 8007f5c:	018a      	lsls	r2, r1, #6
 8007f5e:	4651      	mov	r1, sl
 8007f60:	ebb2 0801 	subs.w	r8, r2, r1
 8007f64:	4659      	mov	r1, fp
 8007f66:	eb63 0901 	sbc.w	r9, r3, r1
 8007f6a:	f04f 0200 	mov.w	r2, #0
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f7e:	4690      	mov	r8, r2
 8007f80:	4699      	mov	r9, r3
 8007f82:	4623      	mov	r3, r4
 8007f84:	eb18 0303 	adds.w	r3, r8, r3
 8007f88:	60bb      	str	r3, [r7, #8]
 8007f8a:	462b      	mov	r3, r5
 8007f8c:	eb49 0303 	adc.w	r3, r9, r3
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	f04f 0200 	mov.w	r2, #0
 8007f96:	f04f 0300 	mov.w	r3, #0
 8007f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	024b      	lsls	r3, r1, #9
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007fa8:	4621      	mov	r1, r4
 8007faa:	024a      	lsls	r2, r1, #9
 8007fac:	4610      	mov	r0, r2
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fbc:	f7f8 fdfc 	bl	8000bb8 <__aeabi_uldivmod>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fc8:	e058      	b.n	800807c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fca:	4b38      	ldr	r3, [pc, #224]	; (80080ac <HAL_RCC_GetSysClockFreq+0x200>)
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	099b      	lsrs	r3, r3, #6
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007fda:	623b      	str	r3, [r7, #32]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
 8007fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	f04f 0000 	mov.w	r0, #0
 8007fec:	f04f 0100 	mov.w	r1, #0
 8007ff0:	0159      	lsls	r1, r3, #5
 8007ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ff6:	0150      	lsls	r0, r2, #5
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8008002:	4649      	mov	r1, r9
 8008004:	eb63 0b01 	sbc.w	fp, r3, r1
 8008008:	f04f 0200 	mov.w	r2, #0
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800801c:	ebb2 040a 	subs.w	r4, r2, sl
 8008020:	eb63 050b 	sbc.w	r5, r3, fp
 8008024:	f04f 0200 	mov.w	r2, #0
 8008028:	f04f 0300 	mov.w	r3, #0
 800802c:	00eb      	lsls	r3, r5, #3
 800802e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008032:	00e2      	lsls	r2, r4, #3
 8008034:	4614      	mov	r4, r2
 8008036:	461d      	mov	r5, r3
 8008038:	4643      	mov	r3, r8
 800803a:	18e3      	adds	r3, r4, r3
 800803c:	603b      	str	r3, [r7, #0]
 800803e:	464b      	mov	r3, r9
 8008040:	eb45 0303 	adc.w	r3, r5, r3
 8008044:	607b      	str	r3, [r7, #4]
 8008046:	f04f 0200 	mov.w	r2, #0
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008052:	4629      	mov	r1, r5
 8008054:	028b      	lsls	r3, r1, #10
 8008056:	4621      	mov	r1, r4
 8008058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800805c:	4621      	mov	r1, r4
 800805e:	028a      	lsls	r2, r1, #10
 8008060:	4610      	mov	r0, r2
 8008062:	4619      	mov	r1, r3
 8008064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008066:	2200      	movs	r2, #0
 8008068:	61bb      	str	r3, [r7, #24]
 800806a:	61fa      	str	r2, [r7, #28]
 800806c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008070:	f7f8 fda2 	bl	8000bb8 <__aeabi_uldivmod>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4613      	mov	r3, r2
 800807a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800807c:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <HAL_RCC_GetSysClockFreq+0x200>)
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	0c1b      	lsrs	r3, r3, #16
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	3301      	adds	r3, #1
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800808c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800808e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008090:	fbb2 f3f3 	udiv	r3, r2, r3
 8008094:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008096:	e002      	b.n	800809e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008098:	4b05      	ldr	r3, [pc, #20]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800809a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800809c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800809e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3750      	adds	r7, #80	; 0x50
 80080a4:	46bd      	mov	sp, r7
 80080a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080aa:	bf00      	nop
 80080ac:	40023800 	.word	0x40023800
 80080b0:	00f42400 	.word	0x00f42400
 80080b4:	007a1200 	.word	0x007a1200

080080b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080bc:	4b03      	ldr	r3, [pc, #12]	; (80080cc <HAL_RCC_GetHCLKFreq+0x14>)
 80080be:	681b      	ldr	r3, [r3, #0]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	200003a4 	.word	0x200003a4

080080d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080d4:	f7ff fff0 	bl	80080b8 <HAL_RCC_GetHCLKFreq>
 80080d8:	4602      	mov	r2, r0
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	0a9b      	lsrs	r3, r3, #10
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	4903      	ldr	r1, [pc, #12]	; (80080f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080e6:	5ccb      	ldrb	r3, [r1, r3]
 80080e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	40023800 	.word	0x40023800
 80080f4:	0800a22c 	.word	0x0800a22c

080080f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10b      	bne.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800811c:	2b00      	cmp	r3, #0
 800811e:	d105      	bne.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008128:	2b00      	cmp	r3, #0
 800812a:	d075      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800812c:	4b91      	ldr	r3, [pc, #580]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008132:	f7fd f909 	bl	8005348 <HAL_GetTick>
 8008136:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008138:	e008      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800813a:	f7fd f905 	bl	8005348 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	2b02      	cmp	r3, #2
 8008146:	d901      	bls.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e189      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800814c:	4b8a      	ldr	r3, [pc, #552]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1f0      	bne.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	d009      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	019a      	lsls	r2, r3, #6
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	071b      	lsls	r3, r3, #28
 8008170:	4981      	ldr	r1, [pc, #516]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008172:	4313      	orrs	r3, r2
 8008174:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0302 	and.w	r3, r3, #2
 8008180:	2b00      	cmp	r3, #0
 8008182:	d01f      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008184:	4b7c      	ldr	r3, [pc, #496]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800818a:	0f1b      	lsrs	r3, r3, #28
 800818c:	f003 0307 	and.w	r3, r3, #7
 8008190:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	019a      	lsls	r2, r3, #6
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	061b      	lsls	r3, r3, #24
 800819e:	431a      	orrs	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	071b      	lsls	r3, r3, #28
 80081a4:	4974      	ldr	r1, [pc, #464]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80081ac:	4b72      	ldr	r3, [pc, #456]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b2:	f023 021f 	bic.w	r2, r3, #31
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	496e      	ldr	r1, [pc, #440]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00d      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	019a      	lsls	r2, r3, #6
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	061b      	lsls	r3, r3, #24
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	071b      	lsls	r3, r3, #28
 80081e4:	4964      	ldr	r1, [pc, #400]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80081ec:	4b61      	ldr	r3, [pc, #388]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081f2:	f7fd f8a9 	bl	8005348 <HAL_GetTick>
 80081f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081f8:	e008      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80081fa:	f7fd f8a5 	bl	8005348 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	2b02      	cmp	r3, #2
 8008206:	d901      	bls.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e129      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800820c:	4b5a      	ldr	r3, [pc, #360]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d0f0      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b00      	cmp	r3, #0
 8008222:	d105      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800822c:	2b00      	cmp	r3, #0
 800822e:	d079      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008230:	4b52      	ldr	r3, [pc, #328]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008236:	f7fd f887 	bl	8005348 <HAL_GetTick>
 800823a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800823c:	e008      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800823e:	f7fd f883 	bl	8005348 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d901      	bls.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e107      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008250:	4b49      	ldr	r3, [pc, #292]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800825c:	d0ef      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0304 	and.w	r3, r3, #4
 8008266:	2b00      	cmp	r3, #0
 8008268:	d020      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800826a:	4b43      	ldr	r3, [pc, #268]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800826c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008270:	0f1b      	lsrs	r3, r3, #28
 8008272:	f003 0307 	and.w	r3, r3, #7
 8008276:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	019a      	lsls	r2, r3, #6
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	061b      	lsls	r3, r3, #24
 8008284:	431a      	orrs	r2, r3
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	071b      	lsls	r3, r3, #28
 800828a:	493b      	ldr	r1, [pc, #236]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800828c:	4313      	orrs	r3, r2
 800828e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008292:	4b39      	ldr	r3, [pc, #228]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008298:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	4934      	ldr	r1, [pc, #208]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01e      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80082b8:	4b2f      	ldr	r3, [pc, #188]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082be:	0e1b      	lsrs	r3, r3, #24
 80082c0:	f003 030f 	and.w	r3, r3, #15
 80082c4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	019a      	lsls	r2, r3, #6
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	061b      	lsls	r3, r3, #24
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	071b      	lsls	r3, r3, #28
 80082d8:	4927      	ldr	r1, [pc, #156]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80082e0:	4b25      	ldr	r3, [pc, #148]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	4922      	ldr	r1, [pc, #136]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80082f6:	4b21      	ldr	r3, [pc, #132]	; (800837c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082fc:	f7fd f824 	bl	8005348 <HAL_GetTick>
 8008300:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008302:	e008      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008304:	f7fd f820 	bl	8005348 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d901      	bls.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e0a4      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008316:	4b18      	ldr	r3, [pc, #96]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800831e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008322:	d1ef      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 808b 	beq.w	8008448 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008332:	2300      	movs	r3, #0
 8008334:	60fb      	str	r3, [r7, #12]
 8008336:	4b10      	ldr	r3, [pc, #64]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	4a0f      	ldr	r2, [pc, #60]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800833c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008340:	6413      	str	r3, [r2, #64]	; 0x40
 8008342:	4b0d      	ldr	r3, [pc, #52]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800834e:	4b0c      	ldr	r3, [pc, #48]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a0b      	ldr	r2, [pc, #44]	; (8008380 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008358:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800835a:	f7fc fff5 	bl	8005348 <HAL_GetTick>
 800835e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008360:	e010      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008362:	f7fc fff1 	bl	8005348 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b02      	cmp	r3, #2
 800836e:	d909      	bls.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e075      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008374:	42470068 	.word	0x42470068
 8008378:	40023800 	.word	0x40023800
 800837c:	42470070 	.word	0x42470070
 8008380:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008384:	4b38      	ldr	r3, [pc, #224]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0e8      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008390:	4b36      	ldr	r3, [pc, #216]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008398:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d02f      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d028      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083ae:	4b2f      	ldr	r3, [pc, #188]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083b8:	4b2d      	ldr	r3, [pc, #180]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80083ba:	2201      	movs	r2, #1
 80083bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083be:	4b2c      	ldr	r3, [pc, #176]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80083c4:	4a29      	ldr	r2, [pc, #164]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083ca:	4b28      	ldr	r3, [pc, #160]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d114      	bne.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80083d6:	f7fc ffb7 	bl	8005348 <HAL_GetTick>
 80083da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083dc:	e00a      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083de:	f7fc ffb3 	bl	8005348 <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d901      	bls.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e035      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083f4:	4b1d      	ldr	r3, [pc, #116]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0ee      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800840c:	d10d      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800840e:	4b17      	ldr	r3, [pc, #92]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800841e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008422:	4912      	ldr	r1, [pc, #72]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008424:	4313      	orrs	r3, r2
 8008426:	608b      	str	r3, [r1, #8]
 8008428:	e005      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800842a:	4b10      	ldr	r3, [pc, #64]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	4a0f      	ldr	r2, [pc, #60]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008430:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008434:	6093      	str	r3, [r2, #8]
 8008436:	4b0d      	ldr	r3, [pc, #52]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008438:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008442:	490a      	ldr	r1, [pc, #40]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008444:	4313      	orrs	r3, r2
 8008446:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0310 	and.w	r3, r3, #16
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800845a:	4b06      	ldr	r3, [pc, #24]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800845c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	40007000 	.word	0x40007000
 800846c:	40023800 	.word	0x40023800
 8008470:	42470e40 	.word	0x42470e40
 8008474:	424711e0 	.word	0x424711e0

08008478 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e025      	b.n	80084d8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b00      	cmp	r3, #0
 8008496:	d106      	bne.n	80084a6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f81d 	bl	80084e0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2202      	movs	r2, #2
 80084aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	3304      	adds	r3, #4
 80084b6:	4619      	mov	r1, r3
 80084b8:	4610      	mov	r0, r2
 80084ba:	f000 ff0f 	bl	80092dc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	461a      	mov	r2, r3
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	f000 ff7a 	bl	80093c2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b02      	cmp	r3, #2
 800850a:	d101      	bne.n	8008510 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800850c:	2302      	movs	r3, #2
 800850e:	e018      	b.n	8008542 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2202      	movs	r2, #2
 8008514:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	4618      	mov	r0, r3
 8008522:	f000 ffcd 	bl	80094c0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d104      	bne.n	8008538 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2205      	movs	r2, #5
 8008532:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008536:	e003      	b.n	8008540 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b02      	cmp	r3, #2
 800855e:	d101      	bne.n	8008564 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008560:	2302      	movs	r3, #2
 8008562:	e00e      	b.n	8008582 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 ffe0 	bl	8009538 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e05d      	b.n	8008658 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d106      	bne.n	80085b6 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f87d 	bl	80086b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2202      	movs	r2, #2
 80085ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	431a      	orrs	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	431a      	orrs	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	ea42 0103 	orr.w	r1, r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	0c1b      	lsrs	r3, r3, #16
 8008614:	f003 0104 	and.w	r1, r3, #4
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	430a      	orrs	r2, r1
 8008622:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800862c:	d104      	bne.n	8008638 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008636:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69da      	ldr	r2, [r3, #28]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008646:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e01a      	b.n	80086a8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2202      	movs	r2, #2
 8008676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008688:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f81a 	bl	80086c4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	4613      	mov	r3, r2
 80086e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d101      	bne.n	80086fa <HAL_SPI_Transmit+0x22>
 80086f6:	2302      	movs	r3, #2
 80086f8:	e140      	b.n	800897c <HAL_SPI_Transmit+0x2a4>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008702:	f7fc fe21 	bl	8005348 <HAL_GetTick>
 8008706:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008708:	88fb      	ldrh	r3, [r7, #6]
 800870a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b01      	cmp	r3, #1
 8008716:	d002      	beq.n	800871e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008718:	2302      	movs	r3, #2
 800871a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800871c:	e125      	b.n	800896a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <HAL_SPI_Transmit+0x52>
 8008724:	88fb      	ldrh	r3, [r7, #6]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d102      	bne.n	8008730 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800872e:	e11c      	b.n	800896a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2203      	movs	r2, #3
 8008734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	88fa      	ldrh	r2, [r7, #6]
 8008748:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	88fa      	ldrh	r2, [r7, #6]
 800874e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008776:	d107      	bne.n	8008788 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008786:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008790:	d10f      	bne.n	80087b2 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087b0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b40      	cmp	r3, #64	; 0x40
 80087be:	d007      	beq.n	80087d0 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087d8:	d14b      	bne.n	8008872 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <HAL_SPI_Transmit+0x110>
 80087e2:	8afb      	ldrh	r3, [r7, #22]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d13e      	bne.n	8008866 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	881a      	ldrh	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	1c9a      	adds	r2, r3, #2
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008802:	b29b      	uxth	r3, r3
 8008804:	3b01      	subs	r3, #1
 8008806:	b29a      	uxth	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800880c:	e02b      	b.n	8008866 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	2b02      	cmp	r3, #2
 800881a:	d112      	bne.n	8008842 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008820:	881a      	ldrh	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882c:	1c9a      	adds	r2, r3, #2
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008836:	b29b      	uxth	r3, r3
 8008838:	3b01      	subs	r3, #1
 800883a:	b29a      	uxth	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008840:	e011      	b.n	8008866 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008842:	f7fc fd81 	bl	8005348 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d803      	bhi.n	800885a <HAL_SPI_Transmit+0x182>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008858:	d102      	bne.n	8008860 <HAL_SPI_Transmit+0x188>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008864:	e081      	b.n	800896a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800886a:	b29b      	uxth	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1ce      	bne.n	800880e <HAL_SPI_Transmit+0x136>
 8008870:	e04c      	b.n	800890c <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <HAL_SPI_Transmit+0x1a8>
 800887a:	8afb      	ldrh	r3, [r7, #22]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d140      	bne.n	8008902 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	330c      	adds	r3, #12
 800888a:	7812      	ldrb	r2, [r2, #0]
 800888c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800889c:	b29b      	uxth	r3, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80088a6:	e02c      	b.n	8008902 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d113      	bne.n	80088de <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	330c      	adds	r3, #12
 80088c0:	7812      	ldrb	r2, [r2, #0]
 80088c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c8:	1c5a      	adds	r2, r3, #1
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	3b01      	subs	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	86da      	strh	r2, [r3, #54]	; 0x36
 80088dc:	e011      	b.n	8008902 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088de:	f7fc fd33 	bl	8005348 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d803      	bhi.n	80088f6 <HAL_SPI_Transmit+0x21e>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f4:	d102      	bne.n	80088fc <HAL_SPI_Transmit+0x224>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008900:	e033      	b.n	800896a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008906:	b29b      	uxth	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1cd      	bne.n	80088a8 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008914:	d107      	bne.n	8008926 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008924:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 fc94 	bl	8009258 <SPI_EndRxTxTransaction>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2220      	movs	r2, #32
 800893a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008944:	2300      	movs	r3, #0
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	613b      	str	r3, [r7, #16]
 8008958:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	77fb      	strb	r3, [r7, #31]
 8008966:	e000      	b.n	800896a <HAL_SPI_Transmit+0x292>
  }

error:
 8008968:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800897a:	7ffb      	ldrb	r3, [r7, #31]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3720      	adds	r7, #32
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af02      	add	r7, sp, #8
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	603b      	str	r3, [r7, #0]
 8008990:	4613      	mov	r3, r2
 8008992:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089a0:	d112      	bne.n	80089c8 <HAL_SPI_Receive+0x44>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10e      	bne.n	80089c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2204      	movs	r2, #4
 80089ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80089b2:	88fa      	ldrh	r2, [r7, #6]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	4613      	mov	r3, r2
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 f95f 	bl	8008c82 <HAL_SPI_TransmitReceive>
 80089c4:	4603      	mov	r3, r0
 80089c6:	e158      	b.n	8008c7a <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d101      	bne.n	80089d6 <HAL_SPI_Receive+0x52>
 80089d2:	2302      	movs	r3, #2
 80089d4:	e151      	b.n	8008c7a <HAL_SPI_Receive+0x2f6>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089de:	f7fc fcb3 	bl	8005348 <HAL_GetTick>
 80089e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d002      	beq.n	80089f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80089f0:	2302      	movs	r3, #2
 80089f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80089f4:	e138      	b.n	8008c68 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <HAL_SPI_Receive+0x7e>
 80089fc:	88fb      	ldrh	r3, [r7, #6]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d102      	bne.n	8008a08 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a06:	e12f      	b.n	8008c68 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2204      	movs	r2, #4
 8008a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	88fa      	ldrh	r2, [r7, #6]
 8008a20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	88fa      	ldrh	r2, [r7, #6]
 8008a26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a4e:	d116      	bne.n	8008a7e <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a6e:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a86:	d107      	bne.n	8008a98 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a96:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa2:	2b40      	cmp	r3, #64	; 0x40
 8008aa4:	d007      	beq.n	8008ab6 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ab4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d162      	bne.n	8008b84 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008abe:	e02e      	b.n	8008b1e <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d115      	bne.n	8008afa <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f103 020c 	add.w	r2, r3, #12
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	7812      	ldrb	r2, [r2, #0]
 8008adc:	b2d2      	uxtb	r2, r2
 8008ade:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	3b01      	subs	r3, #1
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008af8:	e011      	b.n	8008b1e <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008afa:	f7fc fc25 	bl	8005348 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d803      	bhi.n	8008b12 <HAL_SPI_Receive+0x18e>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b10:	d102      	bne.n	8008b18 <HAL_SPI_Receive+0x194>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d102      	bne.n	8008b1e <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b1c:	e0a4      	b.n	8008c68 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1cb      	bne.n	8008ac0 <HAL_SPI_Receive+0x13c>
 8008b28:	e031      	b.n	8008b8e <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d113      	bne.n	8008b60 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b42:	b292      	uxth	r2, r2
 8008b44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	1c9a      	adds	r2, r3, #2
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	3b01      	subs	r3, #1
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b5e:	e011      	b.n	8008b84 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b60:	f7fc fbf2 	bl	8005348 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d803      	bhi.n	8008b78 <HAL_SPI_Receive+0x1f4>
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b76:	d102      	bne.n	8008b7e <HAL_SPI_Receive+0x1fa>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b82:	e071      	b.n	8008c68 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1cd      	bne.n	8008b2a <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b96:	d142      	bne.n	8008c1e <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ba6:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 fa81 	bl	80090ba <SPI_WaitFlagStateUntilTimeout>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008bc2:	e051      	b.n	8008c68 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bcc:	d107      	bne.n	8008bde <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	b292      	uxth	r2, r2
 8008bda:	801a      	strh	r2, [r3, #0]
 8008bdc:	e008      	b.n	8008bf0 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f103 020c 	add.w	r2, r3, #12
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bea:	7812      	ldrb	r2, [r2, #0]
 8008bec:	b2d2      	uxtb	r2, r2
 8008bee:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fa5d 	bl	80090ba <SPI_WaitFlagStateUntilTimeout>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d008      	beq.n	8008c18 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c0a:	f043 0202 	orr.w	r2, r3, #2
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008c16:	e027      	b.n	8008c68 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 fab3 	bl	800918e <SPI_EndRxTransaction>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2220      	movs	r2, #32
 8008c32:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 0310 	and.w	r3, r3, #16
 8008c3e:	2b10      	cmp	r3, #16
 8008c40:	d10a      	bne.n	8008c58 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c46:	f043 0202 	orr.w	r2, r3, #2
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008c56:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	75fb      	strb	r3, [r7, #23]
 8008c64:	e000      	b.n	8008c68 <HAL_SPI_Receive+0x2e4>
  }

error :
 8008c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b08e      	sub	sp, #56	; 0x38
 8008c86:	af02      	add	r7, sp, #8
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	607a      	str	r2, [r7, #4]
 8008c8e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c90:	2301      	movs	r3, #1
 8008c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d101      	bne.n	8008ca8 <HAL_SPI_TransmitReceive+0x26>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	e1f6      	b.n	8009096 <HAL_SPI_TransmitReceive+0x414>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cb0:	f7fc fb4a 	bl	8005348 <HAL_GetTick>
 8008cb4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008cc6:	887b      	ldrh	r3, [r7, #2]
 8008cc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d00f      	beq.n	8008cf2 <HAL_SPI_TransmitReceive+0x70>
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cd8:	d107      	bne.n	8008cea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d103      	bne.n	8008cea <HAL_SPI_TransmitReceive+0x68>
 8008ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d003      	beq.n	8008cf2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008cea:	2302      	movs	r3, #2
 8008cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008cf0:	e1c7      	b.n	8009082 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <HAL_SPI_TransmitReceive+0x82>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d002      	beq.n	8008d04 <HAL_SPI_TransmitReceive+0x82>
 8008cfe:	887b      	ldrh	r3, [r7, #2]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d103      	bne.n	8008d0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d0a:	e1ba      	b.n	8009082 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d003      	beq.n	8008d20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2205      	movs	r2, #5
 8008d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	887a      	ldrh	r2, [r7, #2]
 8008d30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	887a      	ldrh	r2, [r7, #2]
 8008d36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	887a      	ldrh	r2, [r7, #2]
 8008d42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	887a      	ldrh	r2, [r7, #2]
 8008d48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d5e:	d10f      	bne.n	8008d80 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d7e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8a:	2b40      	cmp	r3, #64	; 0x40
 8008d8c:	d007      	beq.n	8008d9e <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da6:	f040 808b 	bne.w	8008ec0 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <HAL_SPI_TransmitReceive+0x136>
 8008db2:	8b7b      	ldrh	r3, [r7, #26]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d178      	bne.n	8008eaa <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbc:	881a      	ldrh	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc8:	1c9a      	adds	r2, r3, #2
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ddc:	e065      	b.n	8008eaa <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d12d      	bne.n	8008e48 <HAL_SPI_TransmitReceive+0x1c6>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d028      	beq.n	8008e48 <HAL_SPI_TransmitReceive+0x1c6>
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d125      	bne.n	8008e48 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e00:	881a      	ldrh	r2, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0c:	1c9a      	adds	r2, r3, #2
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10c      	bne.n	8008e48 <HAL_SPI_TransmitReceive+0x1c6>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e36:	d107      	bne.n	8008e48 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e46:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d119      	bne.n	8008e8a <HAL_SPI_TransmitReceive+0x208>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d014      	beq.n	8008e8a <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6a:	b292      	uxth	r2, r2
 8008e6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e72:	1c9a      	adds	r2, r3, #2
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e86:	2301      	movs	r3, #1
 8008e88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e8a:	f7fc fa5d 	bl	8005348 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d807      	bhi.n	8008eaa <HAL_SPI_TransmitReceive+0x228>
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea0:	d003      	beq.n	8008eaa <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ea8:	e0eb      	b.n	8009082 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d194      	bne.n	8008dde <HAL_SPI_TransmitReceive+0x15c>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d18f      	bne.n	8008dde <HAL_SPI_TransmitReceive+0x15c>
 8008ebe:	e08e      	b.n	8008fde <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <HAL_SPI_TransmitReceive+0x24c>
 8008ec8:	8b7b      	ldrh	r3, [r7, #26]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d17d      	bne.n	8008fca <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	330c      	adds	r3, #12
 8008ed8:	7812      	ldrb	r2, [r2, #0]
 8008eda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ef4:	e069      	b.n	8008fca <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d12e      	bne.n	8008f62 <HAL_SPI_TransmitReceive+0x2e0>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d029      	beq.n	8008f62 <HAL_SPI_TransmitReceive+0x2e0>
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d126      	bne.n	8008f62 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	330c      	adds	r3, #12
 8008f1e:	7812      	ldrb	r2, [r2, #0]
 8008f20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	3b01      	subs	r3, #1
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10c      	bne.n	8008f62 <HAL_SPI_TransmitReceive+0x2e0>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f50:	d107      	bne.n	8008f62 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f60:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d119      	bne.n	8008fa4 <HAL_SPI_TransmitReceive+0x322>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d014      	beq.n	8008fa4 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f84:	b2d2      	uxtb	r2, r2
 8008f86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fa4:	f7fc f9d0 	bl	8005348 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d803      	bhi.n	8008fbc <HAL_SPI_TransmitReceive+0x33a>
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fba:	d102      	bne.n	8008fc2 <HAL_SPI_TransmitReceive+0x340>
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d103      	bne.n	8008fca <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008fc8:	e05b      	b.n	8009082 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d190      	bne.n	8008ef6 <HAL_SPI_TransmitReceive+0x274>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d18b      	bne.n	8008ef6 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe6:	d117      	bne.n	8009018 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fee:	2201      	movs	r2, #1
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 f861 	bl	80090ba <SPI_WaitFlagStateUntilTimeout>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d009      	beq.n	8009012 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009002:	f043 0202 	orr.w	r2, r3, #2
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8009010:	e037      	b.n	8009082 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f003 0310 	and.w	r3, r3, #16
 8009022:	2b10      	cmp	r3, #16
 8009024:	d10d      	bne.n	8009042 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902a:	f043 0202 	orr.w	r2, r3, #2
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800903a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009044:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 f906 	bl	8009258 <SPI_EndRxTxTransaction>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d006      	beq.n	8009060 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2220      	movs	r2, #32
 800905c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800905e:	e010      	b.n	8009082 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10b      	bne.n	8009080 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009068:	2300      	movs	r3, #0
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	e000      	b.n	8009082 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8009080:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009096:	4618      	mov	r0, r3
 8009098:	3730      	adds	r7, #48	; 0x30
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090ac:	b2db      	uxtb	r3, r3
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	603b      	str	r3, [r7, #0]
 80090c6:	4613      	mov	r3, r2
 80090c8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090ca:	e04c      	b.n	8009166 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d2:	d048      	beq.n	8009166 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80090d4:	f7fc f938 	bl	8005348 <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d902      	bls.n	80090ea <SPI_WaitFlagStateUntilTimeout+0x30>
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d13d      	bne.n	8009166 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009102:	d111      	bne.n	8009128 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800910c:	d004      	beq.n	8009118 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009116:	d107      	bne.n	8009128 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009126:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009130:	d10f      	bne.n	8009152 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009150:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e00f      	b.n	8009186 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689a      	ldr	r2, [r3, #8]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4013      	ands	r3, r2
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	429a      	cmp	r2, r3
 8009174:	bf0c      	ite	eq
 8009176:	2301      	moveq	r3, #1
 8009178:	2300      	movne	r3, #0
 800917a:	b2db      	uxtb	r3, r3
 800917c:	461a      	mov	r2, r3
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	429a      	cmp	r2, r3
 8009182:	d1a3      	bne.n	80090cc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b086      	sub	sp, #24
 8009192:	af02      	add	r7, sp, #8
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091a2:	d111      	bne.n	80091c8 <SPI_EndRxTransaction+0x3a>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ac:	d004      	beq.n	80091b8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091b6:	d107      	bne.n	80091c8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091c6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091d0:	d12a      	bne.n	8009228 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091da:	d012      	beq.n	8009202 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2200      	movs	r2, #0
 80091e4:	2180      	movs	r1, #128	; 0x80
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7ff ff67 	bl	80090ba <SPI_WaitFlagStateUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d02d      	beq.n	800924e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f6:	f043 0220 	orr.w	r2, r3, #32
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e026      	b.n	8009250 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2200      	movs	r2, #0
 800920a:	2101      	movs	r1, #1
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f7ff ff54 	bl	80090ba <SPI_WaitFlagStateUntilTimeout>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01a      	beq.n	800924e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921c:	f043 0220 	orr.w	r2, r3, #32
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e013      	b.n	8009250 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2200      	movs	r2, #0
 8009230:	2101      	movs	r1, #1
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f7ff ff41 	bl	80090ba <SPI_WaitFlagStateUntilTimeout>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d007      	beq.n	800924e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009242:	f043 0220 	orr.w	r2, r3, #32
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e000      	b.n	8009250 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af02      	add	r7, sp, #8
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009264:	4b1b      	ldr	r3, [pc, #108]	; (80092d4 <SPI_EndRxTxTransaction+0x7c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a1b      	ldr	r2, [pc, #108]	; (80092d8 <SPI_EndRxTxTransaction+0x80>)
 800926a:	fba2 2303 	umull	r2, r3, r2, r3
 800926e:	0d5b      	lsrs	r3, r3, #21
 8009270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009274:	fb02 f303 	mul.w	r3, r2, r3
 8009278:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009282:	d112      	bne.n	80092aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2200      	movs	r2, #0
 800928c:	2180      	movs	r1, #128	; 0x80
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff ff13 	bl	80090ba <SPI_WaitFlagStateUntilTimeout>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d016      	beq.n	80092c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800929e:	f043 0220 	orr.w	r2, r3, #32
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e00f      	b.n	80092ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c0:	2b80      	cmp	r3, #128	; 0x80
 80092c2:	d0f2      	beq.n	80092aa <SPI_EndRxTxTransaction+0x52>
 80092c4:	e000      	b.n	80092c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80092c6:	bf00      	nop
  }

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	200003a4 	.word	0x200003a4
 80092d8:	165e9f81 	.word	0x165e9f81

080092dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d029      	beq.n	800934a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009302:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009306:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009310:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009316:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800931c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009322:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8009328:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800932e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009334:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800933a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4313      	orrs	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	e034      	b.n	80093b4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009356:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009360:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009366:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4313      	orrs	r3, r2
 800936c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800937a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800937e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009388:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800938e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009394:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800939a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80093a0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b087      	sub	sp, #28
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d02e      	beq.n	800943a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80093e8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80093f8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	3b01      	subs	r3, #1
 8009400:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009402:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	3b01      	subs	r3, #1
 800940a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800940c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	3b01      	subs	r3, #1
 8009414:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009416:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	3b01      	subs	r3, #1
 800941e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009420:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	3b01      	subs	r3, #1
 8009428:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800942a:	4313      	orrs	r3, r2
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	4313      	orrs	r3, r2
 8009430:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	609a      	str	r2, [r3, #8]
 8009438:	e03b      	b.n	80094b2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009446:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800944a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	3b01      	subs	r3, #1
 8009452:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	3b01      	subs	r3, #1
 800945a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800945c:	4313      	orrs	r3, r2
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	4313      	orrs	r3, r2
 8009462:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009470:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	3b01      	subs	r3, #1
 800947e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009480:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	3b01      	subs	r3, #1
 8009488:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800948a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	3b01      	subs	r3, #1
 8009492:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009494:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	3b01      	subs	r3, #1
 800949c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800949e:	4313      	orrs	r3, r2
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	371c      	adds	r7, #28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80094dc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80094e6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80094ee:	4313      	orrs	r3, r2
 80094f0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80094f8:	f7fb ff26 	bl	8005348 <HAL_GetTick>
 80094fc:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80094fe:	e010      	b.n	8009522 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009506:	d00c      	beq.n	8009522 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <FMC_SDRAM_SendCommand+0x5e>
 800950e:	f7fb ff1b 	bl	8005348 <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	429a      	cmp	r2, r3
 800951c:	d201      	bcs.n	8009522 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e006      	b.n	8009530 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b20      	cmp	r3, #32
 800952c:	d0e8      	beq.n	8009500 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	695a      	ldr	r2, [r3, #20]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	370c      	adds	r7, #12
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
	...

08009560 <__libc_init_array>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	4d0d      	ldr	r5, [pc, #52]	; (8009598 <__libc_init_array+0x38>)
 8009564:	4c0d      	ldr	r4, [pc, #52]	; (800959c <__libc_init_array+0x3c>)
 8009566:	1b64      	subs	r4, r4, r5
 8009568:	10a4      	asrs	r4, r4, #2
 800956a:	2600      	movs	r6, #0
 800956c:	42a6      	cmp	r6, r4
 800956e:	d109      	bne.n	8009584 <__libc_init_array+0x24>
 8009570:	4d0b      	ldr	r5, [pc, #44]	; (80095a0 <__libc_init_array+0x40>)
 8009572:	4c0c      	ldr	r4, [pc, #48]	; (80095a4 <__libc_init_array+0x44>)
 8009574:	f000 fd94 	bl	800a0a0 <_init>
 8009578:	1b64      	subs	r4, r4, r5
 800957a:	10a4      	asrs	r4, r4, #2
 800957c:	2600      	movs	r6, #0
 800957e:	42a6      	cmp	r6, r4
 8009580:	d105      	bne.n	800958e <__libc_init_array+0x2e>
 8009582:	bd70      	pop	{r4, r5, r6, pc}
 8009584:	f855 3b04 	ldr.w	r3, [r5], #4
 8009588:	4798      	blx	r3
 800958a:	3601      	adds	r6, #1
 800958c:	e7ee      	b.n	800956c <__libc_init_array+0xc>
 800958e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009592:	4798      	blx	r3
 8009594:	3601      	adds	r6, #1
 8009596:	e7f2      	b.n	800957e <__libc_init_array+0x1e>
 8009598:	0800dc60 	.word	0x0800dc60
 800959c:	0800dc60 	.word	0x0800dc60
 80095a0:	0800dc60 	.word	0x0800dc60
 80095a4:	0800dc64 	.word	0x0800dc64

080095a8 <memset>:
 80095a8:	4402      	add	r2, r0
 80095aa:	4603      	mov	r3, r0
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d100      	bne.n	80095b2 <memset+0xa>
 80095b0:	4770      	bx	lr
 80095b2:	f803 1b01 	strb.w	r1, [r3], #1
 80095b6:	e7f9      	b.n	80095ac <memset+0x4>

080095b8 <sniprintf>:
 80095b8:	b40c      	push	{r2, r3}
 80095ba:	b530      	push	{r4, r5, lr}
 80095bc:	4b17      	ldr	r3, [pc, #92]	; (800961c <sniprintf+0x64>)
 80095be:	1e0c      	subs	r4, r1, #0
 80095c0:	681d      	ldr	r5, [r3, #0]
 80095c2:	b09d      	sub	sp, #116	; 0x74
 80095c4:	da08      	bge.n	80095d8 <sniprintf+0x20>
 80095c6:	238b      	movs	r3, #139	; 0x8b
 80095c8:	602b      	str	r3, [r5, #0]
 80095ca:	f04f 30ff 	mov.w	r0, #4294967295
 80095ce:	b01d      	add	sp, #116	; 0x74
 80095d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095d4:	b002      	add	sp, #8
 80095d6:	4770      	bx	lr
 80095d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80095dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80095e0:	bf14      	ite	ne
 80095e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80095e6:	4623      	moveq	r3, r4
 80095e8:	9304      	str	r3, [sp, #16]
 80095ea:	9307      	str	r3, [sp, #28]
 80095ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095f0:	9002      	str	r0, [sp, #8]
 80095f2:	9006      	str	r0, [sp, #24]
 80095f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80095f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80095fa:	ab21      	add	r3, sp, #132	; 0x84
 80095fc:	a902      	add	r1, sp, #8
 80095fe:	4628      	mov	r0, r5
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	f000 f869 	bl	80096d8 <_svfiprintf_r>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	bfbc      	itt	lt
 800960a:	238b      	movlt	r3, #139	; 0x8b
 800960c:	602b      	strlt	r3, [r5, #0]
 800960e:	2c00      	cmp	r4, #0
 8009610:	d0dd      	beq.n	80095ce <sniprintf+0x16>
 8009612:	9b02      	ldr	r3, [sp, #8]
 8009614:	2200      	movs	r2, #0
 8009616:	701a      	strb	r2, [r3, #0]
 8009618:	e7d9      	b.n	80095ce <sniprintf+0x16>
 800961a:	bf00      	nop
 800961c:	20000444 	.word	0x20000444

08009620 <__ssputs_r>:
 8009620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009624:	688e      	ldr	r6, [r1, #8]
 8009626:	429e      	cmp	r6, r3
 8009628:	4682      	mov	sl, r0
 800962a:	460c      	mov	r4, r1
 800962c:	4690      	mov	r8, r2
 800962e:	461f      	mov	r7, r3
 8009630:	d838      	bhi.n	80096a4 <__ssputs_r+0x84>
 8009632:	898a      	ldrh	r2, [r1, #12]
 8009634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009638:	d032      	beq.n	80096a0 <__ssputs_r+0x80>
 800963a:	6825      	ldr	r5, [r4, #0]
 800963c:	6909      	ldr	r1, [r1, #16]
 800963e:	eba5 0901 	sub.w	r9, r5, r1
 8009642:	6965      	ldr	r5, [r4, #20]
 8009644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800964c:	3301      	adds	r3, #1
 800964e:	444b      	add	r3, r9
 8009650:	106d      	asrs	r5, r5, #1
 8009652:	429d      	cmp	r5, r3
 8009654:	bf38      	it	cc
 8009656:	461d      	movcc	r5, r3
 8009658:	0553      	lsls	r3, r2, #21
 800965a:	d531      	bpl.n	80096c0 <__ssputs_r+0xa0>
 800965c:	4629      	mov	r1, r5
 800965e:	f000 fb63 	bl	8009d28 <_malloc_r>
 8009662:	4606      	mov	r6, r0
 8009664:	b950      	cbnz	r0, 800967c <__ssputs_r+0x5c>
 8009666:	230c      	movs	r3, #12
 8009668:	f8ca 3000 	str.w	r3, [sl]
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	464a      	mov	r2, r9
 8009680:	f000 fabe 	bl	8009c00 <memcpy>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800968a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	6126      	str	r6, [r4, #16]
 8009692:	6165      	str	r5, [r4, #20]
 8009694:	444e      	add	r6, r9
 8009696:	eba5 0509 	sub.w	r5, r5, r9
 800969a:	6026      	str	r6, [r4, #0]
 800969c:	60a5      	str	r5, [r4, #8]
 800969e:	463e      	mov	r6, r7
 80096a0:	42be      	cmp	r6, r7
 80096a2:	d900      	bls.n	80096a6 <__ssputs_r+0x86>
 80096a4:	463e      	mov	r6, r7
 80096a6:	6820      	ldr	r0, [r4, #0]
 80096a8:	4632      	mov	r2, r6
 80096aa:	4641      	mov	r1, r8
 80096ac:	f000 fab6 	bl	8009c1c <memmove>
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	1b9b      	subs	r3, r3, r6
 80096b4:	60a3      	str	r3, [r4, #8]
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	4433      	add	r3, r6
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	2000      	movs	r0, #0
 80096be:	e7db      	b.n	8009678 <__ssputs_r+0x58>
 80096c0:	462a      	mov	r2, r5
 80096c2:	f000 fba5 	bl	8009e10 <_realloc_r>
 80096c6:	4606      	mov	r6, r0
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1e1      	bne.n	8009690 <__ssputs_r+0x70>
 80096cc:	6921      	ldr	r1, [r4, #16]
 80096ce:	4650      	mov	r0, sl
 80096d0:	f000 fabe 	bl	8009c50 <_free_r>
 80096d4:	e7c7      	b.n	8009666 <__ssputs_r+0x46>
	...

080096d8 <_svfiprintf_r>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	4698      	mov	r8, r3
 80096de:	898b      	ldrh	r3, [r1, #12]
 80096e0:	061b      	lsls	r3, r3, #24
 80096e2:	b09d      	sub	sp, #116	; 0x74
 80096e4:	4607      	mov	r7, r0
 80096e6:	460d      	mov	r5, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	d50e      	bpl.n	800970a <_svfiprintf_r+0x32>
 80096ec:	690b      	ldr	r3, [r1, #16]
 80096ee:	b963      	cbnz	r3, 800970a <_svfiprintf_r+0x32>
 80096f0:	2140      	movs	r1, #64	; 0x40
 80096f2:	f000 fb19 	bl	8009d28 <_malloc_r>
 80096f6:	6028      	str	r0, [r5, #0]
 80096f8:	6128      	str	r0, [r5, #16]
 80096fa:	b920      	cbnz	r0, 8009706 <_svfiprintf_r+0x2e>
 80096fc:	230c      	movs	r3, #12
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	e0d1      	b.n	80098aa <_svfiprintf_r+0x1d2>
 8009706:	2340      	movs	r3, #64	; 0x40
 8009708:	616b      	str	r3, [r5, #20]
 800970a:	2300      	movs	r3, #0
 800970c:	9309      	str	r3, [sp, #36]	; 0x24
 800970e:	2320      	movs	r3, #32
 8009710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009714:	f8cd 800c 	str.w	r8, [sp, #12]
 8009718:	2330      	movs	r3, #48	; 0x30
 800971a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098c4 <_svfiprintf_r+0x1ec>
 800971e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009722:	f04f 0901 	mov.w	r9, #1
 8009726:	4623      	mov	r3, r4
 8009728:	469a      	mov	sl, r3
 800972a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800972e:	b10a      	cbz	r2, 8009734 <_svfiprintf_r+0x5c>
 8009730:	2a25      	cmp	r2, #37	; 0x25
 8009732:	d1f9      	bne.n	8009728 <_svfiprintf_r+0x50>
 8009734:	ebba 0b04 	subs.w	fp, sl, r4
 8009738:	d00b      	beq.n	8009752 <_svfiprintf_r+0x7a>
 800973a:	465b      	mov	r3, fp
 800973c:	4622      	mov	r2, r4
 800973e:	4629      	mov	r1, r5
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff ff6d 	bl	8009620 <__ssputs_r>
 8009746:	3001      	adds	r0, #1
 8009748:	f000 80aa 	beq.w	80098a0 <_svfiprintf_r+0x1c8>
 800974c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800974e:	445a      	add	r2, fp
 8009750:	9209      	str	r2, [sp, #36]	; 0x24
 8009752:	f89a 3000 	ldrb.w	r3, [sl]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80a2 	beq.w	80098a0 <_svfiprintf_r+0x1c8>
 800975c:	2300      	movs	r3, #0
 800975e:	f04f 32ff 	mov.w	r2, #4294967295
 8009762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009766:	f10a 0a01 	add.w	sl, sl, #1
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	9307      	str	r3, [sp, #28]
 800976e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009772:	931a      	str	r3, [sp, #104]	; 0x68
 8009774:	4654      	mov	r4, sl
 8009776:	2205      	movs	r2, #5
 8009778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977c:	4851      	ldr	r0, [pc, #324]	; (80098c4 <_svfiprintf_r+0x1ec>)
 800977e:	f7f6 fd37 	bl	80001f0 <memchr>
 8009782:	9a04      	ldr	r2, [sp, #16]
 8009784:	b9d8      	cbnz	r0, 80097be <_svfiprintf_r+0xe6>
 8009786:	06d0      	lsls	r0, r2, #27
 8009788:	bf44      	itt	mi
 800978a:	2320      	movmi	r3, #32
 800978c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009790:	0711      	lsls	r1, r2, #28
 8009792:	bf44      	itt	mi
 8009794:	232b      	movmi	r3, #43	; 0x2b
 8009796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979a:	f89a 3000 	ldrb.w	r3, [sl]
 800979e:	2b2a      	cmp	r3, #42	; 0x2a
 80097a0:	d015      	beq.n	80097ce <_svfiprintf_r+0xf6>
 80097a2:	9a07      	ldr	r2, [sp, #28]
 80097a4:	4654      	mov	r4, sl
 80097a6:	2000      	movs	r0, #0
 80097a8:	f04f 0c0a 	mov.w	ip, #10
 80097ac:	4621      	mov	r1, r4
 80097ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b2:	3b30      	subs	r3, #48	; 0x30
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d94e      	bls.n	8009856 <_svfiprintf_r+0x17e>
 80097b8:	b1b0      	cbz	r0, 80097e8 <_svfiprintf_r+0x110>
 80097ba:	9207      	str	r2, [sp, #28]
 80097bc:	e014      	b.n	80097e8 <_svfiprintf_r+0x110>
 80097be:	eba0 0308 	sub.w	r3, r0, r8
 80097c2:	fa09 f303 	lsl.w	r3, r9, r3
 80097c6:	4313      	orrs	r3, r2
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	46a2      	mov	sl, r4
 80097cc:	e7d2      	b.n	8009774 <_svfiprintf_r+0x9c>
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	1d19      	adds	r1, r3, #4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	9103      	str	r1, [sp, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	bfbb      	ittet	lt
 80097da:	425b      	neglt	r3, r3
 80097dc:	f042 0202 	orrlt.w	r2, r2, #2
 80097e0:	9307      	strge	r3, [sp, #28]
 80097e2:	9307      	strlt	r3, [sp, #28]
 80097e4:	bfb8      	it	lt
 80097e6:	9204      	strlt	r2, [sp, #16]
 80097e8:	7823      	ldrb	r3, [r4, #0]
 80097ea:	2b2e      	cmp	r3, #46	; 0x2e
 80097ec:	d10c      	bne.n	8009808 <_svfiprintf_r+0x130>
 80097ee:	7863      	ldrb	r3, [r4, #1]
 80097f0:	2b2a      	cmp	r3, #42	; 0x2a
 80097f2:	d135      	bne.n	8009860 <_svfiprintf_r+0x188>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	1d1a      	adds	r2, r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	9203      	str	r2, [sp, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bfb8      	it	lt
 8009800:	f04f 33ff 	movlt.w	r3, #4294967295
 8009804:	3402      	adds	r4, #2
 8009806:	9305      	str	r3, [sp, #20]
 8009808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098d4 <_svfiprintf_r+0x1fc>
 800980c:	7821      	ldrb	r1, [r4, #0]
 800980e:	2203      	movs	r2, #3
 8009810:	4650      	mov	r0, sl
 8009812:	f7f6 fced 	bl	80001f0 <memchr>
 8009816:	b140      	cbz	r0, 800982a <_svfiprintf_r+0x152>
 8009818:	2340      	movs	r3, #64	; 0x40
 800981a:	eba0 000a 	sub.w	r0, r0, sl
 800981e:	fa03 f000 	lsl.w	r0, r3, r0
 8009822:	9b04      	ldr	r3, [sp, #16]
 8009824:	4303      	orrs	r3, r0
 8009826:	3401      	adds	r4, #1
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982e:	4826      	ldr	r0, [pc, #152]	; (80098c8 <_svfiprintf_r+0x1f0>)
 8009830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009834:	2206      	movs	r2, #6
 8009836:	f7f6 fcdb 	bl	80001f0 <memchr>
 800983a:	2800      	cmp	r0, #0
 800983c:	d038      	beq.n	80098b0 <_svfiprintf_r+0x1d8>
 800983e:	4b23      	ldr	r3, [pc, #140]	; (80098cc <_svfiprintf_r+0x1f4>)
 8009840:	bb1b      	cbnz	r3, 800988a <_svfiprintf_r+0x1b2>
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	3307      	adds	r3, #7
 8009846:	f023 0307 	bic.w	r3, r3, #7
 800984a:	3308      	adds	r3, #8
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009850:	4433      	add	r3, r6
 8009852:	9309      	str	r3, [sp, #36]	; 0x24
 8009854:	e767      	b.n	8009726 <_svfiprintf_r+0x4e>
 8009856:	fb0c 3202 	mla	r2, ip, r2, r3
 800985a:	460c      	mov	r4, r1
 800985c:	2001      	movs	r0, #1
 800985e:	e7a5      	b.n	80097ac <_svfiprintf_r+0xd4>
 8009860:	2300      	movs	r3, #0
 8009862:	3401      	adds	r4, #1
 8009864:	9305      	str	r3, [sp, #20]
 8009866:	4619      	mov	r1, r3
 8009868:	f04f 0c0a 	mov.w	ip, #10
 800986c:	4620      	mov	r0, r4
 800986e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009872:	3a30      	subs	r2, #48	; 0x30
 8009874:	2a09      	cmp	r2, #9
 8009876:	d903      	bls.n	8009880 <_svfiprintf_r+0x1a8>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0c5      	beq.n	8009808 <_svfiprintf_r+0x130>
 800987c:	9105      	str	r1, [sp, #20]
 800987e:	e7c3      	b.n	8009808 <_svfiprintf_r+0x130>
 8009880:	fb0c 2101 	mla	r1, ip, r1, r2
 8009884:	4604      	mov	r4, r0
 8009886:	2301      	movs	r3, #1
 8009888:	e7f0      	b.n	800986c <_svfiprintf_r+0x194>
 800988a:	ab03      	add	r3, sp, #12
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	462a      	mov	r2, r5
 8009890:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <_svfiprintf_r+0x1f8>)
 8009892:	a904      	add	r1, sp, #16
 8009894:	4638      	mov	r0, r7
 8009896:	f3af 8000 	nop.w
 800989a:	1c42      	adds	r2, r0, #1
 800989c:	4606      	mov	r6, r0
 800989e:	d1d6      	bne.n	800984e <_svfiprintf_r+0x176>
 80098a0:	89ab      	ldrh	r3, [r5, #12]
 80098a2:	065b      	lsls	r3, r3, #25
 80098a4:	f53f af2c 	bmi.w	8009700 <_svfiprintf_r+0x28>
 80098a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098aa:	b01d      	add	sp, #116	; 0x74
 80098ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b0:	ab03      	add	r3, sp, #12
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	462a      	mov	r2, r5
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <_svfiprintf_r+0x1f8>)
 80098b8:	a904      	add	r1, sp, #16
 80098ba:	4638      	mov	r0, r7
 80098bc:	f000 f87a 	bl	80099b4 <_printf_i>
 80098c0:	e7eb      	b.n	800989a <_svfiprintf_r+0x1c2>
 80098c2:	bf00      	nop
 80098c4:	0800dc24 	.word	0x0800dc24
 80098c8:	0800dc2e 	.word	0x0800dc2e
 80098cc:	00000000 	.word	0x00000000
 80098d0:	08009621 	.word	0x08009621
 80098d4:	0800dc2a 	.word	0x0800dc2a

080098d8 <_printf_common>:
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	4616      	mov	r6, r2
 80098de:	4699      	mov	r9, r3
 80098e0:	688a      	ldr	r2, [r1, #8]
 80098e2:	690b      	ldr	r3, [r1, #16]
 80098e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098e8:	4293      	cmp	r3, r2
 80098ea:	bfb8      	it	lt
 80098ec:	4613      	movlt	r3, r2
 80098ee:	6033      	str	r3, [r6, #0]
 80098f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098f4:	4607      	mov	r7, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	b10a      	cbz	r2, 80098fe <_printf_common+0x26>
 80098fa:	3301      	adds	r3, #1
 80098fc:	6033      	str	r3, [r6, #0]
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	0699      	lsls	r1, r3, #26
 8009902:	bf42      	ittt	mi
 8009904:	6833      	ldrmi	r3, [r6, #0]
 8009906:	3302      	addmi	r3, #2
 8009908:	6033      	strmi	r3, [r6, #0]
 800990a:	6825      	ldr	r5, [r4, #0]
 800990c:	f015 0506 	ands.w	r5, r5, #6
 8009910:	d106      	bne.n	8009920 <_printf_common+0x48>
 8009912:	f104 0a19 	add.w	sl, r4, #25
 8009916:	68e3      	ldr	r3, [r4, #12]
 8009918:	6832      	ldr	r2, [r6, #0]
 800991a:	1a9b      	subs	r3, r3, r2
 800991c:	42ab      	cmp	r3, r5
 800991e:	dc26      	bgt.n	800996e <_printf_common+0x96>
 8009920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009924:	1e13      	subs	r3, r2, #0
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	bf18      	it	ne
 800992a:	2301      	movne	r3, #1
 800992c:	0692      	lsls	r2, r2, #26
 800992e:	d42b      	bmi.n	8009988 <_printf_common+0xb0>
 8009930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009934:	4649      	mov	r1, r9
 8009936:	4638      	mov	r0, r7
 8009938:	47c0      	blx	r8
 800993a:	3001      	adds	r0, #1
 800993c:	d01e      	beq.n	800997c <_printf_common+0xa4>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	68e5      	ldr	r5, [r4, #12]
 8009942:	6832      	ldr	r2, [r6, #0]
 8009944:	f003 0306 	and.w	r3, r3, #6
 8009948:	2b04      	cmp	r3, #4
 800994a:	bf08      	it	eq
 800994c:	1aad      	subeq	r5, r5, r2
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	6922      	ldr	r2, [r4, #16]
 8009952:	bf0c      	ite	eq
 8009954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009958:	2500      	movne	r5, #0
 800995a:	4293      	cmp	r3, r2
 800995c:	bfc4      	itt	gt
 800995e:	1a9b      	subgt	r3, r3, r2
 8009960:	18ed      	addgt	r5, r5, r3
 8009962:	2600      	movs	r6, #0
 8009964:	341a      	adds	r4, #26
 8009966:	42b5      	cmp	r5, r6
 8009968:	d11a      	bne.n	80099a0 <_printf_common+0xc8>
 800996a:	2000      	movs	r0, #0
 800996c:	e008      	b.n	8009980 <_printf_common+0xa8>
 800996e:	2301      	movs	r3, #1
 8009970:	4652      	mov	r2, sl
 8009972:	4649      	mov	r1, r9
 8009974:	4638      	mov	r0, r7
 8009976:	47c0      	blx	r8
 8009978:	3001      	adds	r0, #1
 800997a:	d103      	bne.n	8009984 <_printf_common+0xac>
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009984:	3501      	adds	r5, #1
 8009986:	e7c6      	b.n	8009916 <_printf_common+0x3e>
 8009988:	18e1      	adds	r1, r4, r3
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	2030      	movs	r0, #48	; 0x30
 800998e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009992:	4422      	add	r2, r4
 8009994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800999c:	3302      	adds	r3, #2
 800999e:	e7c7      	b.n	8009930 <_printf_common+0x58>
 80099a0:	2301      	movs	r3, #1
 80099a2:	4622      	mov	r2, r4
 80099a4:	4649      	mov	r1, r9
 80099a6:	4638      	mov	r0, r7
 80099a8:	47c0      	blx	r8
 80099aa:	3001      	adds	r0, #1
 80099ac:	d0e6      	beq.n	800997c <_printf_common+0xa4>
 80099ae:	3601      	adds	r6, #1
 80099b0:	e7d9      	b.n	8009966 <_printf_common+0x8e>
	...

080099b4 <_printf_i>:
 80099b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b8:	7e0f      	ldrb	r7, [r1, #24]
 80099ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099bc:	2f78      	cmp	r7, #120	; 0x78
 80099be:	4691      	mov	r9, r2
 80099c0:	4680      	mov	r8, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	469a      	mov	sl, r3
 80099c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099ca:	d807      	bhi.n	80099dc <_printf_i+0x28>
 80099cc:	2f62      	cmp	r7, #98	; 0x62
 80099ce:	d80a      	bhi.n	80099e6 <_printf_i+0x32>
 80099d0:	2f00      	cmp	r7, #0
 80099d2:	f000 80d8 	beq.w	8009b86 <_printf_i+0x1d2>
 80099d6:	2f58      	cmp	r7, #88	; 0x58
 80099d8:	f000 80a3 	beq.w	8009b22 <_printf_i+0x16e>
 80099dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099e4:	e03a      	b.n	8009a5c <_printf_i+0xa8>
 80099e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ea:	2b15      	cmp	r3, #21
 80099ec:	d8f6      	bhi.n	80099dc <_printf_i+0x28>
 80099ee:	a101      	add	r1, pc, #4	; (adr r1, 80099f4 <_printf_i+0x40>)
 80099f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099f4:	08009a4d 	.word	0x08009a4d
 80099f8:	08009a61 	.word	0x08009a61
 80099fc:	080099dd 	.word	0x080099dd
 8009a00:	080099dd 	.word	0x080099dd
 8009a04:	080099dd 	.word	0x080099dd
 8009a08:	080099dd 	.word	0x080099dd
 8009a0c:	08009a61 	.word	0x08009a61
 8009a10:	080099dd 	.word	0x080099dd
 8009a14:	080099dd 	.word	0x080099dd
 8009a18:	080099dd 	.word	0x080099dd
 8009a1c:	080099dd 	.word	0x080099dd
 8009a20:	08009b6d 	.word	0x08009b6d
 8009a24:	08009a91 	.word	0x08009a91
 8009a28:	08009b4f 	.word	0x08009b4f
 8009a2c:	080099dd 	.word	0x080099dd
 8009a30:	080099dd 	.word	0x080099dd
 8009a34:	08009b8f 	.word	0x08009b8f
 8009a38:	080099dd 	.word	0x080099dd
 8009a3c:	08009a91 	.word	0x08009a91
 8009a40:	080099dd 	.word	0x080099dd
 8009a44:	080099dd 	.word	0x080099dd
 8009a48:	08009b57 	.word	0x08009b57
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	1d1a      	adds	r2, r3, #4
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	602a      	str	r2, [r5, #0]
 8009a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e0a3      	b.n	8009ba8 <_printf_i+0x1f4>
 8009a60:	6820      	ldr	r0, [r4, #0]
 8009a62:	6829      	ldr	r1, [r5, #0]
 8009a64:	0606      	lsls	r6, r0, #24
 8009a66:	f101 0304 	add.w	r3, r1, #4
 8009a6a:	d50a      	bpl.n	8009a82 <_printf_i+0xce>
 8009a6c:	680e      	ldr	r6, [r1, #0]
 8009a6e:	602b      	str	r3, [r5, #0]
 8009a70:	2e00      	cmp	r6, #0
 8009a72:	da03      	bge.n	8009a7c <_printf_i+0xc8>
 8009a74:	232d      	movs	r3, #45	; 0x2d
 8009a76:	4276      	negs	r6, r6
 8009a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a7c:	485e      	ldr	r0, [pc, #376]	; (8009bf8 <_printf_i+0x244>)
 8009a7e:	230a      	movs	r3, #10
 8009a80:	e019      	b.n	8009ab6 <_printf_i+0x102>
 8009a82:	680e      	ldr	r6, [r1, #0]
 8009a84:	602b      	str	r3, [r5, #0]
 8009a86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a8a:	bf18      	it	ne
 8009a8c:	b236      	sxthne	r6, r6
 8009a8e:	e7ef      	b.n	8009a70 <_printf_i+0xbc>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	6820      	ldr	r0, [r4, #0]
 8009a94:	1d19      	adds	r1, r3, #4
 8009a96:	6029      	str	r1, [r5, #0]
 8009a98:	0601      	lsls	r1, r0, #24
 8009a9a:	d501      	bpl.n	8009aa0 <_printf_i+0xec>
 8009a9c:	681e      	ldr	r6, [r3, #0]
 8009a9e:	e002      	b.n	8009aa6 <_printf_i+0xf2>
 8009aa0:	0646      	lsls	r6, r0, #25
 8009aa2:	d5fb      	bpl.n	8009a9c <_printf_i+0xe8>
 8009aa4:	881e      	ldrh	r6, [r3, #0]
 8009aa6:	4854      	ldr	r0, [pc, #336]	; (8009bf8 <_printf_i+0x244>)
 8009aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8009aaa:	bf0c      	ite	eq
 8009aac:	2308      	moveq	r3, #8
 8009aae:	230a      	movne	r3, #10
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ab6:	6865      	ldr	r5, [r4, #4]
 8009ab8:	60a5      	str	r5, [r4, #8]
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	bfa2      	ittt	ge
 8009abe:	6821      	ldrge	r1, [r4, #0]
 8009ac0:	f021 0104 	bicge.w	r1, r1, #4
 8009ac4:	6021      	strge	r1, [r4, #0]
 8009ac6:	b90e      	cbnz	r6, 8009acc <_printf_i+0x118>
 8009ac8:	2d00      	cmp	r5, #0
 8009aca:	d04d      	beq.n	8009b68 <_printf_i+0x1b4>
 8009acc:	4615      	mov	r5, r2
 8009ace:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ad2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ad6:	5dc7      	ldrb	r7, [r0, r7]
 8009ad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009adc:	4637      	mov	r7, r6
 8009ade:	42bb      	cmp	r3, r7
 8009ae0:	460e      	mov	r6, r1
 8009ae2:	d9f4      	bls.n	8009ace <_printf_i+0x11a>
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	d10b      	bne.n	8009b00 <_printf_i+0x14c>
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	07de      	lsls	r6, r3, #31
 8009aec:	d508      	bpl.n	8009b00 <_printf_i+0x14c>
 8009aee:	6923      	ldr	r3, [r4, #16]
 8009af0:	6861      	ldr	r1, [r4, #4]
 8009af2:	4299      	cmp	r1, r3
 8009af4:	bfde      	ittt	le
 8009af6:	2330      	movle	r3, #48	; 0x30
 8009af8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009afc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b00:	1b52      	subs	r2, r2, r5
 8009b02:	6122      	str	r2, [r4, #16]
 8009b04:	f8cd a000 	str.w	sl, [sp]
 8009b08:	464b      	mov	r3, r9
 8009b0a:	aa03      	add	r2, sp, #12
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4640      	mov	r0, r8
 8009b10:	f7ff fee2 	bl	80098d8 <_printf_common>
 8009b14:	3001      	adds	r0, #1
 8009b16:	d14c      	bne.n	8009bb2 <_printf_i+0x1fe>
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	b004      	add	sp, #16
 8009b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b22:	4835      	ldr	r0, [pc, #212]	; (8009bf8 <_printf_i+0x244>)
 8009b24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b28:	6829      	ldr	r1, [r5, #0]
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b30:	6029      	str	r1, [r5, #0]
 8009b32:	061d      	lsls	r5, r3, #24
 8009b34:	d514      	bpl.n	8009b60 <_printf_i+0x1ac>
 8009b36:	07df      	lsls	r7, r3, #31
 8009b38:	bf44      	itt	mi
 8009b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b3e:	6023      	strmi	r3, [r4, #0]
 8009b40:	b91e      	cbnz	r6, 8009b4a <_printf_i+0x196>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	f023 0320 	bic.w	r3, r3, #32
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	2310      	movs	r3, #16
 8009b4c:	e7b0      	b.n	8009ab0 <_printf_i+0xfc>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	f043 0320 	orr.w	r3, r3, #32
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	2378      	movs	r3, #120	; 0x78
 8009b58:	4828      	ldr	r0, [pc, #160]	; (8009bfc <_printf_i+0x248>)
 8009b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b5e:	e7e3      	b.n	8009b28 <_printf_i+0x174>
 8009b60:	0659      	lsls	r1, r3, #25
 8009b62:	bf48      	it	mi
 8009b64:	b2b6      	uxthmi	r6, r6
 8009b66:	e7e6      	b.n	8009b36 <_printf_i+0x182>
 8009b68:	4615      	mov	r5, r2
 8009b6a:	e7bb      	b.n	8009ae4 <_printf_i+0x130>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	6826      	ldr	r6, [r4, #0]
 8009b70:	6961      	ldr	r1, [r4, #20]
 8009b72:	1d18      	adds	r0, r3, #4
 8009b74:	6028      	str	r0, [r5, #0]
 8009b76:	0635      	lsls	r5, r6, #24
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	d501      	bpl.n	8009b80 <_printf_i+0x1cc>
 8009b7c:	6019      	str	r1, [r3, #0]
 8009b7e:	e002      	b.n	8009b86 <_printf_i+0x1d2>
 8009b80:	0670      	lsls	r0, r6, #25
 8009b82:	d5fb      	bpl.n	8009b7c <_printf_i+0x1c8>
 8009b84:	8019      	strh	r1, [r3, #0]
 8009b86:	2300      	movs	r3, #0
 8009b88:	6123      	str	r3, [r4, #16]
 8009b8a:	4615      	mov	r5, r2
 8009b8c:	e7ba      	b.n	8009b04 <_printf_i+0x150>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	1d1a      	adds	r2, r3, #4
 8009b92:	602a      	str	r2, [r5, #0]
 8009b94:	681d      	ldr	r5, [r3, #0]
 8009b96:	6862      	ldr	r2, [r4, #4]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f7f6 fb28 	bl	80001f0 <memchr>
 8009ba0:	b108      	cbz	r0, 8009ba6 <_printf_i+0x1f2>
 8009ba2:	1b40      	subs	r0, r0, r5
 8009ba4:	6060      	str	r0, [r4, #4]
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	6123      	str	r3, [r4, #16]
 8009baa:	2300      	movs	r3, #0
 8009bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb0:	e7a8      	b.n	8009b04 <_printf_i+0x150>
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	462a      	mov	r2, r5
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4640      	mov	r0, r8
 8009bba:	47d0      	blx	sl
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d0ab      	beq.n	8009b18 <_printf_i+0x164>
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	079b      	lsls	r3, r3, #30
 8009bc4:	d413      	bmi.n	8009bee <_printf_i+0x23a>
 8009bc6:	68e0      	ldr	r0, [r4, #12]
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	4298      	cmp	r0, r3
 8009bcc:	bfb8      	it	lt
 8009bce:	4618      	movlt	r0, r3
 8009bd0:	e7a4      	b.n	8009b1c <_printf_i+0x168>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	4640      	mov	r0, r8
 8009bda:	47d0      	blx	sl
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d09b      	beq.n	8009b18 <_printf_i+0x164>
 8009be0:	3501      	adds	r5, #1
 8009be2:	68e3      	ldr	r3, [r4, #12]
 8009be4:	9903      	ldr	r1, [sp, #12]
 8009be6:	1a5b      	subs	r3, r3, r1
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	dcf2      	bgt.n	8009bd2 <_printf_i+0x21e>
 8009bec:	e7eb      	b.n	8009bc6 <_printf_i+0x212>
 8009bee:	2500      	movs	r5, #0
 8009bf0:	f104 0619 	add.w	r6, r4, #25
 8009bf4:	e7f5      	b.n	8009be2 <_printf_i+0x22e>
 8009bf6:	bf00      	nop
 8009bf8:	0800dc35 	.word	0x0800dc35
 8009bfc:	0800dc46 	.word	0x0800dc46

08009c00 <memcpy>:
 8009c00:	440a      	add	r2, r1
 8009c02:	4291      	cmp	r1, r2
 8009c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c08:	d100      	bne.n	8009c0c <memcpy+0xc>
 8009c0a:	4770      	bx	lr
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c16:	4291      	cmp	r1, r2
 8009c18:	d1f9      	bne.n	8009c0e <memcpy+0xe>
 8009c1a:	bd10      	pop	{r4, pc}

08009c1c <memmove>:
 8009c1c:	4288      	cmp	r0, r1
 8009c1e:	b510      	push	{r4, lr}
 8009c20:	eb01 0402 	add.w	r4, r1, r2
 8009c24:	d902      	bls.n	8009c2c <memmove+0x10>
 8009c26:	4284      	cmp	r4, r0
 8009c28:	4623      	mov	r3, r4
 8009c2a:	d807      	bhi.n	8009c3c <memmove+0x20>
 8009c2c:	1e43      	subs	r3, r0, #1
 8009c2e:	42a1      	cmp	r1, r4
 8009c30:	d008      	beq.n	8009c44 <memmove+0x28>
 8009c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c3a:	e7f8      	b.n	8009c2e <memmove+0x12>
 8009c3c:	4402      	add	r2, r0
 8009c3e:	4601      	mov	r1, r0
 8009c40:	428a      	cmp	r2, r1
 8009c42:	d100      	bne.n	8009c46 <memmove+0x2a>
 8009c44:	bd10      	pop	{r4, pc}
 8009c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c4e:	e7f7      	b.n	8009c40 <memmove+0x24>

08009c50 <_free_r>:
 8009c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c52:	2900      	cmp	r1, #0
 8009c54:	d044      	beq.n	8009ce0 <_free_r+0x90>
 8009c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c5a:	9001      	str	r0, [sp, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f1a1 0404 	sub.w	r4, r1, #4
 8009c62:	bfb8      	it	lt
 8009c64:	18e4      	addlt	r4, r4, r3
 8009c66:	f000 f913 	bl	8009e90 <__malloc_lock>
 8009c6a:	4a1e      	ldr	r2, [pc, #120]	; (8009ce4 <_free_r+0x94>)
 8009c6c:	9801      	ldr	r0, [sp, #4]
 8009c6e:	6813      	ldr	r3, [r2, #0]
 8009c70:	b933      	cbnz	r3, 8009c80 <_free_r+0x30>
 8009c72:	6063      	str	r3, [r4, #4]
 8009c74:	6014      	str	r4, [r2, #0]
 8009c76:	b003      	add	sp, #12
 8009c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c7c:	f000 b90e 	b.w	8009e9c <__malloc_unlock>
 8009c80:	42a3      	cmp	r3, r4
 8009c82:	d908      	bls.n	8009c96 <_free_r+0x46>
 8009c84:	6825      	ldr	r5, [r4, #0]
 8009c86:	1961      	adds	r1, r4, r5
 8009c88:	428b      	cmp	r3, r1
 8009c8a:	bf01      	itttt	eq
 8009c8c:	6819      	ldreq	r1, [r3, #0]
 8009c8e:	685b      	ldreq	r3, [r3, #4]
 8009c90:	1949      	addeq	r1, r1, r5
 8009c92:	6021      	streq	r1, [r4, #0]
 8009c94:	e7ed      	b.n	8009c72 <_free_r+0x22>
 8009c96:	461a      	mov	r2, r3
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	b10b      	cbz	r3, 8009ca0 <_free_r+0x50>
 8009c9c:	42a3      	cmp	r3, r4
 8009c9e:	d9fa      	bls.n	8009c96 <_free_r+0x46>
 8009ca0:	6811      	ldr	r1, [r2, #0]
 8009ca2:	1855      	adds	r5, r2, r1
 8009ca4:	42a5      	cmp	r5, r4
 8009ca6:	d10b      	bne.n	8009cc0 <_free_r+0x70>
 8009ca8:	6824      	ldr	r4, [r4, #0]
 8009caa:	4421      	add	r1, r4
 8009cac:	1854      	adds	r4, r2, r1
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	6011      	str	r1, [r2, #0]
 8009cb2:	d1e0      	bne.n	8009c76 <_free_r+0x26>
 8009cb4:	681c      	ldr	r4, [r3, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	6053      	str	r3, [r2, #4]
 8009cba:	4421      	add	r1, r4
 8009cbc:	6011      	str	r1, [r2, #0]
 8009cbe:	e7da      	b.n	8009c76 <_free_r+0x26>
 8009cc0:	d902      	bls.n	8009cc8 <_free_r+0x78>
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	6003      	str	r3, [r0, #0]
 8009cc6:	e7d6      	b.n	8009c76 <_free_r+0x26>
 8009cc8:	6825      	ldr	r5, [r4, #0]
 8009cca:	1961      	adds	r1, r4, r5
 8009ccc:	428b      	cmp	r3, r1
 8009cce:	bf04      	itt	eq
 8009cd0:	6819      	ldreq	r1, [r3, #0]
 8009cd2:	685b      	ldreq	r3, [r3, #4]
 8009cd4:	6063      	str	r3, [r4, #4]
 8009cd6:	bf04      	itt	eq
 8009cd8:	1949      	addeq	r1, r1, r5
 8009cda:	6021      	streq	r1, [r4, #0]
 8009cdc:	6054      	str	r4, [r2, #4]
 8009cde:	e7ca      	b.n	8009c76 <_free_r+0x26>
 8009ce0:	b003      	add	sp, #12
 8009ce2:	bd30      	pop	{r4, r5, pc}
 8009ce4:	20000f3c 	.word	0x20000f3c

08009ce8 <sbrk_aligned>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	4e0e      	ldr	r6, [pc, #56]	; (8009d24 <sbrk_aligned+0x3c>)
 8009cec:	460c      	mov	r4, r1
 8009cee:	6831      	ldr	r1, [r6, #0]
 8009cf0:	4605      	mov	r5, r0
 8009cf2:	b911      	cbnz	r1, 8009cfa <sbrk_aligned+0x12>
 8009cf4:	f000 f8bc 	bl	8009e70 <_sbrk_r>
 8009cf8:	6030      	str	r0, [r6, #0]
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f000 f8b7 	bl	8009e70 <_sbrk_r>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	d00a      	beq.n	8009d1c <sbrk_aligned+0x34>
 8009d06:	1cc4      	adds	r4, r0, #3
 8009d08:	f024 0403 	bic.w	r4, r4, #3
 8009d0c:	42a0      	cmp	r0, r4
 8009d0e:	d007      	beq.n	8009d20 <sbrk_aligned+0x38>
 8009d10:	1a21      	subs	r1, r4, r0
 8009d12:	4628      	mov	r0, r5
 8009d14:	f000 f8ac 	bl	8009e70 <_sbrk_r>
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d101      	bne.n	8009d20 <sbrk_aligned+0x38>
 8009d1c:	f04f 34ff 	mov.w	r4, #4294967295
 8009d20:	4620      	mov	r0, r4
 8009d22:	bd70      	pop	{r4, r5, r6, pc}
 8009d24:	20000f40 	.word	0x20000f40

08009d28 <_malloc_r>:
 8009d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2c:	1ccd      	adds	r5, r1, #3
 8009d2e:	f025 0503 	bic.w	r5, r5, #3
 8009d32:	3508      	adds	r5, #8
 8009d34:	2d0c      	cmp	r5, #12
 8009d36:	bf38      	it	cc
 8009d38:	250c      	movcc	r5, #12
 8009d3a:	2d00      	cmp	r5, #0
 8009d3c:	4607      	mov	r7, r0
 8009d3e:	db01      	blt.n	8009d44 <_malloc_r+0x1c>
 8009d40:	42a9      	cmp	r1, r5
 8009d42:	d905      	bls.n	8009d50 <_malloc_r+0x28>
 8009d44:	230c      	movs	r3, #12
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	2600      	movs	r6, #0
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d50:	4e2e      	ldr	r6, [pc, #184]	; (8009e0c <_malloc_r+0xe4>)
 8009d52:	f000 f89d 	bl	8009e90 <__malloc_lock>
 8009d56:	6833      	ldr	r3, [r6, #0]
 8009d58:	461c      	mov	r4, r3
 8009d5a:	bb34      	cbnz	r4, 8009daa <_malloc_r+0x82>
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	4638      	mov	r0, r7
 8009d60:	f7ff ffc2 	bl	8009ce8 <sbrk_aligned>
 8009d64:	1c43      	adds	r3, r0, #1
 8009d66:	4604      	mov	r4, r0
 8009d68:	d14d      	bne.n	8009e06 <_malloc_r+0xde>
 8009d6a:	6834      	ldr	r4, [r6, #0]
 8009d6c:	4626      	mov	r6, r4
 8009d6e:	2e00      	cmp	r6, #0
 8009d70:	d140      	bne.n	8009df4 <_malloc_r+0xcc>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	4631      	mov	r1, r6
 8009d76:	4638      	mov	r0, r7
 8009d78:	eb04 0803 	add.w	r8, r4, r3
 8009d7c:	f000 f878 	bl	8009e70 <_sbrk_r>
 8009d80:	4580      	cmp	r8, r0
 8009d82:	d13a      	bne.n	8009dfa <_malloc_r+0xd2>
 8009d84:	6821      	ldr	r1, [r4, #0]
 8009d86:	3503      	adds	r5, #3
 8009d88:	1a6d      	subs	r5, r5, r1
 8009d8a:	f025 0503 	bic.w	r5, r5, #3
 8009d8e:	3508      	adds	r5, #8
 8009d90:	2d0c      	cmp	r5, #12
 8009d92:	bf38      	it	cc
 8009d94:	250c      	movcc	r5, #12
 8009d96:	4629      	mov	r1, r5
 8009d98:	4638      	mov	r0, r7
 8009d9a:	f7ff ffa5 	bl	8009ce8 <sbrk_aligned>
 8009d9e:	3001      	adds	r0, #1
 8009da0:	d02b      	beq.n	8009dfa <_malloc_r+0xd2>
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	442b      	add	r3, r5
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	e00e      	b.n	8009dc8 <_malloc_r+0xa0>
 8009daa:	6822      	ldr	r2, [r4, #0]
 8009dac:	1b52      	subs	r2, r2, r5
 8009dae:	d41e      	bmi.n	8009dee <_malloc_r+0xc6>
 8009db0:	2a0b      	cmp	r2, #11
 8009db2:	d916      	bls.n	8009de2 <_malloc_r+0xba>
 8009db4:	1961      	adds	r1, r4, r5
 8009db6:	42a3      	cmp	r3, r4
 8009db8:	6025      	str	r5, [r4, #0]
 8009dba:	bf18      	it	ne
 8009dbc:	6059      	strne	r1, [r3, #4]
 8009dbe:	6863      	ldr	r3, [r4, #4]
 8009dc0:	bf08      	it	eq
 8009dc2:	6031      	streq	r1, [r6, #0]
 8009dc4:	5162      	str	r2, [r4, r5]
 8009dc6:	604b      	str	r3, [r1, #4]
 8009dc8:	4638      	mov	r0, r7
 8009dca:	f104 060b 	add.w	r6, r4, #11
 8009dce:	f000 f865 	bl	8009e9c <__malloc_unlock>
 8009dd2:	f026 0607 	bic.w	r6, r6, #7
 8009dd6:	1d23      	adds	r3, r4, #4
 8009dd8:	1af2      	subs	r2, r6, r3
 8009dda:	d0b6      	beq.n	8009d4a <_malloc_r+0x22>
 8009ddc:	1b9b      	subs	r3, r3, r6
 8009dde:	50a3      	str	r3, [r4, r2]
 8009de0:	e7b3      	b.n	8009d4a <_malloc_r+0x22>
 8009de2:	6862      	ldr	r2, [r4, #4]
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	bf0c      	ite	eq
 8009de8:	6032      	streq	r2, [r6, #0]
 8009dea:	605a      	strne	r2, [r3, #4]
 8009dec:	e7ec      	b.n	8009dc8 <_malloc_r+0xa0>
 8009dee:	4623      	mov	r3, r4
 8009df0:	6864      	ldr	r4, [r4, #4]
 8009df2:	e7b2      	b.n	8009d5a <_malloc_r+0x32>
 8009df4:	4634      	mov	r4, r6
 8009df6:	6876      	ldr	r6, [r6, #4]
 8009df8:	e7b9      	b.n	8009d6e <_malloc_r+0x46>
 8009dfa:	230c      	movs	r3, #12
 8009dfc:	603b      	str	r3, [r7, #0]
 8009dfe:	4638      	mov	r0, r7
 8009e00:	f000 f84c 	bl	8009e9c <__malloc_unlock>
 8009e04:	e7a1      	b.n	8009d4a <_malloc_r+0x22>
 8009e06:	6025      	str	r5, [r4, #0]
 8009e08:	e7de      	b.n	8009dc8 <_malloc_r+0xa0>
 8009e0a:	bf00      	nop
 8009e0c:	20000f3c 	.word	0x20000f3c

08009e10 <_realloc_r>:
 8009e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e14:	4680      	mov	r8, r0
 8009e16:	4614      	mov	r4, r2
 8009e18:	460e      	mov	r6, r1
 8009e1a:	b921      	cbnz	r1, 8009e26 <_realloc_r+0x16>
 8009e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e20:	4611      	mov	r1, r2
 8009e22:	f7ff bf81 	b.w	8009d28 <_malloc_r>
 8009e26:	b92a      	cbnz	r2, 8009e34 <_realloc_r+0x24>
 8009e28:	f7ff ff12 	bl	8009c50 <_free_r>
 8009e2c:	4625      	mov	r5, r4
 8009e2e:	4628      	mov	r0, r5
 8009e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e34:	f000 f838 	bl	8009ea8 <_malloc_usable_size_r>
 8009e38:	4284      	cmp	r4, r0
 8009e3a:	4607      	mov	r7, r0
 8009e3c:	d802      	bhi.n	8009e44 <_realloc_r+0x34>
 8009e3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e42:	d812      	bhi.n	8009e6a <_realloc_r+0x5a>
 8009e44:	4621      	mov	r1, r4
 8009e46:	4640      	mov	r0, r8
 8009e48:	f7ff ff6e 	bl	8009d28 <_malloc_r>
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d0ed      	beq.n	8009e2e <_realloc_r+0x1e>
 8009e52:	42bc      	cmp	r4, r7
 8009e54:	4622      	mov	r2, r4
 8009e56:	4631      	mov	r1, r6
 8009e58:	bf28      	it	cs
 8009e5a:	463a      	movcs	r2, r7
 8009e5c:	f7ff fed0 	bl	8009c00 <memcpy>
 8009e60:	4631      	mov	r1, r6
 8009e62:	4640      	mov	r0, r8
 8009e64:	f7ff fef4 	bl	8009c50 <_free_r>
 8009e68:	e7e1      	b.n	8009e2e <_realloc_r+0x1e>
 8009e6a:	4635      	mov	r5, r6
 8009e6c:	e7df      	b.n	8009e2e <_realloc_r+0x1e>
	...

08009e70 <_sbrk_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d06      	ldr	r5, [pc, #24]	; (8009e8c <_sbrk_r+0x1c>)
 8009e74:	2300      	movs	r3, #0
 8009e76:	4604      	mov	r4, r0
 8009e78:	4608      	mov	r0, r1
 8009e7a:	602b      	str	r3, [r5, #0]
 8009e7c:	f000 f902 	bl	800a084 <_sbrk>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	d102      	bne.n	8009e8a <_sbrk_r+0x1a>
 8009e84:	682b      	ldr	r3, [r5, #0]
 8009e86:	b103      	cbz	r3, 8009e8a <_sbrk_r+0x1a>
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	20000f44 	.word	0x20000f44

08009e90 <__malloc_lock>:
 8009e90:	4801      	ldr	r0, [pc, #4]	; (8009e98 <__malloc_lock+0x8>)
 8009e92:	f000 b811 	b.w	8009eb8 <__retarget_lock_acquire_recursive>
 8009e96:	bf00      	nop
 8009e98:	20000f48 	.word	0x20000f48

08009e9c <__malloc_unlock>:
 8009e9c:	4801      	ldr	r0, [pc, #4]	; (8009ea4 <__malloc_unlock+0x8>)
 8009e9e:	f000 b80c 	b.w	8009eba <__retarget_lock_release_recursive>
 8009ea2:	bf00      	nop
 8009ea4:	20000f48 	.word	0x20000f48

08009ea8 <_malloc_usable_size_r>:
 8009ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eac:	1f18      	subs	r0, r3, #4
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bfbc      	itt	lt
 8009eb2:	580b      	ldrlt	r3, [r1, r0]
 8009eb4:	18c0      	addlt	r0, r0, r3
 8009eb6:	4770      	bx	lr

08009eb8 <__retarget_lock_acquire_recursive>:
 8009eb8:	4770      	bx	lr

08009eba <__retarget_lock_release_recursive>:
 8009eba:	4770      	bx	lr

08009ebc <sqrt>:
 8009ebc:	b538      	push	{r3, r4, r5, lr}
 8009ebe:	ed2d 8b02 	vpush	{d8}
 8009ec2:	ec55 4b10 	vmov	r4, r5, d0
 8009ec6:	f000 f825 	bl	8009f14 <__ieee754_sqrt>
 8009eca:	4622      	mov	r2, r4
 8009ecc:	462b      	mov	r3, r5
 8009ece:	4620      	mov	r0, r4
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	eeb0 8a40 	vmov.f32	s16, s0
 8009ed6:	eef0 8a60 	vmov.f32	s17, s1
 8009eda:	f7f6 fe2f 	bl	8000b3c <__aeabi_dcmpun>
 8009ede:	b990      	cbnz	r0, 8009f06 <sqrt+0x4a>
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7f6 fe00 	bl	8000aec <__aeabi_dcmplt>
 8009eec:	b158      	cbz	r0, 8009f06 <sqrt+0x4a>
 8009eee:	f000 f8c3 	bl	800a078 <__errno>
 8009ef2:	2321      	movs	r3, #33	; 0x21
 8009ef4:	6003      	str	r3, [r0, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4610      	mov	r0, r2
 8009efc:	4619      	mov	r1, r3
 8009efe:	f7f6 fcad 	bl	800085c <__aeabi_ddiv>
 8009f02:	ec41 0b18 	vmov	d8, r0, r1
 8009f06:	eeb0 0a48 	vmov.f32	s0, s16
 8009f0a:	eef0 0a68 	vmov.f32	s1, s17
 8009f0e:	ecbd 8b02 	vpop	{d8}
 8009f12:	bd38      	pop	{r3, r4, r5, pc}

08009f14 <__ieee754_sqrt>:
 8009f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f18:	ec55 4b10 	vmov	r4, r5, d0
 8009f1c:	4e55      	ldr	r6, [pc, #340]	; (800a074 <__ieee754_sqrt+0x160>)
 8009f1e:	43ae      	bics	r6, r5
 8009f20:	ee10 0a10 	vmov	r0, s0
 8009f24:	ee10 3a10 	vmov	r3, s0
 8009f28:	462a      	mov	r2, r5
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	d110      	bne.n	8009f50 <__ieee754_sqrt+0x3c>
 8009f2e:	ee10 2a10 	vmov	r2, s0
 8009f32:	462b      	mov	r3, r5
 8009f34:	f7f6 fb68 	bl	8000608 <__aeabi_dmul>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	f7f6 f9ac 	bl	800029c <__adddf3>
 8009f44:	4604      	mov	r4, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	ec45 4b10 	vmov	d0, r4, r5
 8009f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f50:	2d00      	cmp	r5, #0
 8009f52:	dc10      	bgt.n	8009f76 <__ieee754_sqrt+0x62>
 8009f54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f58:	4330      	orrs	r0, r6
 8009f5a:	d0f5      	beq.n	8009f48 <__ieee754_sqrt+0x34>
 8009f5c:	b15d      	cbz	r5, 8009f76 <__ieee754_sqrt+0x62>
 8009f5e:	ee10 2a10 	vmov	r2, s0
 8009f62:	462b      	mov	r3, r5
 8009f64:	ee10 0a10 	vmov	r0, s0
 8009f68:	f7f6 f996 	bl	8000298 <__aeabi_dsub>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	f7f6 fc74 	bl	800085c <__aeabi_ddiv>
 8009f74:	e7e6      	b.n	8009f44 <__ieee754_sqrt+0x30>
 8009f76:	1512      	asrs	r2, r2, #20
 8009f78:	d074      	beq.n	800a064 <__ieee754_sqrt+0x150>
 8009f7a:	07d4      	lsls	r4, r2, #31
 8009f7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009f80:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009f84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009f88:	bf5e      	ittt	pl
 8009f8a:	0fda      	lsrpl	r2, r3, #31
 8009f8c:	005b      	lslpl	r3, r3, #1
 8009f8e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009f92:	2400      	movs	r4, #0
 8009f94:	0fda      	lsrs	r2, r3, #31
 8009f96:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009f9a:	107f      	asrs	r7, r7, #1
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	2516      	movs	r5, #22
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009fa6:	1886      	adds	r6, r0, r2
 8009fa8:	428e      	cmp	r6, r1
 8009faa:	bfde      	ittt	le
 8009fac:	1b89      	suble	r1, r1, r6
 8009fae:	18b0      	addle	r0, r6, r2
 8009fb0:	18a4      	addle	r4, r4, r2
 8009fb2:	0049      	lsls	r1, r1, #1
 8009fb4:	3d01      	subs	r5, #1
 8009fb6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009fba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009fbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009fc2:	d1f0      	bne.n	8009fa6 <__ieee754_sqrt+0x92>
 8009fc4:	462a      	mov	r2, r5
 8009fc6:	f04f 0e20 	mov.w	lr, #32
 8009fca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009fce:	4281      	cmp	r1, r0
 8009fd0:	eb06 0c05 	add.w	ip, r6, r5
 8009fd4:	dc02      	bgt.n	8009fdc <__ieee754_sqrt+0xc8>
 8009fd6:	d113      	bne.n	800a000 <__ieee754_sqrt+0xec>
 8009fd8:	459c      	cmp	ip, r3
 8009fda:	d811      	bhi.n	800a000 <__ieee754_sqrt+0xec>
 8009fdc:	f1bc 0f00 	cmp.w	ip, #0
 8009fe0:	eb0c 0506 	add.w	r5, ip, r6
 8009fe4:	da43      	bge.n	800a06e <__ieee754_sqrt+0x15a>
 8009fe6:	2d00      	cmp	r5, #0
 8009fe8:	db41      	blt.n	800a06e <__ieee754_sqrt+0x15a>
 8009fea:	f100 0801 	add.w	r8, r0, #1
 8009fee:	1a09      	subs	r1, r1, r0
 8009ff0:	459c      	cmp	ip, r3
 8009ff2:	bf88      	it	hi
 8009ff4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009ff8:	eba3 030c 	sub.w	r3, r3, ip
 8009ffc:	4432      	add	r2, r6
 8009ffe:	4640      	mov	r0, r8
 800a000:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a004:	f1be 0e01 	subs.w	lr, lr, #1
 800a008:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a00c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a010:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a014:	d1db      	bne.n	8009fce <__ieee754_sqrt+0xba>
 800a016:	430b      	orrs	r3, r1
 800a018:	d006      	beq.n	800a028 <__ieee754_sqrt+0x114>
 800a01a:	1c50      	adds	r0, r2, #1
 800a01c:	bf13      	iteet	ne
 800a01e:	3201      	addne	r2, #1
 800a020:	3401      	addeq	r4, #1
 800a022:	4672      	moveq	r2, lr
 800a024:	f022 0201 	bicne.w	r2, r2, #1
 800a028:	1063      	asrs	r3, r4, #1
 800a02a:	0852      	lsrs	r2, r2, #1
 800a02c:	07e1      	lsls	r1, r4, #31
 800a02e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a032:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a036:	bf48      	it	mi
 800a038:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a03c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a040:	4614      	mov	r4, r2
 800a042:	e781      	b.n	8009f48 <__ieee754_sqrt+0x34>
 800a044:	0ad9      	lsrs	r1, r3, #11
 800a046:	3815      	subs	r0, #21
 800a048:	055b      	lsls	r3, r3, #21
 800a04a:	2900      	cmp	r1, #0
 800a04c:	d0fa      	beq.n	800a044 <__ieee754_sqrt+0x130>
 800a04e:	02cd      	lsls	r5, r1, #11
 800a050:	d50a      	bpl.n	800a068 <__ieee754_sqrt+0x154>
 800a052:	f1c2 0420 	rsb	r4, r2, #32
 800a056:	fa23 f404 	lsr.w	r4, r3, r4
 800a05a:	1e55      	subs	r5, r2, #1
 800a05c:	4093      	lsls	r3, r2
 800a05e:	4321      	orrs	r1, r4
 800a060:	1b42      	subs	r2, r0, r5
 800a062:	e78a      	b.n	8009f7a <__ieee754_sqrt+0x66>
 800a064:	4610      	mov	r0, r2
 800a066:	e7f0      	b.n	800a04a <__ieee754_sqrt+0x136>
 800a068:	0049      	lsls	r1, r1, #1
 800a06a:	3201      	adds	r2, #1
 800a06c:	e7ef      	b.n	800a04e <__ieee754_sqrt+0x13a>
 800a06e:	4680      	mov	r8, r0
 800a070:	e7bd      	b.n	8009fee <__ieee754_sqrt+0xda>
 800a072:	bf00      	nop
 800a074:	7ff00000 	.word	0x7ff00000

0800a078 <__errno>:
 800a078:	4b01      	ldr	r3, [pc, #4]	; (800a080 <__errno+0x8>)
 800a07a:	6818      	ldr	r0, [r3, #0]
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	20000444 	.word	0x20000444

0800a084 <_sbrk>:
 800a084:	4a04      	ldr	r2, [pc, #16]	; (800a098 <_sbrk+0x14>)
 800a086:	6811      	ldr	r1, [r2, #0]
 800a088:	4603      	mov	r3, r0
 800a08a:	b909      	cbnz	r1, 800a090 <_sbrk+0xc>
 800a08c:	4903      	ldr	r1, [pc, #12]	; (800a09c <_sbrk+0x18>)
 800a08e:	6011      	str	r1, [r2, #0]
 800a090:	6810      	ldr	r0, [r2, #0]
 800a092:	4403      	add	r3, r0
 800a094:	6013      	str	r3, [r2, #0]
 800a096:	4770      	bx	lr
 800a098:	20000f4c 	.word	0x20000f4c
 800a09c:	20000f50 	.word	0x20000f50

0800a0a0 <_init>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	bf00      	nop
 800a0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0a6:	bc08      	pop	{r3}
 800a0a8:	469e      	mov	lr, r3
 800a0aa:	4770      	bx	lr

0800a0ac <_fini>:
 800a0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ae:	bf00      	nop
 800a0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0b2:	bc08      	pop	{r3}
 800a0b4:	469e      	mov	lr, r3
 800a0b6:	4770      	bx	lr
